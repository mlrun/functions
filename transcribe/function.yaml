kind: job
metadata:
  name: transcribe
  tag: ''
  hash: 5cd620de67a936ee8a87cfc1f0b97e19730d0a69
  project: ''
  labels:
    author: yonatans
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - transformers
    - tqdm
    - torchaudio
    - torch
  entry_points:
    do_task:
      name: do_task
      doc: Try to perform the task storing an error if occurred.
      parameters:
      - name: self
      outputs: []
      lineno: 348
      has_varargs: false
      has_kwargs: false
    is_failed:
      name: is_failed
      doc: Check if the task failed.
      parameters:
      - name: self
      outputs:
      - doc: Whether the task failed.
        type: bool
      lineno: 70
      has_varargs: false
      has_kwargs: false
    get_result:
      name: get_result
      doc: 'Get the result of the task. If the task failed, the error will be returned,
        otherwise, the result will be the

        text file name.'
      parameters:
      - name: self
      outputs:
      - doc: The task's result.
        type: Tuple[str, str]
      lineno: 78
      has_varargs: false
      has_kwargs: false
    to_tuple:
      name: to_tuple
      doc: Convert the task to a tuple to reconstruct it later (used for multiprocessing
        to pass in queue).
      parameters:
      - name: self
      outputs:
      - doc: The converted task.
        type: Tuple[str, dict]
      lineno: 358
      has_varargs: false
      has_kwargs: false
    transcription_output_channels:
      name: transcription_output_channels
      doc: Get the transcription output channels.
      parameters:
      - name: self
      outputs:
      - doc: The transcription output channels.
        type: List[Tuple[str, dict]]
      lineno: 340
      has_varargs: false
      has_kwargs: false
    process_batch:
      name: process_batch
      doc: 'Process a batch of transcriptions. Tasks related to the given batch will
        be created and stored in the batch

        processor.'
      parameters:
      - name: self
      - name: batch
        type: List[dict]
        doc: The batch of transcriptions to process.
      outputs: []
      lineno: 575
      has_varargs: false
      has_kwargs: false
    get_tasks:
      name: get_tasks
      doc: Get the tasks to perform.
      parameters:
      - name: self
      outputs:
      - doc: The tasks to perform.
        type: List[BaseTask]
      lineno: 453
      has_varargs: false
      has_kwargs: false
    do_tasks:
      name: do_tasks
      doc: Perform the tasks. Should be used if no multiprocessing queue is given
        to a transcriber.
      parameters:
      - name: self
      outputs: []
      lineno: 463
      has_varargs: false
      has_kwargs: false
    get_results:
      name: get_results
      doc: Get the results of the tasks. The stored results are then cleared.
      parameters:
      - name: self
      outputs:
      - doc: The results of the tasks.
        type: List[Tuple[bool, Tuple[str, str]]]
      lineno: 471
      has_varargs: false
      has_kwargs: false
    load:
      name: load
      doc: Load the transcriber. Must be called before transcribing.
      parameters:
      - name: self
      outputs: []
      lineno: 695
      has_varargs: false
      has_kwargs: false
    transcribe:
      name: transcribe
      doc: "Transcribe audio files into text files and collect additional data. The\
        \ end result is a directory of transcribed\ntext files and a dataframe containing\
        \ the following columns:\n\n* audio_file - The audio file path.\n* transcription_file\
        \ - The transcribed text file name in the output directory.\n\nThe transcription\
        \ is based on Huggingface's ASR pipeline -\nhttps://huggingface.co/transformers/main_classes/pipelines.html#transformers.AutomaticSpeechRecognitionPipeline\
        \ and\nis tested with OpenAI's Whisper models - https://huggingface.co/openai.\n\
        \nIf one of the speaker diarization parameters are given (either `speech_diarization`\
        \ or\n`speech_diarize_per_channel`), the transcription will be written in\
        \ a conversation format, where each speaker will\nbe written in a separate\
        \ line::\n\n    speaker_1: text\n    speaker_2: text\n    speaker_1: text\n\
        \    ..."
      parameters:
      - name: data_path
        type: Union[str, Path, List[Union[str, Path]]]
        doc: A directory of audio files or a single file or a list of files to transcribe.
      - name: output_directory
        type: str
        doc: Path to a directory to save all transcribed audio files. If not given,
          will save the transcribed files in a temporary directory.
        default: null
      - name: model_name
        type: str
        doc: 'The model name to use. Should be a model from the OpenAI''s Whisper
          models for best results (for example "tiny", "base", "large", etc.). See
          here for more information: https://huggingface.co/openai?search_models=whisper.'
        default: openai/whisper-tiny
      - name: device
        type: str
        doc: The device to use for inference. If not given, will use GPU if available.
        default: null
      - name: use_flash_attention_2
        type: bool
        doc: 'Whether to use the Flash Attention 2 implementation. It can be used
          only with one of the following GPUs: Nvidia H series and Nvidia A series.
          T4 support will be available soon.'
        default: null
      - name: use_better_transformers
        type: bool
        doc: Whether to use the Better Transformers library to further optimize the
          model. Should be used for all use cases that do not support flash attention
          2.
        default: null
      - name: assistant_model
        type: str
        doc: 'The assistant model name to use for inference. Notice that the optimizations
          (flash attention 2 and better transformers) will be applied for the assistant
          as well. Should be a model from Huggingface''s distil-whisper (see here
          for more information: https://github.com/huggingface/distil-whisper).'
        default: null
      - name: max_new_tokens
        type: int
        doc: The maximum number of new tokens to generate. This is used to limit the
          generation length. Default is 128 tokens.
        default: 128
      - name: chunk_length_s
        type: int
        doc: The audio chunk to split the audio to (in seconds). Default is 30 seconds.
        default: 30
      - name: batch_size
        type: int
        doc: The batch size to use for inference. Default is 2.
        default: 8
      - name: spoken_language
        type: str
        doc: Aim whisper to know what language is spoken. If None, it will try to
          detect it.
        default: null
      - name: translate_to_english
        type: bool
        doc: Whether to translate the transcriptions to English.
        default: false
      - name: speech_diarization
        type: Dict[str, List[Tuple[float, float, str]]]
        doc: 'A speech diarization dictionary with the file names to transcribe as
          keys and their diarization as value. The diarization is a list of tuples:
          (start, end, speaker). An example for a diarization dictionary::'
        default: null
      - name: speech_diarize_per_channel
        type: int
        doc: 'Perform speech diarization per channel. Each speaker is expected to
          belong to a separate channel in the audio. Notice: This will make the transcription
          slower as each channel wil be transcribed separatly. If a speech diarization
          is passed (via the `speech_diarization` parameter), this parameter is ignored.'
        default: null
      - name: speaker_labels
        type: List[str]
        doc: A list of speaker labels by channel order to use for writing the transcription
          with respect to per channel speech diarization. This won't be used together
          with a given speech diarization (via the `speech_diarization` parameter).
        default: null
      - name: use_multiprocessing
        type: Union[bool, int]
        doc: 'Whether to use multiprocessing to transcribe the audio files. Can be
          either a boolean value or an integer. If `True`, will use the default amount
          of workers (3): 1 for transcription, 1 for batch processing and 1 for task
          completion (such as speech diarization and writing to files). To control
          the amount of tasks completion workers, an integer can be provided to specify
          the amount of workers. `False`, will use a single process. Default is `False`.'
        default: false
      - name: verbose
        type: bool
        doc: Whether to print the progress of the transcription. Default is `False`.
        default: false
      outputs: []
      lineno: 1097
      has_varargs: false
      has_kwargs: false
    audio_iterator:
      name: audio_iterator
      doc: ''
      parameters: []
      outputs:
      - type: Generator[Union[dict, str], None, None]
      lineno: 804
      has_varargs: false
      has_kwargs: false
    batch_iterator:
      name: batch_iterator
      doc: ''
      parameters: []
      outputs:
      - type: Generator[List[Union[dict, str]], None, None]
      lineno: 816
      has_varargs: false
      has_kwargs: false
    open_mpi_handler:
      name: open_mpi_handler
      doc: ''
      parameters:
      - name: worker_inputs
        type: List[str]
      - name: root_worker_inputs
        type: Dict[str, Any]
        default: null
      outputs: []
      lineno: 957
      has_varargs: false
      has_kwargs: false
    decorator:
      name: decorator
      doc: ''
      parameters:
      - name: handler
      outputs: []
      lineno: 969
      has_varargs: false
      has_kwargs: false
    wrapper:
      name: wrapper
      doc: ''
      parameters: []
      outputs: []
      lineno: 974
      has_varargs: false
      has_kwargs: true
  description: Transcribe audio files into text files
  default_handler: transcribe
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
