kind: job
metadata:
  name: translate
  tag: ''
  hash: 7eedf684bcebfbfd964e5503afbb56335c8f4097
  project: ''
  labels:
    author: guyl
  categories:
  - data-preparation
  - huggingface
  - machine-learning
  - deep-learning
  - NLP
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - transformers
    - sentencepiece
    - torch
    - tqdm
  entry_points:
    open_mpi_handler:
      name: open_mpi_handler
      doc: ''
      parameters:
      - name: worker_inputs
        type: List[str]
      - name: root_worker_inputs
        type: Dict[str, Any]
        default: null
      outputs: []
      lineno: 56
      has_varargs: false
      has_kwargs: false
    decorator:
      name: decorator
      doc: ''
      parameters:
      - name: handler
      outputs: []
      lineno: 68
      has_varargs: false
      has_kwargs: false
    wrapper:
      name: wrapper
      doc: ''
      parameters: []
      outputs: []
      lineno: 73
      has_varargs: false
      has_kwargs: true
    translate:
      name: translate
      doc: 'Translate text files using a transformer model from Huggingface''s hub
        according to the source and target languages

        given (or using the directly provided model name). The end result is a directory
        of translated text files and a

        dataframe containing the following columns:


        * text_file - The text file path.

        * translation_file - The translation text file name in the output directory.'
      parameters:
      - name: data_path
        type: Union[str, List[str], Path]
        doc: A directory of text files or a single file or a list of files to translate.
      - name: output_directory
        type: str
        doc: Directory where the translated files will be saved.
      - name: model_name
        type: str
        doc: The name of a model to load. If None, the model name is constructed using
          the source and target languages parameters.
        default: null
      - name: source_language
        type: str
        doc: The source language code (e.g., 'en' for English).
        default: null
      - name: target_language
        type: str
        doc: The target language code (e.g., 'en' for English).
        default: null
      - name: device
        type: str
        doc: The device index for transformers. Default will prefer cuda if available.
        default: null
      - name: model_kwargs
        type: dict
        doc: Keyword arguments to pass regarding the loading of the model in HuggingFace's
          `pipeline` function.
        default: null
      - name: batch_size
        type: int
        doc: The number of batches to use in translation. The files are translated
          one by one, but the sentences can be batched.
        default: 1
      - name: translation_kwargs
        type: dict
        doc: Additional keyword arguments to pass to a `transformers.TranslationPipeline`
          when doing the translation inference. Notice the batch size here is being
          added automatically.
        default: null
      - name: verbose
        type: bool
        doc: 'Whether to present logs of a progress bar and errors. Default: True.'
        default: false
      outputs:
      - doc: 'A tuple of:'
        type: Tuple[str, pd.DataFrame, dict]
      lineno: 135
      has_varargs: false
      has_kwargs: false
  description: Translate text files from one language to another
  default_handler: translate
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
