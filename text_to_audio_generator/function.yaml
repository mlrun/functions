spec:
  image: ''
  default_handler: generate_multi_speakers_audio
  build:
    functionSourceCode: 
    requirements:
    - openai
    - torchaudio
    - pydub
    origin_filename: ''
    base_image: mlrun/mlrun
    code_origin: ''
  command: ''
  disable_auto_mount: false
  description: Generate audio file from text using different speakers
  entry_points:
    generate_multi_speakers_audio:
      has_varargs: false
      doc: Generate audio files from text files.
      name: generate_multi_speakers_audio
      outputs:
      - doc: 'A tuple of: - The output directory path. - The generated audio files
          dataframe. - The errors'' dictionary.'
        type: Tuple[str, pd.DataFrame, dict]
      has_kwargs: false
      parameters:
      - name: data_path
        type: str
        doc: Path to the text file or directory containing the text files to generate
          audio from.
      - name: speakers
        type: Union[List[str], Dict[str, int]]
        doc: List / Dict of speakers to generate audio for. If a list is given, the
          speakers will be assigned to channels in the order given. If dictionary,
          the keys will be the speakers and the values will be the channels.
      - name: available_voices
        type: List[str]
        doc: 'List of available voices to use for the generation. See here for the
          available voices: https://platform.openai.com/docs/guides/text-to-speech#voice-options'
      - name: output_directory
        type: str
        doc: Path to the directory to save the generated audio files to.
        default: null
      - name: model
        type: str
        doc: Which model to use for the generation.
        default: tts-1
      - name: sample_rate
        type: int
        doc: The sampling rate of the generated audio.
        default: 16000
      - name: file_format
        type: str
        doc: The format of the generated audio files.
        default: wav
      - name: verbose
        type: bool
        doc: Whether to print the progress of the generation.
        default: true
      - name: bits_per_sample
        type: Optional[int]
        doc: Changes the bit depth for the supported formats. Supported only in "wav"
          or "flac" formats.
        default: null
      - name: speed
        type: float
        doc: The speed of the generated audio. Select a value from `0.25` to `4.0`.
          `1.0` is the default.
        default: 1.0
      lineno: 38
kind: job
metadata:
  categories:
  - data-preparation
  - machine-learning
  - pytorch
  tag: ''
  name: text-to-audio-generator
verbose: false
