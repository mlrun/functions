kind: job
metadata:
  name: huggingface-auto-trainer
  tag: ''
  hash: 55c9aa4a822780f7388819ccf633dfe26b31f02e
  project: ''
  labels:
    author: Zeevr
  categories:
  - huggingface
  - genai
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements: []
  entry_points:
    add_interface:
      name: add_interface
      doc: ''
      parameters:
      - name: cls
      - name: obj
        type: Trainer
      - name: restoration
        type: MLRunInterfaceRestorationType
        default: null
      outputs: []
      lineno: 70
      has_varargs: false
      has_kwargs: false
    mlrun_train:
      name: mlrun_train
      doc: ''
      parameters:
      - name: cls
      outputs: []
      lineno: 80
      has_varargs: false
      has_kwargs: false
    wrapper:
      name: wrapper
      doc: ''
      parameters:
      - name: self
        type: Trainer
      outputs: []
      lineno: 81
      has_varargs: true
      has_kwargs: true
    on_epoch_begin:
      name: on_epoch_begin
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      outputs: []
      lineno: 129
      has_varargs: false
      has_kwargs: true
    on_epoch_end:
      name: on_epoch_end
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      outputs: []
      lineno: 140
      has_varargs: false
      has_kwargs: true
    on_log:
      name: on_log
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      - name: logs
        type: Dict[str, float]
        default: null
      outputs: []
      lineno: 151
      has_varargs: false
      has_kwargs: true
    on_train_begin:
      name: on_train_begin
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      outputs: []
      lineno: 177
      has_varargs: false
      has_kwargs: true
    on_train_end:
      name: on_train_end
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      - name: model
        type: PreTrainedModel
        default: null
      - name: tokenizer
        type: PreTrainedTokenizer
        default: null
      outputs: []
      lineno: 188
      has_varargs: false
      has_kwargs: true
    on_evaluate:
      name: on_evaluate
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      outputs: []
      lineno: 201
      has_varargs: false
      has_kwargs: true
    log_metrics:
      name: log_metrics
      doc: ''
      parameters:
      - name: self
      outputs: []
      lineno: 215
      has_varargs: false
      has_kwargs: false
    log_metric_plot:
      name: log_metric_plot
      doc: ''
      parameters:
      - name: self
      - name: name
        type: str
      - name: scores
        type: List[float]
      outputs: []
      lineno: 222
      has_varargs: false
      has_kwargs: false
    apply_mlrun:
      name: apply_mlrun
      doc: This is temporary and will be built in mlrun 1.5.0
      parameters:
      - name: trainer
        type: Trainer
      - name: model_name
        type: str
        default: null
      - name: tag
        type: str
        default: ''
      - name: context
        type: MLClientCtx
        default: null
      - name: auto_log
        type: bool
        default: true
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs: []
      lineno: 244
      has_varargs: false
      has_kwargs: true
    finetune_llm:
      name: finetune_llm
      doc: "Fine-tunes a Language Model (LLM) on a specific task using the provided\
        \ dataset.\n The function takes various configuration parameters to customize\
        \ the training process\n and adapt the model to specific tasks using a provided\
        \ dataset."
      parameters:
      - name: context
        type: MLClientCtx
        doc: mlrun context in order to log trained model
      - name: train_dataset
        type: Union[str, mlrun.datastore.DataItem]
        doc: The train dataset used for fine-tuning the language model.
      - name: eval_dataset
        type: str
        doc: The eval dataset used for evaluate the language model during training.
        default: null
      - name: train_load_dataset_kwargs
        type: dict
        doc: kwargs for dataset loading
        default: {}
      - name: eval_load_dataset_kwargs
        type: dict
        doc: kwargs for dataset loading
        default: {}
      - name: dataset_columns_to_train
        type: Union[str, list]
        doc: which columns to pass to the model as inputs
        default: text
      - name: model
        type: Union[str, List[str]]
        doc: a tuple containing model name and class, or str with model name or path
        default: huggingface-model
      - name: tokenizer
        type: Union[str, List[str]]
        doc: a tuple containing tokenizer name and class, or str with tokenizer name
          or path
        default: null
      - name: deepspeed_config
        type: Union[dict, bool]
        doc: Configuration options for DeepSpeed (optional).
        default: false
      - name: quantization_config
        type: Union[dict, bool]
        doc: Configuration options for model quantization (optional).
        default: false
      - name: lora_config
        type: Union[dict, bool]
        doc: Configuration options for Low-Rank Approximation (LoRA) (optional).
        default: false
      - name: training_config
        type: dict
        doc: Configuration options specific to the fine-tuning training process (optional).
        default: {}
      - name: model_pretrained_config
        type: dict
        doc: config to load the pretrained model
        default: {}
      - name: tokenizer_pretrained_config
        type: dict
        doc: config to load the pretrained tokenizer
        default: {}
      - name: data_collator_config
        type: dict
        doc: Configuration options for data collation during training (optional).
        default: {}
      - name: task
        type: str
        doc: A description of the specific task the model is being fine-tuned for.
        default: text-generation
      - name: use_cuda
        type: bool
        doc: use gpu or not
        default: true
      - name: framework
        type: str
        doc: pt ot tf
        default: pt
      - name: device_map
        type: str
        default: auto
      outputs: []
      lineno: 630
      has_varargs: false
      has_kwargs: true
    evaluate:
      name: evaluate
      doc: 'Evaluating the model using perplexity, for more information visit:

        https://huggingface.co/docs/transformers/perplexity'
      parameters:
      - name: context
        doc: mlrun context
      - name: model_path
        doc: path to the model directory
      - name: data
        type: DataFrame
        doc: the data to evaluate the model
      - name: model_name
        type: str
        doc: name of base model
        default: null
      - name: tokenizer_name
        type: str
        doc: name of base tokenizer
        default: null
      outputs: []
      lineno: 784
      has_varargs: false
      has_kwargs: false
  description: fine-tune llm model with ease
  default_handler: finetune_llm
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
