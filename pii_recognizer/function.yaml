kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: c43ac6fcbbcdb422031fb2e810ee680aa2a719df
  project: default
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: IyBDb3B5cmlnaHQgMjAxOSBJZ3VhemlvCiMKIyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKIyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiMgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiMKCmltcG9ydCB3YXJuaW5ncwppbXBvcnQgb3MKaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IG1scnVuCmltcG9ydCBwYXRobGliCmltcG9ydCB0ZW1wZmlsZQpmcm9tIHRxZG0uYXV0byBpbXBvcnQgdHFkbQpmcm9tIHR5cGluZyBpbXBvcnQgTGlzdCwgVHVwbGUsIFNldAppbXBvcnQgcHJlc2lkaW9fYW5hbHl6ZXIgYXMgcGEKZnJvbSBwcmVzaWRpb19hbm9ueW1pemVyIGltcG9ydCBBbm9ueW1pemVyRW5naW5lCmZyb20gYW5ub3RhdGVkX3RleHQudXRpbCBpbXBvcnQgZ2V0X2Fubm90YXRlZF9odG1sCgp0cnk6CiAgICBmcm9tIGZsYWlyLmRhdGEgaW1wb3J0IFNlbnRlbmNlLCBTcGFuCiAgICBmcm9tIGZsYWlyLm1vZGVscyBpbXBvcnQgU2VxdWVuY2VUYWdnZXIKZXhjZXB0IE1vZHVsZU5vdEZvdW5kRXJyb3I6CiAgICBwcmludCgiRmxhaXIgaXMgbm90IGluc3RhbGxlZCIpCgojIFRoZXJlIGlzIGEgY29uZmxpY3QgYmV0d2VlbiBSdXN0LWJhc2VkIHRva2VuaXplcnMnIHBhcmFsbGVsIHByb2Nlc3NpbmcKIyBhbmQgUHl0aG9uJ3MgZm9yayBvcGVyYXRpb25zIGR1cmluZyBtdWx0aXByb2Nlc3NpbmcuIFRvIGF2b2lkIHRoaXMsIHdlIG5lZWQKIyB0aGUgZm9sbG93aW5nIHR3byBsaW5lcwoKb3MuZW52aXJvblsiVE9LRU5JWkVSU19QQVJBTExFTElTTSJdID0gImZhbHNlIgp3YXJuaW5ncy5maWx0ZXJ3YXJuaW5ncygiaWdub3JlIikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJwaWktcmVjb2duaXplciIpCgoKY2xhc3MgUGF0dGVyblJlY29nbml6ZXJGYWN0b3J5OgogICAgIiIiCiAgICBGYWN0b3J5IGZvciBjcmVhdGluZyBwYXR0ZXJuIHJlY29nbml6ZXJzLCBpdCBjYW4gYmUgZXh0ZW5kZWQgaW4gdGhlIGZ1dHVyZSB0bwogICAgYWRkIG1vcmUgcmVnZXggcGF0dGVybiBmb3IgZGlmZmVyZW50IGVudGl0aWVzLiBGb3IgdGhlIHBhdHRlcm4gcmVjb2duaXplciB0byB3b3JrLAogICAgd2UgbmVlZCBjb25zdHJ1Y3QgYSBsaXN0IG9mIHJlZ2V4IHBhdHRlcm5zIGZvciBlYWNoIGVudGl0eS4KICAgICIiIgoKICAgICMgY3JlYXRlIGEgbGlzdCBvZiBwYXR0ZXJuIHJlY29nbml6ZXJzCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9jcmVhdGVfcGF0dGVybl9yZWNvZ25pemVyKCk6CiAgICAgICAgIiIiCiAgICAgICAgRm9yIGVhY2ggZW50aXR5LCBjcmVhdGUgYSBsaXN0IG9mIHBhdHRlcm5zIHRvIHJlY29nbml6ZSBpdAogICAgICAgICIiIgoKICAgICAgICAjIEVudGl0aWVzIHRvIHJlY29nbml6ZSBhbmQgdGhlaXIgcmVnZXggcGF0dGVybnMKCiAgICAgICAgX0RFRkFVTFRfRU5USVRJRVMgPSB7CiAgICAgICAgICAgICJDUkVESVRfQ0FSRCI6IFtwYS5QYXR0ZXJuKCJDUkVESVRfQ0FSRCIsIHIiXGIoPzpcZFsgLV0qPyl7MTMsMTZ9XGIiLCAwLjUpXSwKICAgICAgICAgICAgIlNTTiI6IFtwYS5QYXR0ZXJuKCJTU04iLCByIlxiXGR7M30tP1xkezJ9LT9cZHs0fVxiIiwgMC41KV0sCiAgICAgICAgICAgICJQSE9ORSI6IFtwYS5QYXR0ZXJuKCJQSE9ORSIsIHIiXCg/XGR7M31cKT9bLS5cc10/XGR7M31bLS5cc10/XGR7NH0iLCAwLjUpXSwKICAgICAgICAgICAgIkVNQUlMIjogW3BhLlBhdHRlcm4oIkVNQUlMIiwgciJcUytAXFMrIiwgMC41KV0sCiAgICAgICAgfQogICAgICAgIHJlcyA9IFtdCiAgICAgICAgZm9yIGVudGl0eSwgcGF0dGVybiBpbiBfREVGQVVMVF9FTlRJVElFUy5pdGVtcygpOgogICAgICAgICAgICByZXMuYXBwZW5kKHBhLlBhdHRlcm5SZWNvZ25pemVyKHN1cHBvcnRlZF9lbnRpdHk9ZW50aXR5LCBwYXR0ZXJucz1wYXR0ZXJuKSkKICAgICAgICByZXR1cm4gcmVzCgoKY2xhc3MgQ3VzdG9tU3BhY3lSZWNvZ25pemVyKHBhLkxvY2FsUmVjb2duaXplcik6CiAgICAiIiIKICAgIEN1c3RvbSBTcGFjeSBSZWNvZ25pemVyIGZyb20gUHJlc2lkaW8gQW5hbHl6ZXIgdHJhaW5lZCBvbiBQcml2eSBkYXRhLgogICAgVGhlIHByaXZ5IGRhdGEgaXMgZ2VuZXJhdGVkIHVzaW5nIHRoaXMgaHR0cHM6Ly9naXRodWIuY29tL3BpeGllLWlvL3BpeGllL3RyZWUvbWFpbi9zcmMvZGF0YWdlbi9waWkvcHJpdnkKICAgIEl0IGNhbiBiZSB1c2VkIHRvIHJlY29nbml6ZSBjdXN0b20gZW50aXRpZXMsIFNpbmNlIHdlIHdhbnQgdG8gdXNlIFByZXNpZGlvJ3MgUmVnaXN0cmllcyB0byBnZW5lcmF0ZSBBbmFseXplckVuZ2luZSwKICAgIGl0IGluaGVyaXRzIGZyb20gUHJlc2lkaW8gQW5hbHl6ZXIncyBMb2NhbFJlY29nbml6ZXIgY2xhc3MuCiAgICAiIiIKCiAgICAjIEVudGl0aWVzIHRvIHJlY29nbml6ZQoKICAgIF9ERUZBVUxUX0VOVElUSUVTID0gWwogICAgICAgICJMT0NBVElPTiIsCiAgICAgICAgIlBFUlNPTiIsCiAgICAgICAgIk5SUCIsCiAgICAgICAgIk9SR0FOSVpBVElPTiIsCiAgICAgICAgIkRBVEVfVElNRSIsCiAgICBdCgogICAgIyBEZWZhdWx0IGV4cGxhbmF0aW9uIGZvciB0aGlzIHJlY29nbml6ZXIKCiAgICBfREVGQVVMVF9FWFBMQU5BVElPTiA9ICgKICAgICAgICAiSWRlbnRpZmllZCBhcyB7fSBieSBTcGFjeSdzIE5hbWVkIEVudGl0eSBSZWNvZ25pdGlvbiAoUHJpdnktdHJhaW5lZCkiCiAgICApCgogICAgIyBMYWJlbCBncm91cHMgdG8gY2hlY2sKCiAgICBfREVGQVVMVF9DSEVDS19MQUJFTF9HUk9VUFMgPSBbCiAgICAgICAgKHsiTE9DQVRJT04ifSwgeyJMT0MiLCAiTE9DQVRJT04iLCAiU1RSRUVUX0FERFJFU1MiLCAiQ09PUkRJTkFURSJ9KSwKICAgICAgICAoeyJQRVJTT04ifSwgeyJQRVIiLCAiUEVSU09OIn0pLAogICAgICAgICh7Ik5SUCJ9LCB7Ik5PUlAiLCAiTlJQIn0pLAogICAgICAgICh7Ik9SR0FOSVpBVElPTiJ9LCB7Ik9SRyJ9KSwKICAgICAgICAoeyJEQVRFX1RJTUUifSwgeyJEQVRFX1RJTUUifSksCiAgICBdCgogICAgIyBwcmV0cmFpbmVkIG1vZGVsIGZvciB0aGlzIHJlY29nbml6ZXIKCiAgICBfREVGQVVMVF9NT0RFTF9MQU5HVUFHRVMgPSB7CiAgICAgICAgImVuIjogImJla2kvZW5fc3BhY3lfcGlpX2Rpc3RpbGJlcnQiLAogICAgfQoKICAgIF9ERUZBVUxUX1BSRVNJRElPX0VRVUlWQUxFTkNFUyA9IHsKICAgICAgICAiUEVSIjogIlBFUlNPTiIsCiAgICAgICAgIkxPQyI6ICJMT0NBVElPTiIsCiAgICAgICAgIk9SRyI6ICJPUkdBTklaQVRJT04iLAogICAgICAgICJOUk9QIjogIk5SUCIsCiAgICAgICAgIkRBVEVfVElNRSI6ICJEQVRFX1RJTUUiLAogICAgfQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIHN1cHBvcnRlZF9sYW5ndWFnZTogc3RyID0gImVuIiwKICAgICAgICBzdXBwb3J0ZWRfZW50aXRpZXM6IExpc3Rbc3RyXSA9IE5vbmUsCiAgICAgICAgY2hlY2tfbGFiZWxfZ3JvdXBzOiBUdXBsZVtTZXQsIFNldF0gPSBOb25lLAogICAgICAgIGNvbnRleHQ6IExpc3Rbc3RyXSA9IE5vbmUsCiAgICAgICAgbmVyX3N0cmVuZ3RoOiBmbG9hdCA9IDAuODUsCiAgICApOgogICAgICAgICIiIgogICAgICAgIEluaXRpYWxpemUgU3BhY3kgUmVjb2duaXplci4KICAgICAgICA6cGFyYW0gc3VwcG9ydGVkX2xhbmd1YWdlOiAgICAgIExhbmd1YWdlIHRvIHVzZSwgZGVmYXVsdCBpcyBFbmdsaXNoCiAgICAgICAgOnBhcmFtIHN1cHBvcnRlZF9lbnRpdGllczogICAgICBFbnRpdGllcyB0byB1c2UgZm9yIHJlY29nbml0aW9uCiAgICAgICAgOnBhcmFtIGNoZWNrX2xhYmVsX2dyb3VwczogICAgICBMYWJlbCBncm91cHMgdG8gY2hlY2sgZm9yIHRoZSBlbnRpdGllcwogICAgICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgICAgICAgICAgQ29udGV4dCB0byB1c2UgaWYgYW55CiAgICAgICAgOnBhcmFtIG5lcl9zdHJlbmd0aDogICAgICAgICAgICBEZWZhdWx0IGNvbmZpZGVuY2UgZm9yIE5FUiBwcmVkaWN0aW9uCgogICAgICAgIDpyZXR1cm5zICAgICAgICAgICAgICAgICAgICAgICAgU3BhY3lSZWNvZ25pemVyIG9iamVjdAogICAgICAgICIiIgoKICAgICAgICAjIERlZmF1bHQgY29uZmlkZW5jZSBmb3IgTkVSIHByZWRpY3Rpb24KICAgICAgICBzZWxmLm5lcl9zdHJlbmd0aCA9IG5lcl9zdHJlbmd0aAoKICAgICAgICBzZWxmLmNoZWNrX2xhYmVsX2dyb3VwcyA9IGNoZWNrX2xhYmVsX2dyb3VwcyBvciBzZWxmLl9ERUZBVUxUX0NIRUNLX0xBQkVMX0dST1VQUwogICAgICAgIHN1cHBvcnRlZF9lbnRpdGllcyA9IHN1cHBvcnRlZF9lbnRpdGllcyBvciBzZWxmLl9ERUZBVUxUX0VOVElUSUVTCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygKICAgICAgICAgICAgc3VwcG9ydGVkX2VudGl0aWVzPXN1cHBvcnRlZF9lbnRpdGllcywKICAgICAgICAgICAgc3VwcG9ydGVkX2xhbmd1YWdlPXN1cHBvcnRlZF9sYW5ndWFnZSwKICAgICAgICApCgogICAgIyBnZXQgdGhlIHByZXNpZGlvIGV4cGxhbmF0aW9uIGZvciB0aGUgcmVzdWx0CgogICAgZGVmIF9idWlsZF9zcGFjeV9leHBsYW5hdGlvbigKICAgICAgICBzZWxmLCBvcmlnaW5hbF9zY29yZTogZmxvYXQsIGV4cGxhbmF0aW9uOiBzdHIKICAgICkgLT4gcGEuQW5hbHlzaXNFeHBsYW5hdGlvbjoKICAgICAgICAiIiIKICAgICAgICBDcmVhdGUgZXhwbGFuYXRpb24gZm9yIHdoeSB0aGlzIHJlc3VsdCB3YXMgZGV0ZWN0ZWQuCiAgICAgICAgOnBhcmFtIG9yaWdpbmFsX3Njb3JlOiAgICAgICAgICBTY29yZSBnaXZlbiBieSB0aGlzIHJlY29nbml6ZXIKICAgICAgICA6cGFyYW0gZXhwbGFuYXRpb246ICAgICAgICAgICAgIEV4cGxhbmF0aW9uIHN0cmluZwoKICAgICAgICA6cmV0dXJuczogICAgICAgICAgICAgICAgICAgICAgIFByZXNpZGlvIEFuYWx5c2lzRXhwbGFuYXRpb24gb2JqZWN0CiAgICAgICAgIiIiCiAgICAgICAgZXhwbGFuYXRpb24gPSBwYS5BbmFseXNpc0V4cGxhbmF0aW9uKAogICAgICAgICAgICByZWNvZ25pemVyPXNlbGYuX19jbGFzc19fLl9fbmFtZV9fLAogICAgICAgICAgICBvcmlnaW5hbF9zY29yZT1vcmlnaW5hbF9zY29yZSwKICAgICAgICAgICAgdGV4dHVhbF9leHBsYW5hdGlvbj1leHBsYW5hdGlvbiwKICAgICAgICApCiAgICAgICAgcmV0dXJuIGV4cGxhbmF0aW9uCgogICAgIyBtYWluIG1ldGhvZCBmb3IgdGhlIHJlY29nbml6ZXIKICAgIGRlZiBhbmFseXplKHNlbGYsIHRleHQ6IHN0ciwgZW50aXRpZXM6IExpc3Rbc3RyXSwgbmxwX2FydGlmYWN0cz1Ob25lKTogICMgbm9xYSBEMTAyCiAgICAgICAgIiIiCiAgICAgICAgQW5hbHl6ZSB0ZXh0IHVzaW5nIFNwYWN5LgogICAgICAgIDpwYXJhbSB0ZXh0OiAgICAgICAgICAgICAgICAgICAgVGV4dCB0byBhbmFseXplCiAgICAgICAgOnBhcmFtIGVudGl0aWVzOiAgICAgICAgICAgICAgICBFbnRpdGllcyB0byBhbmFseXplCiAgICAgICAgOnBhcmFtIG5scF9hcnRpZmFjdHM6ICAgICAgICAgICBOTFAgYXJ0aWZhY3RzIHRvIHVzZQogICAgICAgIDpyZXR1cm5zOiAgICAgICAgICAgICAgICAgICAgICAgTGlzdCBvZiBQcmVzaWRpbyBSZWNvZ25pemVyUmVzdWx0IG9iamVjdHMKICAgICAgICAiIiIKICAgICAgICByZXN1bHRzID0gW10KICAgICAgICBpZiBub3QgbmxwX2FydGlmYWN0czoKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIlNraXBwaW5nIFNwYUN5LCBubHAgYXJ0aWZhY3RzIG5vdCBwcm92aWRlZC4uLiIpCiAgICAgICAgICAgIHJldHVybiByZXN1bHRzCgogICAgICAgIG5lcl9lbnRpdGllcyA9IG5scF9hcnRpZmFjdHMuZW50aXRpZXMKCiAgICAgICAgIyByZWNvZ25pemUgdGhlIHN1cHBvcnRlZCBlbnRpdGllcwogICAgICAgIGZvciBlbnRpdHkgaW4gZW50aXRpZXM6CiAgICAgICAgICAgIGlmIGVudGl0eSBub3QgaW4gc2VsZi5zdXBwb3J0ZWRfZW50aXRpZXM6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBmb3IgZW50IGluIG5lcl9lbnRpdGllczoKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9fY2hlY2tfbGFiZWwoZW50aXR5LCBlbnQubGFiZWxfLCBzZWxmLmNoZWNrX2xhYmVsX2dyb3Vwcyk6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgICAgICAjIHN0cmluZyBvZiB0aGUgZXhwbGFuYXRpb24gc2F5aW5nIHRoZSBlbnRpdHkgaXMgcmVjb2duaXplZCBieSBzcGFjeQogICAgICAgICAgICAgICAgdGV4dHVhbF9leHBsYW5hdGlvbiA9IHNlbGYuX0RFRkFVTFRfRVhQTEFOQVRJT04uZm9ybWF0KGVudC5sYWJlbF8pCiAgICAgICAgICAgICAgICBleHBsYW5hdGlvbiA9IHNlbGYuX2J1aWxkX3NwYWN5X2V4cGxhbmF0aW9uKAogICAgICAgICAgICAgICAgICAgIHNlbGYubmVyX3N0cmVuZ3RoLCB0ZXh0dWFsX2V4cGxhbmF0aW9uCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgIyBjcmVhdGUgdGhlIHN0YW5kYXJkIHJlc3VsdCB3aXRoIHRoZSBlbnRpdHksIHN0YXJ0LCBlbmQsIHNjb3JlLCBhbmQgZXhwbGFuYXRpb24KICAgICAgICAgICAgICAgIHNwYWN5X3Jlc3VsdCA9IHBhLlJlY29nbml6ZXJSZXN1bHQoCiAgICAgICAgICAgICAgICAgICAgZW50aXR5X3R5cGU9ZW50aXR5LAogICAgICAgICAgICAgICAgICAgIHN0YXJ0PWVudC5zdGFydF9jaGFyLAogICAgICAgICAgICAgICAgICAgIGVuZD1lbnQuZW5kX2NoYXIsCiAgICAgICAgICAgICAgICAgICAgc2NvcmU9c2VsZi5uZXJfc3RyZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgYW5hbHlzaXNfZXhwbGFuYXRpb249ZXhwbGFuYXRpb24sCiAgICAgICAgICAgICAgICAgICAgcmVjb2duaXRpb25fbWV0YWRhdGE9ewogICAgICAgICAgICAgICAgICAgICAgICBwYS5SZWNvZ25pemVyUmVzdWx0LlJFQ09HTklaRVJfTkFNRV9LRVk6IHNlbGYubmFtZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICByZXN1bHRzLmFwcGVuZChzcGFjeV9yZXN1bHQpCgogICAgICAgIHJldHVybiByZXN1bHRzCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9fY2hlY2tfbGFiZWwoCiAgICAgICAgZW50aXR5OiBzdHIsIGxhYmVsOiBzdHIsIGNoZWNrX2xhYmVsX2dyb3VwczogVHVwbGVbU2V0LCBTZXRdCiAgICApIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQ2hlY2sgaWYgdGhlIGxhYmVsIGlzIGluIHRoZSBsYWJlbCBncm91cC4KICAgICAgICA6cGFyYW0gZW50aXR5OiAgICAgICAgICAgICAgRW50aXR5IHRvIGNoZWNrCiAgICAgICAgOnBhcmFtIGxhYmVsOiAgICAgICAgICAgICAgIExhYmVsIHRvIGNoZWNrCiAgICAgICAgOnBhcmFtIGNoZWNrX2xhYmVsX2dyb3VwczogIExhYmVsIGdyb3VwcyB0byBjaGVjawoKICAgICAgICA6cmV0dXJuczogICAgICAgICAgIFRydWUgaWYgdGhlIGxhYmVsIGlzIGluIHRoZSBsYWJlbCBncm91cCwgRmFsc2Ugb3RoZXJ3aXNlCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGFueSgKICAgICAgICAgICAgZW50aXR5IGluIGVncnAgYW5kIGxhYmVsIGluIGxncnAgZm9yIGVncnAsIGxncnAgaW4gY2hlY2tfbGFiZWxfZ3JvdXBzCiAgICAgICAgKQoKCiMgQ2xhc3MgdG8gdXNlIEZsYWlyIHdpdGggUHJlc2lkaW8gYXMgYW4gZXh0ZXJuYWwgcmVjb2duaXplci4KY2xhc3MgRmxhaXJSZWNvZ25pemVyKHBhLkVudGl0eVJlY29nbml6ZXIpOgogICAgIiIiCiAgICBXcmFwcGVyIGZvciBhIGZsYWlyIG1vZGVsLCBpZiBuZWVkZWQgdG8gYmUgdXNlZCB3aXRoaW4gUHJlc2lkaW8gQW5hbHl6ZXIuCiAgICBUaGlzIGlzIHRvIG1ha2Ugc3VyZSB0aGUgcmVjb2duaXplciBjYW4gYmUgcmVnaXN0ZXJlZCB3aXRoIFByZXNpZGlvIHJlZ2lzdHJ5LgogICAgIiIiCgogICAgX0RFRkFVTFRfRU5USVRJRVMgPSBbCiAgICAgICAgIkxPQ0FUSU9OIiwKICAgICAgICAiUEVSU09OIiwKICAgICAgICAiTlJQIiwKICAgICAgICAiR1BFIiwKICAgICAgICAiT1JHQU5JWkFUSU9OIiwKICAgICAgICAiTUFDX0FERFJFU1MiLAogICAgICAgICJVU19CQU5LX05VTUJFUiIsCiAgICAgICAgIklNRUkiLAogICAgICAgICJUSVRMRSIsCiAgICAgICAgIkxJQ0VOU0VfUExBVEUiLAogICAgICAgICJVU19QQVNTUE9SVCIsCiAgICAgICAgIkNVUlJFTkNZIiwKICAgICAgICAiUk9VVElOR19OVU1CRVIiLAogICAgICAgICJVU19JVElOIiwKICAgICAgICAiVVNfQkFOS19OVU1CRVIiLAogICAgICAgICJVU19EUklWRVJfTElDRU5TRSIsCiAgICAgICAgIkFHRSIsCiAgICAgICAgIlBBU1NXT1JEIiwKICAgICAgICAiU1dJRlRfQ09ERSIsCiAgICBdCgogICAgIyBUaGlzIGlzIHVzZWQgdG8gY29uc3RydWN0IHRoZSBleHBsYW5hdGlvbiBmb3IgdGhlIHJlc3VsdAoKICAgIF9ERUZBVUxUX0VYUExBTkFUSU9OID0gIklkZW50aWZpZWQgYXMge30gYnkgRmxhaXIncyBOYW1lZCBFbnRpdHkgUmVjb2duaXRpb24iCgogICAgX0RFRkFVTFRfQ0hFQ0tfTEFCRUxfR1JPVVBTID0gWwogICAgICAgICh7IkxPQ0FUSU9OIn0sIHsiTE9DIiwgIkxPQ0FUSU9OIiwgIlNUUkVFVF9BRERSRVNTIiwgIkNPT1JESU5BVEUifSksCiAgICAgICAgKHsiUEVSU09OIn0sIHsiUEVSIiwgIlBFUlNPTiJ9KSwKICAgICAgICAoeyJOUlAifSwgeyJOT1JQIiwgIk5SUCJ9KSwKICAgICAgICAoeyJHUEUifSwgeyJHUEUifSksCiAgICAgICAgKHsiT1JHQU5JWkFUSU9OIn0sIHsiT1JHIn0pLAogICAgICAgICh7Ik1BQ19BRERSRVNTIn0sIHsiTUFDX0FERFJFU1MifSksCiAgICAgICAgKHsiVVNfQkFOS19OVU1CRVIifSwgeyJVU19CQU5LX05VTUJFUiJ9KSwKICAgICAgICAoeyJJTUVJIn0sIHsiSU1FSSJ9KSwKICAgICAgICAoeyJUSVRMRSJ9LCB7IlRJVExFIn0pLAogICAgICAgICh7IkxJQ0VOU0VfUExBVEUifSwgeyJMSUNFTlNFX1BMQVRFIn0pLAogICAgICAgICh7IlVTX1BBU1NQT1JUIn0sIHsiVVNfUEFTU1BPUlQifSksCiAgICAgICAgKHsiQ1VSUkVOQ1kifSwgeyJDVVJSRU5DWSJ9KSwKICAgICAgICAoeyJST1VUSU5HX05VTUJFUiJ9LCB7IlJPVVRJTkdfTlVNQkVSIn0pLAogICAgICAgICh7IkFHRSJ9LCB7IkFHRSJ9KSwKICAgICAgICAoeyJDVVJSRU5DWSJ9LCB7IkNVUlJFTkNZIn0pLAogICAgICAgICh7IlNXSUZUX0NPREUifSwgeyJTV0lGVF9DT0RFIn0pLAogICAgICAgICh7IlVTX0lUSU4ifSwgeyJVU19JVElOIn0pLAogICAgICAgICh7IlVTX0JBTktfTlVNQkVSIn0sIHsiVVNfQkFOS19OVU1CRVIifSksCiAgICAgICAgKHsiVVNfRFJJVkVSX0xJQ0VOU0UifSwgeyJVU19EUklWRVJfTElDRU5TRSJ9KSwKICAgIF0KCiAgICBfREVGQVVMVF9NT0RFTF9MQU5HVUFHRVMgPSB7CiAgICAgICAgImVuIjogImJla2kvZmxhaXItcGlpLWRpc3RpbGJlcnQiLAogICAgfQoKICAgIF9ERUZBVUxUX1BSRVNJRElPX0VRVUlWQUxFTkNFUyA9IHsKICAgICAgICAiUEVSIjogIlBFUlNPTiIsCiAgICAgICAgIkxPQyI6ICJMT0NBVElPTiIsCiAgICAgICAgIk9SRyI6ICJPUkdBTklaQVRJT04iLAogICAgICAgICJOUk9QIjogIk5SUCIsCiAgICAgICAgIlVSTCI6ICJVUkwiLAogICAgICAgICJVU19JVElOIjogIlVTX0lUSU4iLAogICAgICAgICJVU19QQVNTUE9SVCI6ICJVU19QQVNTUE9SVCIsCiAgICAgICAgIklCQU5fQ09ERSI6ICJJQkFOX0NPREUiLAogICAgICAgICJJUF9BRERSRVNTIjogIklQX0FERFJFU1MiLAogICAgICAgICJFTUFJTF9BRERSRVNTIjogIkVNQUlMIiwKICAgICAgICAiVVNfRFJJVkVSX0xJQ0VOU0UiOiAiVVNfRFJJVkVSX0xJQ0VOU0UiLAogICAgICAgICJVU19CQU5LX05VTUJFUiI6ICJVU19CQU5LX05VTUJFUiIsCiAgICB9CgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgc3VwcG9ydGVkX2xhbmd1YWdlOiBzdHIgPSAiZW4iLAogICAgICAgIHN1cHBvcnRlZF9lbnRpdGllczogTGlzdFtzdHJdID0gTm9uZSwKICAgICAgICBjaGVja19sYWJlbF9ncm91cHM6IFR1cGxlW1NldCwgU2V0XSA9IE5vbmUsCiAgICApOgogICAgICAgICIiIgogICAgICAgIEluaXRpYWxpemUgdGhlIEZsYWlyUmVjb2duaXplci4KICAgICAgICA6cGFyYW0gc3VwcG9ydGVkX2xhbmd1YWdlOiAgICAgIExhbmd1YWdlIHRvIHVzZQogICAgICAgIDpwYXJhbSBzdXBwb3J0ZWRfZW50aXRpZXM6ICAgICAgRW50aXRpZXMgdG8gdXNlCiAgICAgICAgOnBhcmFtIGNoZWNrX2xhYmVsX2dyb3VwczogICAgICBMYWJlbCBncm91cHMgdG8gY2hlY2sKCiAgICAgICAgOnJldHVybnM6ICAgICAgICAgICAgICAgICAgICAgICBGbGFpclJlY29nbml6ZXIgb2JqZWN0CgogICAgICAgICIiIgogICAgICAgIHNlbGYuY2hlY2tfbGFiZWxfZ3JvdXBzID0gY2hlY2tfbGFiZWxfZ3JvdXBzIG9yIHNlbGYuX0RFRkFVTFRfQ0hFQ0tfTEFCRUxfR1JPVVBTCgogICAgICAgIHN1cHBvcnRlZF9lbnRpdGllcyA9IHN1cHBvcnRlZF9lbnRpdGllcyBvciBzZWxmLl9ERUZBVUxUX0VOVElUSUVTCiAgICAgICAgc2VsZi5tb2RlbCA9IFNlcXVlbmNlVGFnZ2VyLmxvYWQoCiAgICAgICAgICAgIHNlbGYuX0RFRkFVTFRfTU9ERUxfTEFOR1VBR0VTLmdldChzdXBwb3J0ZWRfbGFuZ3VhZ2UpCiAgICAgICAgKQoKICAgICAgICBzdXBlcigpLl9faW5pdF9fKAogICAgICAgICAgICBzdXBwb3J0ZWRfZW50aXRpZXM9c3VwcG9ydGVkX2VudGl0aWVzLAogICAgICAgICAgICBzdXBwb3J0ZWRfbGFuZ3VhZ2U9c3VwcG9ydGVkX2xhbmd1YWdlLAogICAgICAgICAgICBuYW1lPSJGbGFpciBBbmFseXRpY3MiLAogICAgICAgICkKCiAgICAjIG1haW4gbWV0aG9kIGZvciB0aGUgcmVjb2duaXplcgogICAgZGVmIGFuYWx5emUoCiAgICAgICAgc2VsZiwKICAgICAgICB0ZXh0OiBzdHIsCiAgICAgICAgZW50aXRpZXM6IExpc3Rbc3RyXSwKICAgICAgICBubHBfYXJ0aWZhY3RzOiBwYS5ubHBfZW5naW5lLk5scEFydGlmYWN0cyA9IE5vbmUsCiAgICApIC0+IExpc3RbcGEuUmVjb2duaXplclJlc3VsdF06CiAgICAgICAgIiIiCiAgICAgICAgQW5hbHl6ZSB0ZXh0IGFuZCByZXR1cm4gdGhlIHJlc3VsdHMuCgogICAgICAgIDpwYXJhbSB0ZXh0OiAgICAgICAgICAgICAgICBUaGUgdGV4dCBmb3IgYW5hbHlzaXMuCiAgICAgICAgOnBhcmFtIGVudGl0aWVzOiAgICAgICAgICAgIFRoZSBsaXN0IG9mIGVudGl0aWVzIHRvIHJlY29nbml6ZS4KICAgICAgICA6cGFyYW0gbmxwX2FydGlmYWN0czogICAgICAgTm90IHVzZWQgYnkgdGhpcyByZWNvZ25pemVyIGJ1dCBuZWVkZWQgZm9yIHRoZSBpbnRlcmZhY2UuCiAgICAgICAgOnBhcmFtIGxhbmd1YWdlOiAgICAgICAgICAgIFRleHQgbGFuZ3VhZ2UuIFN1cHBvcnRlZCBsYW5ndWFnZXMgaW4gTU9ERUxfTEFOR1VBR0VTCgogICAgICAgIDpyZXR1cm5zOiAgICAgICAgICAgICAgICAgICBUaGUgbGlzdCBvZiBQcmVzaWRpbyBSZWNvZ25pemVyUmVzdWx0IGNvbnN0cnVjdGVkIGZyb20gdGhlIHJlY29nbml6ZWQgRmxhaXIgZGV0ZWN0aW9ucy4KICAgICAgICAiIiIKCiAgICAgICAgcmVzdWx0cyA9IFtdCgogICAgICAgIHNlbnRlbmNlcyA9IFNlbnRlbmNlKHRleHQpCiAgICAgICAgc2VsZi5tb2RlbC5wcmVkaWN0KHNlbnRlbmNlcykKCiAgICAgICAgIyBJZiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgbGlzdCBvZiBlbnRpdGllcywgd2Ugd2lsbCBsb29rIGZvciBhbGwgb2YgaXQuCiAgICAgICAgaWYgbm90IGVudGl0aWVzOgogICAgICAgICAgICBlbnRpdGllcyA9IHNlbGYuc3VwcG9ydGVkX2VudGl0aWVzCgogICAgICAgICMgR28gb3ZlciB0aGUgZW50aXRpZXMgYW5kIGNoZWNrIGlmIHRoZXkgYXJlIGluIHRoZSBzdXBwb3J0ZWQgZW50aXRpZXMgbGlzdC4KICAgICAgICBmb3IgZW50aXR5IGluIGVudGl0aWVzOgogICAgICAgICAgICBpZiBlbnRpdHkgbm90IGluIHNlbGYuc3VwcG9ydGVkX2VudGl0aWVzOgogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgICMgR28gb3ZlciB0aGUgc2VudGVuY2VzIGFuZCBjaGVjayBpZiB0aGUgZW50aXR5IGlzIGluIHRoZSBzZW50ZW5jZS4KICAgICAgICAgICAgZm9yIGVudCBpbiBzZW50ZW5jZXMuZ2V0X3NwYW5zKCJuZXIiKToKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9fY2hlY2tfbGFiZWwoCiAgICAgICAgICAgICAgICAgICAgZW50aXR5LCBlbnQubGFiZWxzWzBdLnZhbHVlLCBzZWxmLmNoZWNrX2xhYmVsX2dyb3VwcwogICAgICAgICAgICAgICAgKToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgICAgICMgSWYgdGhlIGVudGl0eSBpcyBpbiB0aGUgc2VudGVuY2UsIHdlIHdpbGwgYWRkIGl0IHRvIHRoZSByZXN1bHRzLgogICAgICAgICAgICAgICAgdGV4dHVhbF9leHBsYW5hdGlvbiA9IHNlbGYuX0RFRkFVTFRfRVhQTEFOQVRJT04uZm9ybWF0KAogICAgICAgICAgICAgICAgICAgIGVudC5sYWJlbHNbMF0udmFsdWUKICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAjIEJ1aWxkIHRoZSBleHBsYW5hdGlvbiBmb3IgdGhlIHJlc3VsdAogICAgICAgICAgICAgICAgZXhwbGFuYXRpb24gPSBzZWxmLl9idWlsZF9mbGFpcl9leHBsYW5hdGlvbigKICAgICAgICAgICAgICAgICAgICByb3VuZChlbnQuc2NvcmUsIDIpLCB0ZXh0dWFsX2V4cGxhbmF0aW9uCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgZmxhaXJfcmVzdWx0ID0gc2VsZi5fY29udmVydF90b19yZWNvZ25pemVyX3Jlc3VsdChlbnQsIGV4cGxhbmF0aW9uKQoKICAgICAgICAgICAgICAgIHJlc3VsdHMuYXBwZW5kKGZsYWlyX3Jlc3VsdCkKCiAgICAgICAgcmV0dXJuIHJlc3VsdHMKCiAgICBkZWYgX2NvbnZlcnRfdG9fcmVjb2duaXplcl9yZXN1bHQoCiAgICAgICAgc2VsZiwgZW50aXR5OiBTcGFuLCBleHBsYW5hdGlvbjogc3RyCiAgICApIC0+IHBhLlJlY29nbml6ZXJSZXN1bHQ6CiAgICAgICAgIiIiCiAgICAgICAgQ29udmVydCBGbGFpciByZXN1bHQgdG8gUHJlc2lkaW8gUmVjb2duaXplclJlc3VsdC4KICAgICAgICA6cGFyYW0gZW50aXR5OiAgICAgICAgICBGbGFpciBlbnRpdHkgb2YgU3BhbgogICAgICAgIDpwYXJhbSBleHBsYW5hdGlvbjogICAgIFByZXNpZGlvIEFuYWx5c2lzRXhwbGFuYXRpb24KCiAgICAgICAgOnJldHVybnM6ICAgICAgICAgICAgICAgUHJlc2lkaW8gUmVjb2duaXplclJlc3VsdAogICAgICAgICIiIgoKICAgICAgICAjIENvbnZlcnQgdGhlIGVudGl0eSB0eXBlIHRvIFByZXNpZGlvIGVudGl0eSB0eXBlCiAgICAgICAgZW50aXR5X3R5cGUgPSBzZWxmLl9ERUZBVUxUX1BSRVNJRElPX0VRVUlWQUxFTkNFUy5nZXQoZW50aXR5LnRhZywgZW50aXR5LnRhZykKCiAgICAgICAgIyBDb252ZXJ0IHRoZSBzY29yZSB0byBQcmVzaWRpbyBzY29yZQogICAgICAgIGZsYWlyX3Njb3JlID0gcm91bmQoZW50aXR5LnNjb3JlLCAyKQoKICAgICAgICAjIENyZWF0ZSB0aGUgUHJlc2lkaW8gUmVjb2duaXplclJlc3VsdCBmcm9tIHRoZSBGbGFpciBlbnRpdHkKICAgICAgICBmbGFpcl9yZXN1bHRzID0gcGEuUmVjb2duaXplclJlc3VsdCgKICAgICAgICAgICAgZW50aXR5X3R5cGU9ZW50aXR5X3R5cGUsCiAgICAgICAgICAgIHN0YXJ0PWVudGl0eS5zdGFydF9wb3NpdGlvbiwKICAgICAgICAgICAgZW5kPWVudGl0eS5lbmRfcG9zaXRpb24sCiAgICAgICAgICAgIHNjb3JlPWZsYWlyX3Njb3JlLAogICAgICAgICAgICBhbmFseXNpc19leHBsYW5hdGlvbj1leHBsYW5hdGlvbiwKICAgICAgICApCgogICAgICAgIHJldHVybiBmbGFpcl9yZXN1bHRzCgogICAgZGVmIF9idWlsZF9mbGFpcl9leHBsYW5hdGlvbigKICAgICAgICBzZWxmLCBvcmlnaW5hbF9zY29yZTogZmxvYXQsIGV4cGxhbmF0aW9uOiBzdHIKICAgICkgLT4gcGEuQW5hbHlzaXNFeHBsYW5hdGlvbjoKICAgICAgICAiIiIKICAgICAgICBDcmVhdGUgZXhwbGFuYXRpb24gZm9yIHdoeSB0aGlzIHJlc3VsdCB3YXMgZGV0ZWN0ZWQuCiAgICAgICAgOnBhcmFtIG9yaWdpbmFsX3Njb3JlOiAgICAgIFNjb3JlIGdpdmVuIGJ5IHRoaXMgcmVjb2duaXplcgogICAgICAgIDpwYXJhbSBleHBsYW5hdGlvbjogICAgICAgICBFeHBsYW5hdGlvbiBzdHJpbmcKCiAgICAgICAgOnJldHVybnM6ICAgICAgICAgICAgICAgICAgIFByZXNpZGlvIEFuYWx5c2lzRXhwbGFuYXRpb24KICAgICAgICAiIiIKCiAgICAgICAgIyBDcmVhdGUgdGhlIFByZXNpZGlvIEFuYWx5c2lzRXhwbGFuYXRpb24gZm9yIHRoZSByZXN1bHQKICAgICAgICBleHBsYW5hdGlvbiA9IHBhLkFuYWx5c2lzRXhwbGFuYXRpb24oCiAgICAgICAgICAgIHJlY29nbml6ZXI9c2VsZi5fX2NsYXNzX18uX19uYW1lX18sCiAgICAgICAgICAgIG9yaWdpbmFsX3Njb3JlPW9yaWdpbmFsX3Njb3JlLAogICAgICAgICAgICB0ZXh0dWFsX2V4cGxhbmF0aW9uPWV4cGxhbmF0aW9uLAogICAgICAgICkKICAgICAgICByZXR1cm4gZXhwbGFuYXRpb24KCiAgICAjIHNhbml0eSBjaGVjayBvZiB0aGUgZW50aXR5IGFuZCBsYWJlbCBiZWZvcmUgcmVjb2duaXRpb24KICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfX2NoZWNrX2xhYmVsKAogICAgICAgIGVudGl0eTogc3RyLCBsYWJlbDogc3RyLCBjaGVja19sYWJlbF9ncm91cHM6IFR1cGxlW1NldCwgU2V0XQogICAgKSAtPiBib29sOgogICAgICAgIHJldHVybiBhbnkoCiAgICAgICAgICAgIGVudGl0eSBpbiBlZ3JwIGFuZCBsYWJlbCBpbiBsZ3JwIGZvciBlZ3JwLCBsZ3JwIGluIGNoZWNrX2xhYmVsX2dyb3VwcwogICAgICAgICkKCgojIGdldCB0aGUgYW5hbHl6ZXIgZW5naW5lIGJhc2VkIG9uIHRoZSBtb2RlbApkZWYgX2dldF9hbmFseXplcl9lbmdpbmUobW9kZWw6IHN0ciA9ICJ3aG9sZSIpIC0+IHBhLkFuYWx5emVyRW5naW5lOgogICAgIiIiUmV0dXJuIHBhLkFuYWx5emVyRW5naW5lLgogICAgOnBhcmFtIG1vZGVsOiAgICAgICAgICAgVGhlIG1vZGVsIHRvIHVzZS4gQ2FuIGJlICJzcGFjeSIsICJmbGFpciIsICJwYXR0ZXJuIiBvciAid2hvbGUiLgogICAgOnJldHVybnM6ICAgICAgICAgICAgICAgcGEuQW5hbHl6ZXJFbmdpbmUKICAgICIiIgogICAgIyByZWNvZ25pemVyIHJlZ2lzdHJ5IHRoYXQgY2FuIHN0b3JlIG11bHRpcGxlIHJlY29nbml6ZXJzCiAgICByZWdpc3RyeSA9IHBhLlJlY29nbml6ZXJSZWdpc3RyeSgpCgogICAgaWYgbW9kZWwgPT0gInNwYWN5IjoKICAgICAgICAjIGN1c3RvbSBzcGFjeSByZWNvZ25pemVyCiAgICAgICAgc3BhY3lfcmVjb2duaXplciA9IEN1c3RvbVNwYWN5UmVjb2duaXplcigpCiAgICAgICAgIyBhZGQgdGhlIGN1c3RvbSBidWlsZCBzcGFjeSByZWNvZ25pemVyCiAgICAgICAgcmVnaXN0cnkuYWRkX3JlY29nbml6ZXIoc3BhY3lfcmVjb2duaXplcikKICAgIGlmIG1vZGVsID09ICJmbGFpciI6CiAgICAgICAgIyBwcmUtdHJhaW5lZCBmbGFpciByZWNvZ25pemVyCiAgICAgICAgZmxhaXJfcmVjb2duaXplciA9IEZsYWlyUmVjb2duaXplcigpCiAgICAgICAgIyBhZGQgdGhlIGN1c3RvbSBidWlsZCBmbGFpciByZWNvZ25pemVyCiAgICAgICAgcmVnaXN0cnkuYWRkX3JlY29nbml6ZXIoZmxhaXJfcmVjb2duaXplcikKICAgIGlmIG1vZGVsID09ICJwYXR0ZXJuIjoKICAgICAgICAjIGFkZCB0aGUgcGF0dGVybiByZWNvZ25pemVyCiAgICAgICAgcGF0dGVybl9yZWNvZ25pemVyX2ZhY3RvcnkgPSBQYXR0ZXJuUmVjb2duaXplckZhY3RvcnkoKQogICAgICAgIGZvciByZWNvZ25pemVyIGluIHBhdHRlcm5fcmVjb2duaXplcl9mYWN0b3J5Ll9jcmVhdGVfcGF0dGVybl9yZWNvZ25pemVyKCk6CiAgICAgICAgICAgIHJlZ2lzdHJ5LmFkZF9yZWNvZ25pemVyKHJlY29nbml6ZXIpCiAgICBpZiBtb2RlbCA9PSAid2hvbGUiOgogICAgICAgIHNwYWN5X3JlY29nbml6ZXIgPSBDdXN0b21TcGFjeVJlY29nbml6ZXIoKQogICAgICAgIGZsYWlyX3JlY29nbml6ZXIgPSBGbGFpclJlY29nbml6ZXIoKQogICAgICAgIHJlZ2lzdHJ5LmFkZF9yZWNvZ25pemVyKHNwYWN5X3JlY29nbml6ZXIpCiAgICAgICAgcmVnaXN0cnkuYWRkX3JlY29nbml6ZXIoZmxhaXJfcmVjb2duaXplcikKICAgICAgICAjIGFkZCB0aGUgcGF0dGVybiByZWNvZ25pemVyCiAgICAgICAgcGF0dGVybl9yZWNvZ25pemVyX2ZhY3RvcnkgPSBQYXR0ZXJuUmVjb2duaXplckZhY3RvcnkoKQogICAgICAgIGZvciByZWNvZ25pemVyIGluIHBhdHRlcm5fcmVjb2duaXplcl9mYWN0b3J5Ll9jcmVhdGVfcGF0dGVybl9yZWNvZ25pemVyKCk6CiAgICAgICAgICAgIHJlZ2lzdHJ5LmFkZF9yZWNvZ25pemVyKHJlY29nbml6ZXIpCgogICAgYW5hbHl6ZXIgPSBwYS5BbmFseXplckVuZ2luZShyZWdpc3RyeT1yZWdpc3RyeSwgc3VwcG9ydGVkX2xhbmd1YWdlcz1bImVuIl0pCiAgICByZXR1cm4gYW5hbHl6ZXIKCgpkZWYgX2dldF9hbm9ueW1pemVyX2VuZ2luZSgpIC0+IEFub255bWl6ZXJFbmdpbmU6CiAgICAiIiJSZXR1cm4gQW5vbnltaXplckVuZ2luZS4KICAgIDpyZXR1cm5zOiAgICAgICAgICAgICAgIFRoZSBBbm9ueW1pemVyRW5naW5lLgogICAgIiIiCiAgICByZXR1cm4gQW5vbnltaXplckVuZ2luZSgpCgoKZGVmIF9hbmFseXplKCoqa3dhcmdzKSAtPiBMaXN0W3BhLlJlY29nbml6ZXJSZXN1bHRdOgogICAgIiIiQW5hbHl6ZSBpbnB1dCB1c2luZyBBbmFseXplciBlbmdpbmUgYW5kIGlucHV0IGFyZ3VtZW50cyAoa3dhcmdzKS4KICAgIDpwYXJhbSBrd2FyZ3M6ICAgICAgICAgIFRoZSBpbnB1dCBhcmd1bWVudHMgZm9yIHRoZSBhbmFseXplciBlbmdpbmUuCgogICAgOnJldHVybnM6ICAgICAgICAgICAgICAgVGhlIGxpc3Qgb2YgUHJlc2lkaW8gUmVjb2duaXplclJlc3VsdCBjb25zdHJ1Y3RlZCBmcm9tIHRoZSByZWNvZ25pemVkCiAgICAiIiIKICAgIGlmICJlbnRpdGllcyIgbm90IGluIGt3YXJncyBvciAiQWxsIiBpbiBrd2FyZ3NbImVudGl0aWVzIl06CiAgICAgICAga3dhcmdzWyJlbnRpdGllcyJdID0gTm9uZQogICAgcmV0dXJuIGFuYWx5emVyX2VuZ2luZSgpLmFuYWx5emUoKiprd2FyZ3MpCgoKZGVmIF9hbm9ueW1pemUodGV4dDogc3RyLCBhbmFseXplX3Jlc3VsdHM6IExpc3RbcGEuUmVjb2duaXplclJlc3VsdF0pIC0+IHN0cjoKICAgICIiIkFub255bWl6ZSBpZGVudGlmaWVkIGlucHV0IHVzaW5nIFByZXNpZGlvIEFib255bWl6ZXIuCiAgICA6cGFyYW0gdGV4dDogICAgICAgICAgICAgICAgVGhlIHRleHQgZm9yIGFuYWx5c2lzLgogICAgOnBhcmFtIGFuYWx5emVfcmVzdWx0czogICAgIFRoZSBsaXN0IG9mIFByZXNpZGlvIFJlY29nbml6ZXJSZXN1bHQgY29uc3RydWN0ZWQgZnJvbQoKICAgIDpyZXR1cm5zOiAgICAgICAgICAgICAgICAgICBUaGUgYW5vbnltaXplZCB0ZXh0LgogICAgIiIiCiAgICBpZiBub3QgdGV4dDoKICAgICAgICByZXR1cm4KICAgIHJlcyA9IF9nZXRfYW5vbnltaXplcl9lbmdpbmUoKS5hbm9ueW1pemUodGV4dCwgYW5hbHl6ZV9yZXN1bHRzKQogICAgcmV0dXJuIHJlcy50ZXh0CgoKZGVmIF9hbm5vdGF0ZSh0ZXh0OiBzdHIsIHN0X2FuYWx5emVfcmVzdWx0czogTGlzdFtwYS5SZWNvZ25pemVyUmVzdWx0XSkgLT4gTGlzdFtzdHJdOgogICAgIiIiQW5ub3RhdGUgaWRlbnRpZmllZCBpbnB1dCB1c2luZyBQcmVzaWRpbyBBbm9ueW1pemVyLgogICAgOnBhcmFtIHRleHQ6ICAgICAgICAgICAgICAgIFRoZSB0ZXh0IGZvciBhbmFseXNpcy4KICAgIDpwYXJhbSBzdF9hbmFseXplX3Jlc3VsdHM6ICBUaGUgbGlzdCBvZiBQcmVzaWRpbyBSZWNvZ25pemVyUmVzdWx0IGNvbnN0cnVjdGVkIGZyb20gYW5hbHlzaXMuCgogICAgOnJldHVybnM6ICAgICAgICAgICAgICAgICAgIFRoZSBsaXN0IG9mIHRva2VucyB3aXRoIHRoZSBpZGVudGlmaWVkIGVudGl0aWVzLgoKICAgICIiIgogICAgdG9rZW5zID0gW10KICAgICMgc29ydCBieSBzdGFydCBpbmRleAogICAgcmVzdWx0cyA9IHNvcnRlZChzdF9hbmFseXplX3Jlc3VsdHMsIGtleT1sYW1iZGEgeDogeC5zdGFydCkKICAgIGZvciBpLCByZXMgaW4gZW51bWVyYXRlKHJlc3VsdHMpOgogICAgICAgIGlmIGkgPT0gMDoKICAgICAgICAgICAgdG9rZW5zLmFwcGVuZCh0ZXh0WzogcmVzLnN0YXJ0XSkKCiAgICAgICAgIyBhcHBlbmQgZW50aXR5IHRleHQgYW5kIGVudGl0eSB0eXBlCiAgICAgICAgdG9rZW5zLmFwcGVuZCgodGV4dFtyZXMuc3RhcnQgOiByZXMuZW5kXSwgcmVzLmVudGl0eV90eXBlKSkKCiAgICAgICAgIyBpZiBhbm90aGVyIGVudGl0eSBjb21pbmcgaS5lLiB3ZSdyZSBub3QgYXQgdGhlIGxhc3QgcmVzdWx0cyBlbGVtZW50LAogICAgICAgICMgYWRkIHRleHQgdXAgdG8gbmV4dCBlbnRpdHkKICAgICAgICBpZiBpICE9IGxlbihyZXN1bHRzKSAtIDE6CiAgICAgICAgICAgIHRva2Vucy5hcHBlbmQodGV4dFtyZXMuZW5kIDogcmVzdWx0c1tpICsgMV0uc3RhcnRdKQogICAgICAgICMgaWYgbm8gbW9yZSBlbnRpdGllcyBjb21pbmcsIGFkZCBhbGwgcmVtYWluaW5nIHRleHQKICAgICAgICBlbHNlOgogICAgICAgICAgICB0b2tlbnMuYXBwZW5kKHRleHRbcmVzLmVuZCA6XSkKICAgIHJldHVybiB0b2tlbnMKCgpkZWYgX3Byb2Nlc3ModGV4dDogc3RyLCBtb2RlbDogcGEuQW5hbHl6ZXJFbmdpbmUpOgogICAgIiIiCiAgICBQcm9jZXNzIHRoZSB0ZXh0IG9mIHN0ciB1c2luZyB0aGUgbW9kZWwuCiAgICA6cGFyYW0gdHh0OiAgICAgICAgICAgICAgICAgVGV4dCB0byBwcm9jZXNzCiAgICA6cGFyYW0gbW9kZWw6ICAgICAgICAgICAgICAgTW9kZWwgdG8gdXNlIGZvciBwcm9jZXNzaW5nCgogICAgOnJldHVybnM6ICBBIHR1cGxlIG9mOgoKICAgICAgICAgICAgICAgKiB0aGUgYW5vbnltaXplZCB0ZXh0CiAgICAgICAgICAgICAgICogdGhlIGh0bWwgc3RyaW5nIHdpdGggZW50aXRpZXMgaGlnaGxpZ2h0ZWQKICAgICAgICAgICAgICAgKiB0aGUgc3RhdHMgcmVwb3J0CiAgICAiIiIKCiAgICAjIGdldCB0aGUgYW5hbHl6ZXIgZW5naW5lCgogICAgYW5hbHl6ZXIgPSBtb2RlbAoKICAgICMgYW5hbHl6ZSB0aGUgdGV4dCB0aGF0IGNhbiBiZSB1c2VkIGZvciBhbm9ueW1pemF0aW9uCiAgICByZXN1bHRzID0gYW5hbHl6ZXIuYW5hbHl6ZSgKICAgICAgICB0ZXh0PXRleHQsCiAgICAgICAgbGFuZ3VhZ2U9ImVuIiwKICAgICAgICBlbnRpdGllcz1hbmFseXplci5nZXRfc3VwcG9ydGVkX2VudGl0aWVzKCksCiAgICAgICAgcmV0dXJuX2RlY2lzaW9uX3Byb2Nlc3M9VHJ1ZSwKICAgICkKCiAgICAjIGFub255bWl6ZSB0aGUgdGV4dCwgcmVwbGFjZSB0aGUgcGlpIGVudGl0aWVzIHdpdGggdGhlIGxhYmVscwogICAgYW5vbnltaXplZF90ZXh0ID0gX2Fub255bWl6ZSh0ZXh0LCByZXN1bHRzKQoKICAgICMgY29udmVydCB0aGUgcmVzdWx0cyB0byB0b2tlbnMgdG8gZ2VuZXJhdGUgdGhlIGh0bWwKICAgIGFubm90YXRlZF90b2tlbnMgPSBfYW5ub3RhdGUodGV4dCwgcmVzdWx0cykKCiAgICAjIGdlbmVyYXRlIHRoZSBodG1sIHdpdGggZGlmZmVyZW50IGNvbG9ycyBmb3IgZWFjaCBlbnRpdHkKICAgIGh0bWwgPSBnZXRfYW5ub3RhdGVkX2h0bWwoKmFubm90YXRlZF90b2tlbnMpCgogICAgIyBhdm9pZCB0aGUgZXJyb3IgZHVyaW5nIHJlbmRlcmluZyBvZiB0aGUgXG4gaW4gdGhlIGh0bWwKICAgIGJhY2tzbGFzaF9jaGFyID0gIlxcIgoKICAgIGh0bWxfc3RyID0gZiI8cD57aHRtbC5yZXBsYWNlKCd7YmFja3NsYXNoX2NoYXJ9bicsICc8YnI+Jyl9PC9wPiIKCiAgICBzdGF0cyA9IHJlc3VsdHMKCiAgICByZXR1cm4gYW5vbnltaXplZF90ZXh0LCBodG1sX3N0ciwgc3RhdHMKCgpkZWYgcmVjb2duaXplX3BpaSgKICAgIGNvbnRleHQ6IG1scnVuLk1MQ2xpZW50Q3R4LAogICAgaW5wdXRfcGF0aDogc3RyLAogICAgb3V0cHV0X3BhdGg6IHN0ciwKICAgIG91dHB1dF9zdWZmaXg6IHN0ciwKICAgIGh0bWxfa2V5OiBzdHIsCiAgICBtb2RlbDogc3RyID0gIndob2xlIiwKKSAtPiBUdXBsZVtwYXRobGliLlBhdGgsIGRpY3QsIGRpY3RdOgogICAgIiIiCiAgICBXYWxrIHRocm91Z2ggdGhlIGlucHV0IHBhdGgsIHJlY29nbml6ZSBQSUkgaW4gdGV4dCBhbmQgc3RvcmUgdGhlIGFub255bWl6ZWQgdGV4dCBpbiB0aGUgb3V0cHV0IHBhdGguIEdlbmVyYXRlIHRoZSBodG1sIHdpdGggZGlmZmVyZW50IGNvbG9ycyBmb3IgZWFjaCBlbnRpdHksIGpzb24gcmVwb3J0IG9mIHRoZSBleHBsYWluYXRpb24uCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgICAgIFRoZSBNTFJ1biBjb250ZXh0LiB0aGlzIGlzIG5lZWRlZCBmb3IgbG9nIHRoZSBhcnRpZmFjdHMuCiAgICA6cGFyYW0gaW5wdXRfcGF0aDogICAgICAgICAgVGhlIGlucHV0IHBhdGggb2YgdGhlIHRleHQgZmlsZXMgbmVlZHMgdG8gYmUgYW5hbHl6aWVkLgogICAgOnBhcmFtIG91dHB1dF9wYXRoOiAgICAgICAgIFRoZSBvdXRwdXQgcGF0aCB0byBzdG9yZSB0aGUgYW5vbnltaXplZCB0ZXh0LgogICAgOnBhcmFtIG91dHB1dF9zdWZmaXg6ICAgICAgIFRoZSBzdXJmaXggb2Ygb3V0cHV0IGtleSBmb3IgdGhlIGFub255bWl6ZWQgdGV4dC4gZm9yIGV4YW1wbGUgaWYgdGhlIGlucHV0IGZpbGUgaXMgcGlpLnR4dCwgdGhlIG91dHB1dCBrZXkgaXMgYW5veW1pemVkLCB0aGUgb3V0cHV0IGZpbGUgbmFtZSB3aWxsIGJlIHBpaV9hbm9ueW1pemVkLnR4dC4KICAgIDpwYXJhbSBodG1sX2tleTogICAgICAgICAgICBUaGUgaHRtbCBrZXkgZm9yIHRoZSBhcnRpZmFjdC4KICAgIDpwYXJhbSBtb2RlbDogICAgICAgICAgICAgICBUaGUgbW9kZWwgdG8gdXNlLiBDYW4gYmUgInNwYWN5IiwgImZsYWlyIiwgInBhdHRlcm4iIG9yICJ3aG9sZSIuCiAgICA6cmV0dXJuczogIEEgdHVwbGUgb2Y6CiAgICAgICAgICAgICAgICogUGF0aCB0byB0aGUgb3V0cHV0IGRpcmVjdG9yeQogICAgICAgICAgICAgICAqIFRoZSBqc29uIHJlcG9ydCBvZiB0aGUgZXhwbGFpbmF0aW9uCiAgICAgICAgICAgICAgICogQSBkaWN0aW9uYXJ5IG9mIGVycm9ycyBmaWxlcyB0aGF0IHdlcmUgbm90IHByb2Nlc3NlZAoKICAgICIiIgoKICAgICMgU2V0IG91dHB1dCBkaXJlY3RvcnkKICAgIGlmIG91dHB1dF9wYXRoIGlzIE5vbmU6CiAgICAgICAgb3V0cHV0X3BhdGggPSB0ZW1wZmlsZS5ta2R0ZW1wKCkKCiAgICAjIENyZWF0ZSB0aGUgb3V0cHV0IGRpcmVjdG9yeToKICAgIG91dHB1dF9kaXJlY3RvcnkgPSBwYXRobGliLlBhdGgob3V0cHV0X3BhdGgpCiAgICBpZiBub3Qgb3V0cHV0X2RpcmVjdG9yeS5leGlzdHMoKToKICAgICAgICBvdXRwdXRfZGlyZWN0b3J5Lm1rZGlyKCkKCiAgICAjIExvYWQgdGhlIG1vZGVsOgogICAgYW5hbHl6ZXIgPSBfZ2V0X2FuYWx5emVyX2VuZ2luZShtb2RlbCkKICAgIHByaW50KCJNb2RlbCBsb2FkZWQiKQoKICAgICMgR28gb3ZlciB0aGUgdGV4dCBmaWxlcyBpbiB0aGUgaW5wdXQgcGF0aCwgYW5hbHl6ZSBhbmQgYW5vbnltaXplIHRoZW06CiAgICB0eHRfZmlsZXNfZGlyZWN0b3J5ID0gcGF0aGxpYi5QYXRoKGlucHV0X3BhdGgpCiAgICAjIFRoZXNlIGFyZSBwbGFjZWhvbGRlciBmb3IgdGhlIGh0bWwgc3RyaW5nIGFuZCB0aGUgc3RhdHMgcmVwb3J0CiAgICBodG1sX2luZGV4ID0gIjxodG1sPjxoZWFkPjx0aXRsZT5IaWdobGlnaHRlZCBQaWkgRW50aXRpZXM8L3RpdGxlPjwvaGVhZD48Ym9keT48aDE+SGlnaGxpZ2h0ZWQgUGlpIEVudGl0aWVzPC9oMT48dWw+IgogICAgaHRtbF9jb250ZW50ID0gIiIKICAgIHJwdF9qc29uID0ge30KICAgIGVycm9ycyA9IHt9CgogICAgIyBHbyBvdmVyIHRoZSB0ZXh0IGZpbGVzIGluIHRoZSBpbnB1dCBwYXRoLCBhbmFseXplIGFuZCBhbm9ueW1pemUgdGhlbToKICAgIGZvciBpLCB0eHRfZmlsZSBpbiBlbnVtZXJhdGUoCiAgICAgICAgdHFkbSgKICAgICAgICAgICAgbGlzdCh0eHRfZmlsZXNfZGlyZWN0b3J5Lmdsb2IoIioudHh0IikpLAogICAgICAgICAgICBkZXNjPSJQcm9jZXNzaW5nIGZpbGVzIiwKICAgICAgICAgICAgdW5pdD0iZmlsZSIsCiAgICAgICAgKQogICAgKToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTG9hZCB0aGUgc3RyIGZyb20gdGhlIHRleHQgZmlsZQogICAgICAgICAgICB0ZXh0ID0gdHh0X2ZpbGUucmVhZF90ZXh0KCkKICAgICAgICAgICAgIyBQcm9jZXNzIHRoZSB0ZXh0IHRvIHJlY29naW56ZSB0aGUgcGlpIGVudGl0aWVzIGluIGl0CiAgICAgICAgICAgIGFub255bWl6ZWRfdGV4dCwgaHRtbF9zdHIsIHN0YXRzID0gX3Byb2Nlc3ModGV4dCwgYW5hbHl6ZXIpCiAgICAgICAgICAgICMgQWRkIHRoZSBpbmRleCBhdCB0aGUgdG9wIG9mIHRoZSBodG1sCiAgICAgICAgICAgIGh0bWxfaW5kZXggKz0gZic8bGk+PGEgaHJlZj0iI3tzdHIodHh0X2ZpbGUpfSI+e3N0cih0eHRfZmlsZSl9PC9hPjwvbGk+JwogICAgICAgICAgICAjIEFkZCB0aGUgaGlnaHRsaWdodGVkIGh0bWwgdG8gdGhlIGh0bWwgY29udGVudAogICAgICAgICAgICBodG1sX2NvbnRlbnQgKz0gZic8aDIgaWQ9IntzdHIodHh0X2ZpbGUpfSI+e3N0cih0eHRfZmlsZSl9PC9oMj57aHRtbF9zdHJ9JwoKICAgICAgICAgICAgIyBTdG9yZSB0aGUgYW5vbnltaXplZCB0ZXh0IGluIHRoZSBvdXRwdXQgcGF0aAogICAgICAgICAgICBvdXRwdXRfZmlsZSA9ICgKICAgICAgICAgICAgICAgIG91dHB1dF9kaXJlY3RvcnkKICAgICAgICAgICAgICAgIC8gZiJ7c3RyKHR4dF9maWxlLnJlbGF0aXZlX3RvKHR4dF9maWxlc19kaXJlY3RvcnkpKS5zcGxpdCgnLicpWzBdfV97b3V0cHV0X3N1ZmZpeH0udHh0IgogICAgICAgICAgICApCgogICAgICAgICAgICBvdXRwdXRfZmlsZS5wYXJlbnQubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQogICAgICAgICAgICB3aXRoIG9wZW4ob3V0cHV0X2ZpbGUsICJ3IikgYXMgZjoKICAgICAgICAgICAgICAgIGYud3JpdGUoYW5vbnltaXplZF90ZXh0KQoKICAgICAgICAgICAgIyBQbGFjZWhvbGRlciBmb3IgdGhlIGpzb24gcmVwb3J0IGZvciBhIHNpbmdsZSBmaWxlCiAgICAgICAgICAgIG5ld19zdGF0cyA9IFtdCiAgICAgICAgICAgIGZvciBpdGVtIGluIHN0YXRzOgogICAgICAgICAgICAgICAgaXRlbS5hbmFseXNpc19leHBsYW5hdGlvbiA9IGl0ZW0uYW5hbHlzaXNfZXhwbGFuYXRpb24udG9fZGljdCgpCiAgICAgICAgICAgICAgICBuZXdfc3RhdHMuYXBwZW5kKGl0ZW0udG9fZGljdCgpKQoKICAgICAgICAgICAgIyBBZGQgdGhlIGpzb24gcmVwb3J0IHRvIHRoZSBqc29uIHJlcG9ydCBkaWN0IHdpdGggZmlsZW5hbWUgYXMga2V5CiAgICAgICAgICAgIHJwdF9qc29uW3N0cih0eHRfZmlsZSldID0gbmV3X3N0YXRzCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBlcnJvcnNbc3RyKHR4dF9maWxlKV0gPSBzdHIoZSkKICAgICAgICAgICAgcHJpbnQoZiJFcnJvciBwcm9jZXNzaW5nIHt0eHRfZmlsZX06IHtlfSIpCgogICAgaHRtbF9pbmRleCArPSAiPC91bD4iCiAgICBodG1sX3JlcyA9IGYie2h0bWxfaW5kZXh9e2h0bWxfY29udGVudH08L2JvZHk+PC9odG1sPiIKICAgIGFydGlfaHRtbCA9IG1scnVuLmFydGlmYWN0cy5BcnRpZmFjdChib2R5PWh0bWxfcmVzLCBmb3JtYXQ9Imh0bWwiLCBrZXk9aHRtbF9rZXkpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChhcnRpX2h0bWwpCiAgICByZXR1cm4gb3V0cHV0X3BhdGgsIHJwdF9qc29uLCBlcnJvcnMK
    base_image: mlrun/mlrun
    commands: []
    code_origin: git@github.com-personal:pengwei715/functions.git#64a654de189cb728fe97a7e534fd391c22cd9c4e:pii_recognizer.py
    origin_filename: pii_recognizer.py
    requirements:
    - mlrun==1.4.0-rc19
    - pandas
    - presidio-anonymizer
    - presidio-analyzer
    - torch
    - flair@git+https://github.com/flairNLP/flair.git@d4ed67bf663e4066517f00397412510d90043653
    - st-annotated-text
    - https://huggingface.co/beki/en_spacy_pii_distilbert/resolve/main/en_spacy_pii_distilbert-any-py3-none-any.whl
  entry_points:
    analyze:
      name: analyze
      doc: Analyze text and return the results.
      parameters:
      - name: self
        default: ''
      - name: text
        type: str
        doc: The text for analysis.
        default: ''
      - name: entities
        type: List[str]
        doc: The list of entities to recognize.
        default: ''
      - name: nlp_artifacts
        type: pa.nlp_engine.NlpArtifacts
        doc: Not used by this recognizer but needed for the interface.
        default: null
      outputs:
      - default: ''
        doc: The list of Presidio RecognizerResult constructed from the recognized
          Flair detections.
      lineno: 334
    recognize_pii:
      name: recognize_pii
      doc: Walk through the input path, recognize PII in text and store the anonymized
        text in the output path. Generate the html with different colors for each
        entity, json report of the explaination.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun context. this is needed for log the artifacts.
        default: ''
      - name: input_path
        type: str
        doc: The input path of the text files needs to be analyzied.
        default: ''
      - name: output_path
        type: str
        doc: The output path to store the anonymized text.
        default: ''
      - name: output_suffix
        type: str
        doc: The surfix of output key for the anonymized text. for example if the
          input file is pii.txt, the output key is anoymized, the output file name
          will be pii_anonymized.txt.
        default: ''
      - name: html_key
        type: str
        doc: The html key for the artifact.
        default: ''
      - name: model
        type: str
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: whole
      outputs:
      - default: ''
        doc: 'A tuple of: * Path to the output directory * The json report of the
          explaination * A dictionary of errors files that were not processed'
      lineno: 586
  description: This function is used to recognize PII in a given text
  default_handler: recognize_pii
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
