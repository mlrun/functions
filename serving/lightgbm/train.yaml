kind: job
metadata:
  name: lgbm-job
spec:
  description: 'train an LGBMClassifier'
  build:
    functionSourceCode: 
    base_image: python:3.6-jessie
    commands:
    - rm /conda/lib/python3.6/site-packages/seaborn* -rf
    - pip uninstall -y mlrun
    - pip install -U -q mlrun
    - pip install -U -q kfp
    - pip install -U -q pyarrow
    - pip install -U -q pandas
    - pip install -U -q matplotlib
    - pip install -U -q seaborn
    - pip install -U -q scikit-learn
    - pip install -U -q lightgbm
