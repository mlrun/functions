kind: job
metadata:
  name: test-classifier
  tag: ''
  hash: 6f18e5ad127467d6e4e94e7771a426928c876b2d
  project: ''
  labels:
    author: yjb
    framework: sklearn
  categories:
  - ml
  - test
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: test_classifier
  entry_points:
    test_classifier:
      name: test_classifier
      doc: "Test one or more classifier models against held-out dataset\n\nUsing held-out\
        \ test features, evaluates the peformance of the estimated model\n\nCan be\
        \ part of a kubeflow pipeline as a test step that is run post EDA and \ntraining/validation\
        \ cycles"
      parameters:
      - name: context
        doc: the function context
      - name: models_path
        type: DataItem
        doc: artifact models representing a file or a folder
      - name: test_set
        type: DataItem
        doc: test features and labels
      - name: label_column
        type: str
        doc: column name for ground truth labels
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: plots_dest
        type: str
        doc: dir for test plots
      - name: model_evaluator
        doc: 'NOT IMPLEMENTED: specific method to generate eval, passed in as string
          or available in this folder'
      outputs: []
      lineno: 67
  description: test a classifier using held-out or new data
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlciBvbiAyMDIwLTA1LTAyIDAwOjM4CgppbXBvcnQgd2FybmluZ3MKd2FybmluZ3Muc2ltcGxlZmlsdGVyKGFjdGlvbj0iaWdub3JlIiwgY2F0ZWdvcnk9RnV0dXJlV2FybmluZykKCmRlZiBfZXZhbF9tb2RlbChjb250ZXh0LCB4dGVzdCwgeXRlc3QsIG1vZGVsLCBzY29yZV9tZXRob2Q9Im1pY3JvIiwgcGxvdHNfZGVzdD0iIik6CiAgICAiIiJpbnRlcm5hbCBldmFsdWF0ZSBvbmUgbW9kZWwKICAgICIiIgogICAgZnJvbSBza2xlYXJuIGltcG9ydCBtZXRyaWNzCiAgICBmcm9tIGNsb3VkcGlja2xlIGltcG9ydCBsb2FkCiAgICBpbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CiAgICBmcm9tIHNrbGVhcm4ucHJlcHJvY2Vzc2luZyBpbXBvcnQgbGFiZWxfYmluYXJpemUKICAgIGZyb20gc2tsZWFybi51dGlscy5tdWx0aWNsYXNzIGltcG9ydCB1bmlxdWVfbGFiZWxzCiAgICBmcm9tIG1scnVuLmFydGlmYWN0cyBpbXBvcnQgUGxvdEFydGlmYWN0CiAgICBmcm9tIG1scnVuLm1sdXRpbHMgaW1wb3J0IHBsb3Rfcm9jLCBwbG90X2ltcG9ydGFuY2UsIGdjZl9jbGVhcgoKICAgIHl0ZXN0YiA9IGxhYmVsX2JpbmFyaXplKHl0ZXN0LCBjbGFzc2VzPXl0ZXN0LnVuaXF1ZSgpKQogICAgCiAgICBjb250ZXh0LmhlYWRlciA9IHh0ZXN0LmNvbHVtbnMubmFtZXMKICAgIAogICAgY2xmID0gbG9hZChvcGVuKG1vZGVsLCAicmIiKSkKICAgIGlmIGNhbGxhYmxlKGdldGF0dHIoY2xmLCAicHJlZGljdF9wcm9iYSIpKToKICAgICAgICB5X3Njb3JlID0gY2xmLnByZWRpY3RfcHJvYmEoeHRlc3QudmFsdWVzKQogICAgICAgIHlwcmVkID0gY2xmLnByZWRpY3QoeHRlc3QudmFsdWVzKQogICAgICAgIHBsb3Rfcm9jKGNvbnRleHQsIHl0ZXN0YiwgeV9zY29yZSwga2V5PSdyb2MnLCBwbG90c19kaXI9cGxvdHNfZGVzdCkKICAgIGVsc2U6CiAgICAgICAgeXByZWQgPSBjbGYucHJlZGljdCh4dGVzdC52YWx1ZXMpICMgcmVmYWN0b3IKICAgICAgICB5X3Njb3JlID0gTm9uZQoKICAgIGdjZl9jbGVhcihwbHQpCiAgICBtZXRyaWNzLnBsb3RfY29uZnVzaW9uX21hdHJpeChjbGYsIHh0ZXN0LnZhbHVlcywgeXRlc3QsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxzPXl0ZXN0LnVuaXF1ZSgpLCBub3JtYWxpemU9J3RydWUnKSAKCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChQbG90QXJ0aWZhY3QoImNvbmZ1c2lvbiIsIGJvZHk9cGx0LmdjZigpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbF9wYXRoPWYie3Bsb3RzX2Rlc3R9L3ttb2RlbC5zcGxpdCgnLicpWy0yXX0tY29uZnVzaW9uLmh0bWwiKSAgICAgICAgCgogICAgaWYgaGFzYXR0cihjbGYsICJmZWF0dXJlX2ltcG9ydGFuY2VzXyIpOgogICAgICAgIHBsb3RfaW1wb3J0YW5jZShjb250ZXh0LCBjbGYsIGtleT1mImZlYXRpbXAiKQoKICAgIHl0ZXN0YiA9IGxhYmVsX2JpbmFyaXplKHl0ZXN0LCBjbGFzc2VzPXl0ZXN0LnVuaXF1ZSgpKQoKICAgIGlmIHl0ZXN0Yi5zaGFwZVsxXSA+IDE6CiAgICAgICAgYXZlcmFnZV9wcmVjaXNpb24gPSBtZXRyaWNzLmF2ZXJhZ2VfcHJlY2lzaW9uX3Njb3JlKHl0ZXN0YiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeV9zY29yZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpCiAgICAgICAgY29udGV4dC5sb2dfcmVzdWx0KGYicm9jYXVjIiwgbWV0cmljcy5yb2NfYXVjX3Njb3JlKHl0ZXN0YiwgeV9zY29yZSkpCiAgICBlbHNlOgogICAgICAgIGF2ZXJhZ2VfcHJlY2lzaW9uID0gbWV0cmljcy5hdmVyYWdlX3ByZWNpc2lvbl9zY29yZSh5dGVzdGIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlfc2NvcmVbOiwgMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKQogICAgICAgIGNvbnRleHQubG9nX3Jlc3VsdChmInJvY2F1YyIsIG1ldHJpY3Mucm9jX2F1Y19zY29yZSh5dGVzdGIsIHlfc2NvcmVbOiwgMV0pKQoKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImF2Z19wcmVjc2NvcmUiLCBhdmVyYWdlX3ByZWNpc2lvbikKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImFjY3VyYWN5IiwgZmxvYXQoY2xmLnNjb3JlKHh0ZXN0LnZhbHVlcywgeXRlc3QpKSkKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImYxX3Njb3JlIiwgbWV0cmljcy5mMV9zY29yZSh5dGVzdCwgeXByZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpKQogICAgaWYgeV9zY29yZSBpcyBOb25lOgogICAgICAgIHJldHVybiB5X3Njb3JlCiAgICBlbHNlOgogICAgICAgIHJldHVybiB5cHJlZAoKaW1wb3J0IG9zCmltcG9ydCBwYW5kYXMgYXMgcGQKZnJvbSBtbHJ1bi5kYXRhc3RvcmUgaW1wb3J0IERhdGFJdGVtCmZyb20gbWxydW4uYXJ0aWZhY3RzIGltcG9ydCBnZXRfbW9kZWwKCmRlZiB0ZXN0X2NsYXNzaWZpZXIoCiAgICBjb250ZXh0LAogICAgbW9kZWxzX3BhdGg6IERhdGFJdGVtLCAKICAgIHRlc3Rfc2V0OiBEYXRhSXRlbSwKICAgIGxhYmVsX2NvbHVtbjogc3RyLAogICAgc2NvcmVfbWV0aG9kOiBzdHIgPSAnbWljcm8nLAogICAgcGxvdHNfZGVzdDogc3RyID0gIiIsCiAgICBtb2RlbF9ldmFsdWF0b3IgPSBOb25lCikgLT4gTm9uZToKICAgICIiIlRlc3Qgb25lIG9yIG1vcmUgY2xhc3NpZmllciBtb2RlbHMgYWdhaW5zdCBoZWxkLW91dCBkYXRhc2V0CiAgICAKICAgIFVzaW5nIGhlbGQtb3V0IHRlc3QgZmVhdHVyZXMsIGV2YWx1YXRlcyB0aGUgcGVmb3JtYW5jZSBvZiB0aGUgZXN0aW1hdGVkIG1vZGVsCiAgICAKICAgIENhbiBiZSBwYXJ0IG9mIGEga3ViZWZsb3cgcGlwZWxpbmUgYXMgYSB0ZXN0IHN0ZXAgdGhhdCBpcyBydW4gcG9zdCBFREEgYW5kIAogICAgdHJhaW5pbmcvdmFsaWRhdGlvbiBjeWNsZXMKICAgIAogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgdGhlIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBtb2RlbHNfcGF0aDogICAgIGFydGlmYWN0IG1vZGVscyByZXByZXNlbnRpbmcgYSBmaWxlIG9yIGEgZm9sZGVyCiAgICA6cGFyYW0gdGVzdF9zZXQ6ICAgICAgICB0ZXN0IGZlYXR1cmVzIGFuZCBsYWJlbHMKICAgIDpwYXJhbSBsYWJlbF9jb2x1bW46ICAgIGNvbHVtbiBuYW1lIGZvciBncm91bmQgdHJ1dGggbGFiZWxzCiAgICA6cGFyYW0gc2NvcmVfbWV0aG9kOiAgICBmb3IgbXVsdGljbGFzcyBjbGFzc2lmaWNhdGlvbgogICAgOnBhcmFtIHBsb3RzX2Rlc3Q6ICAgICAgZGlyIGZvciB0ZXN0IHBsb3RzCiAgICA6cGFyYW0gbW9kZWxfZXZhbHVhdG9yOiBOT1QgSU1QTEVNRU5URUQ6IHNwZWNpZmljIG1ldGhvZCB0byBnZW5lcmF0ZSBldmFsLCBwYXNzZWQgaW4gYXMgc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhdmFpbGFibGUgaW4gdGhpcyBmb2xkZXIKICAgICIiIgogICAgeHRlc3QgPSB0ZXN0X3NldC5hc19kZigpCiAgICB5dGVzdCA9IHh0ZXN0LnBvcChsYWJlbF9jb2x1bW4pCiAgICAKICAgIG1vZGVsX2ZpbGUsIG1vZGVsX29iaiwgXyA9IGdldF9tb2RlbChtb2RlbHNfcGF0aC51cmwsIHN1ZmZpeD0nLnBrbCcpCiAgICBwcmludChtb2RlbF9vYmopCiAgICAKICAgIGlmIG5vdCBtb2RlbF9ldmFsdWF0b3I6CiAgICAgICAgeV9oYXQgPSBfZXZhbF9tb2RlbChjb250ZXh0LCB4dGVzdCwgeXRlc3QsIG1vZGVsX2ZpbGUsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVfbWV0aG9kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxvdHNfZGVzdCBvciAncGxvdHMnKQogICAgZWxpZiBtb2RlbF9ldmFsdWF0b3IgaXMgIm11dGxpY2xhc3MiOgogICAgICAgIHBhc3MKICAgIGVsaWYgbW9kZWxfZXZhbHVhdG9yIGlzICJyZWdyZXNzaW9uIjoKICAgICAgICBwYXNzCgogICAgaWYgeV9oYXQubmRpbSA9PSAxIG9yIHlfaGF0LnNoYXBlWzFdID09IDE6CiAgICAgICAgc2NvcmVfbmFtZXMgPSBbInlzY29yZSJdCiAgICBlbHNlOgogICAgICAgIHNjb3JlX25hbWVzID0gWyJ5c2NvcmVfIiArIHN0cih4KSBmb3IgeCBpbiByYW5nZSh5X2hhdC5zaGFwZVsxXSldCgogICAgZGYgPSBwZC5jb25jYXQoW3h0ZXN0LCB5dGVzdCwgcGQuRGF0YUZyYW1lKHlfaGF0LCBjb2x1bW5zPXNjb3JlX25hbWVzKV0sIGF4aXM9MSkKICAgIGNvbnRleHQubG9nX2RhdGFzZXQoInRlc3Rfc2V0X3ByZWRzIiwgZGY9ZGYsIGZvcm1hdD0icGFycXVldCIsIGluZGV4PUZhbHNlKQoK
    commands: []
    code_origin: https://github.com/mlrun/functions.git#bbbecd6c98bbd1d26db3101b61f4181ffd19263e:test_classifier.ipynb
