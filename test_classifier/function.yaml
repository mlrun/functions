kind: job
metadata:
  name: test-classifier
  tag: ''
  hash: 5395f891d486ec09b283b208b9efcd450f8fe915
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - test
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.6
  env: []
  default_handler: test_classifier
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: /User/functions/test_classifier/function.yaml
