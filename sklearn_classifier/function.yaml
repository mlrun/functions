kind: job
metadata:
  name: sklearn-classifier
  tag: latest
  hash: 6e25f3c83408bb865010527940f801024447a633
  project: ''
  labels:
    author: yjb
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: train a classifier.
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: model_pkg_class
        type: str
        doc: the model to train, e.g, "sklearn.neural_networks.MLPClassifier",  or
          json model config
      - name: data_key
        type: str
        doc: ("data") name of raw data file
        default: data
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7fba442f6910>
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: labels
      - name: model_key
        type: str
        doc: ("model") name of model in artifact store, points to a directory
        default: model
      - name: test_size
        type: float
        doc: (0.05) test set size
        default: 0.05
      - name: train_val_split
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: test_set_key
        type: str
        doc: store the test data set under this key in the artifact store
        default: test_set
      - name: rng
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: models_dir
        type: str
        doc: models subfolder on artifact path
        default: models
      - name: plots_dir
        type: str
        doc: plot subfolder on artifact path
        default: plots
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: model_pkg_file
        type: str
        doc: json model config file
      outputs: []
      lineno: 29
    plot_roc:
      name: plot_roc
      doc: "plot roc curves\n\nTODO:  add averaging method (as string) that was used\
        \ to create probs, \ndisplay in legend"
      parameters:
      - name: context
        doc: the function context
      - name: y_labels
        doc: 'ground truth labels, hot encoded for multiclass  '
      - name: y_probs
        doc: model prediction probabilities
      - name: key
        doc: ("roc") key of plot in artifact store
        default: roc
      - name: plots_dir
        type: str
        doc: ("plots") destination folder relative path to artifact path
        default: plots
      - name: fmt
        doc: ("png") plot format
        default: png
      - name: fpr_label
        type: str
        doc: ("false positive rate") x-axis labels
        default: false positive rate
      - name: tpr_label
        type: str
        doc: ("true positive rate") y-axis labels
        default: true positive rate
      - name: title
        type: str
        doc: ("roc curve") title of plot
        default: roc curve
      - name: legend_loc
        type: str
        doc: ("best") location of plot legend
        default: best
      outputs: []
      lineno: 150
    plot_confusion_matrix:
      name: plot_confusion_matrix
      doc: 'Create a confusion matrix.

        Plot and save a confusion matrix using test data from a

        modelline step.


        See https://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html


        TODO: fix label alignment

        TODO: consider using another packaged version

        TODO: refactor to take params dict for plot options'
      parameters:
      - name: context
        type: MLClientCtx
        doc: function context
      - name: labels
        doc: validation data ground-truth labels
      - name: predictions
        doc: validation data predictions
      - name: key
        type: str
        doc: str
        default: confusion_matrix
      - name: plots_dir
        type: str
        doc: relative path of plots in artifact store
        default: plots
      - name: colormap
        type: str
        doc: colourmap for confusion matrix
        default: Blues
      - name: fmt
        type: str
        doc: plot format
        default: png
      - name: sample_weight
        doc: sample weights
      outputs: []
      lineno: 203
    _gcf_clear:
      name: _gcf_clear
      doc: 'Utility to clear matplotlib figure


        Run this inside every plot method before calling any matplotlib

        methods'
      parameters:
      - name: plt
      outputs: []
      lineno: 242
  description: train any classifier using scikit-learn's API
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#ba606c2476caf7c351cc0330687329bb83573dfd:sklearn_classifier.ipynb
