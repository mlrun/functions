kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: fee9114a8b0dc29435f9629288caa50a8de6d95c
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#b0ba922e10fa0af2fcf2e04cce51eb7d9243bf25:sklearn_classifier/sklearn_classifier.py
