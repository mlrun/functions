kind: job
metadata:
  name: text-to-audio-generator
  tag: ''
  hash: 534e34d316098dcb345860a786ea013102150e67
  project: ''
  labels:
    author: yonatans
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - bark
    - torchaudio
  entry_points:
    generate_multi_speakers_audio:
      name: generate_multi_speakers_audio
      doc: Generate audio files from text files.
      parameters:
      - name: data_path
        type: str
        doc: Path to the text file or directory containing the text files to generate
          audio from.
      - name: speakers
        type: Union[List[str], Dict[str, int]]
        doc: List / Dict of speakers to generate audio for. If a list is given, the
          speakers will be assigned to channels in the order given. If dictionary,
          the keys will be the speakers and the values will be the channels.
      - name: available_voices
        type: List[str]
        doc: 'List of available voices to use for the generation. See here for the
          available voices: https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c'
      - name: output_directory
        type: str
        doc: Path to the directory to save the generated audio files to.
        default: null
      - name: use_gpu
        type: bool
        doc: Whether to use the GPU for the generation.
        default: true
      - name: use_small_models
        type: bool
        doc: Whether to use the small models for the generation.
        default: false
      - name: offload_cpu
        type: bool
        doc: To reduce the memory footprint, the models can be offloaded to the CPU
          after loading.
        default: false
      - name: sample_rate
        type: int
        doc: The sampling rate of the generated audio.
        default: 16000
      - name: file_format
        type: str
        doc: The format of the generated audio files.
        default: wav
      - name: verbose
        type: bool
        doc: Whether to print the progress of the generation.
        default: true
      - name: bits_per_sample
        type: Optional[int]
        doc: Changes the bit depth for the supported formats. Supported only in "wav"
          or "flac" formats.
        default: null
      outputs:
      - doc: 'A tuple of: - The output directory path. - The generated audio files
          dataframe. - The errors dictionary.'
        type: Tuple[str, pd.DataFrame, dict]
      lineno: 31
      has_varargs: false
      has_kwargs: false
  description: Generate audio file from text using different speakers
  default_handler: generate_multi_speakers_audio
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
