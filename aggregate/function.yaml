kind: job
metadata:
  name: aggregate
  tag: ''
  hash: 98f21b117cf94b0366094578daaf05391f427adb
  project: ''
  labels:
    author: orz
  categories:
  - data-prep
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: aggregate
  entry_points:
    aggregate:
      name: aggregate
      doc: "Time-series aggregation function\n\nWill perform a rolling aggregation\
        \ on {df_artifact}, over {window} by the selected {keys}\napplying {metric_aggs}\
        \ on {metrics} and {label_aggs} on {labels}. adding {suffix} to the \nfeature\
        \ names.\n\nif not {inplace}, will return the original {df_artifact}, joined\
        \ by the aggregated result."
      parameters:
      - name: context
      - name: df_artifact
        type: DataItem
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path)
      - name: save_to
        type: str
        doc: Where to save the result dataframe. * If relative will add to the {artifact_path}
        default: aggregated-df.pq
      - name: keys
        type: list
        doc: Subset of indexes from the source dataframe to aggregate by (default=all)
      - name: metrics
        type: list
        doc: 'Array containing a list of metrics to run the aggregations on. (default=None) '
      - name: labels
        type: list
        doc: 'Array containing a list of labels to run the aggregations on. (default=None) '
      - name: metric_aggs
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''mean'', ''std'') (default=''mean'')'
        default:
        - mean
      - name: label_aggs
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''max'', ''min'') (default=''max'') '
        default:
        - max
      - name: suffix
        type: str
        doc: 'Suffix to add to the feature name, E.g: <Feature_Name>_<Agg_Function>_<Suffix>
          (Ex: ''last_60_mintes'') (default='''')'
      - name: window
        type: int
        doc: Window size to perform the rolling aggregate on. (default=3)
        default: 3
      - name: center
        type: bool
        doc: If True, Sets the value for the central sample in the window, If False,
          will set the value to the last sample. (default=False)
      - name: inplace
        type: bool
        doc: If True, will return only the aggregated results. If False, will join
          the aggregated results with the original dataframe
      outputs: []
      lineno: 7
  description: Rolling aggregation over Metrics and Lables according to specifications
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlciBvbiAyMDIwLTA1LTA0IDE0OjE0CgppbXBvcnQgb3MKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIG1scnVuLmRhdGFzdG9yZSBpbXBvcnQgRGF0YUl0ZW0KCmRlZiBhZ2dyZWdhdGUoY29udGV4dCwKICAgICAgICAgICAgICBkZl9hcnRpZmFjdDogRGF0YUl0ZW0sCiAgICAgICAgICAgICAgc2F2ZV90bzogc3RyID0gJ2FnZ3JlZ2F0ZWQtZGYucHEnLCAKICAgICAgICAgICAgICBrZXlzOiBsaXN0ID0gTm9uZSwgCiAgICAgICAgICAgICAgbWV0cmljczogbGlzdCA9IE5vbmUsIAogICAgICAgICAgICAgIGxhYmVsczogbGlzdCA9IE5vbmUsIAogICAgICAgICAgICAgIG1ldHJpY19hZ2dzOiBsaXN0ID0gWydtZWFuJ10sIAogICAgICAgICAgICAgIGxhYmVsX2FnZ3M6IGxpc3QgPSBbJ21heCddLCAKICAgICAgICAgICAgICBzdWZmaXg6IHN0ciA9ICcnLCAKICAgICAgICAgICAgICB3aW5kb3c6IGludCA9IDMsIAogICAgICAgICAgICAgIGNlbnRlcjogYm9vbCA9IEZhbHNlLCAKICAgICAgICAgICAgICBpbnBsYWNlOiBib29sID0gRmFsc2UpOgogICAgIiIiVGltZS1zZXJpZXMgYWdncmVnYXRpb24gZnVuY3Rpb24KICAgIAogICAgV2lsbCBwZXJmb3JtIGEgcm9sbGluZyBhZ2dyZWdhdGlvbiBvbiB7ZGZfYXJ0aWZhY3R9LCBvdmVyIHt3aW5kb3d9IGJ5IHRoZSBzZWxlY3RlZCB7a2V5c30KICAgIGFwcGx5aW5nIHttZXRyaWNfYWdnc30gb24ge21ldHJpY3N9IGFuZCB7bGFiZWxfYWdnc30gb24ge2xhYmVsc30uIGFkZGluZyB7c3VmZml4fSB0byB0aGUgCiAgICBmZWF0dXJlIG5hbWVzLgogICAgCiAgICBpZiBub3Qge2lucGxhY2V9LCB3aWxsIHJldHVybiB0aGUgb3JpZ2luYWwge2RmX2FydGlmYWN0fSwgam9pbmVkIGJ5IHRoZSBhZ2dyZWdhdGVkIHJlc3VsdC4KICAgIAogICAgOnBhcmFtIGRmX2FydGlmYWN0OiBNTFJ1biBpbnB1dCBwb2ludGluZyB0byBwYW5kYXMgZGF0YWZyYW1lIChjc3YvcGFycXVldCBmaWxlIHBhdGgpCiAgICA6cGFyYW0gc2F2ZV90bzogICAgIFdoZXJlIHRvIHNhdmUgdGhlIHJlc3VsdCBkYXRhZnJhbWUuCiAgICAgICAgICAgICAgICAgICAgICAgICogSWYgcmVsYXRpdmUgd2lsbCBhZGQgdG8gdGhlIHthcnRpZmFjdF9wYXRofQogICAgOnBhcmFtIGtleXM6ICAgICAgICBTdWJzZXQgb2YgaW5kZXhlcyBmcm9tIHRoZSBzb3VyY2UgZGF0YWZyYW1lIHRvIGFnZ3JlZ2F0ZSBieSAoZGVmYXVsdD1hbGwpCiAgICA6cGFyYW0gbWV0cmljczogICAgIEFycmF5IGNvbnRhaW5pbmcgYSBsaXN0IG9mIG1ldHJpY3MgdG8gcnVuIHRoZSBhZ2dyZWdhdGlvbnMgb24uIChkZWZhdWx0PU5vbmUpIAogICAgOnBhcmFtIGxhYmVsczogICAgICBBcnJheSBjb250YWluaW5nIGEgbGlzdCBvZiBsYWJlbHMgdG8gcnVuIHRoZSBhZ2dyZWdhdGlvbnMgb24uIChkZWZhdWx0PU5vbmUpIAogICAgOnBhcmFtIG1ldHJpY19hZ2dzOiBBcnJheSBjb250YWluaW5nIGEgbGlzdCBvZiBhZ2dyZWdhdGlvbiBmdW5jdGlvbiBuYW1lcyB0byBydW4gb24ge21ldHJpY3N9LgogICAgICAgICAgICAgICAgICAgICAgICAoRXg6ICdtZWFuJywgJ3N0ZCcpIChkZWZhdWx0PSdtZWFuJykKICAgIDpwYXJhbSBsYWJlbF9hZ2dzOiAgQXJyYXkgY29udGFpbmluZyBhIGxpc3Qgb2YgYWdncmVnYXRpb24gZnVuY3Rpb24gbmFtZXMgdG8gcnVuIG9uIHttZXRyaWNzfS4KICAgICAgICAgICAgICAgICAgICAgICAgKEV4OiAnbWF4JywgJ21pbicpIChkZWZhdWx0PSdtYXgnKSAKICAgIDpwYXJhbSBzdWZmaXg6ICAgICAgU3VmZml4IHRvIGFkZCB0byB0aGUgZmVhdHVyZSBuYW1lLCBFLmc6IDxGZWF0dXJlX05hbWU+XzxBZ2dfRnVuY3Rpb24+XzxTdWZmaXg+CiAgICAgICAgICAgICAgICAgICAgICAgIChFeDogJ2xhc3RfNjBfbWludGVzJykgKGRlZmF1bHQ9JycpCiAgICA6cGFyYW0gd2luZG93OiAgICAgIFdpbmRvdyBzaXplIHRvIHBlcmZvcm0gdGhlIHJvbGxpbmcgYWdncmVnYXRlIG9uLiAoZGVmYXVsdD0zKQogICAgOnBhcmFtIGNlbnRlcjogICAgICBJZiBUcnVlLCBTZXRzIHRoZSB2YWx1ZSBmb3IgdGhlIGNlbnRyYWwgc2FtcGxlIGluIHRoZSB3aW5kb3csCiAgICAgICAgICAgICAgICAgICAgICAgIElmIEZhbHNlLCB3aWxsIHNldCB0aGUgdmFsdWUgdG8gdGhlIGxhc3Qgc2FtcGxlLiAoZGVmYXVsdD1GYWxzZSkKICAgIDpwYXJhbSBpbnBsYWNlOiAgICAgSWYgVHJ1ZSwgd2lsbCByZXR1cm4gb25seSB0aGUgYWdncmVnYXRlZCByZXN1bHRzLgogICAgICAgICAgICAgICAgICAgICAgICBJZiBGYWxzZSwgd2lsbCBqb2luIHRoZSBhZ2dyZWdhdGVkIHJlc3VsdHMgd2l0aCB0aGUgb3JpZ2luYWwgZGF0YWZyYW1lCiAgICAiIiIKICAgIAogICAgCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYnQWdncmVnYXRpbmcge2RmX2FydGlmYWN0LnVybH0nKQogICAgaW5wdXRfZGYgPSBkZl9hcnRpZmFjdC5hc19kZigpCiAgICAKICAgIGlmIG5vdCAobWV0cmljcyBvciBsYWJlbHMpOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3BsZWFzZSBzcGVjaWZ5IG1ldHJpY3Mgb3IgbGFiZWxzIHBhcmFtJykKICAgIAogICAgaWYga2V5czoKICAgICAgICBjdXJyZW50X2luZGV4ID0gaW5wdXRfZGYuaW5kZXgubmFtZXMKICAgICAgICBpbmRleGVzX3RvX2Ryb3AgPSBbY29sIGZvciBjb2wgaW4gaW5wdXRfZGYuaW5kZXgubmFtZXMgaWYgY29sIG5vdCBpbiBrZXlzXQogICAgICAgIGRmID0gaW5wdXRfZGYucmVzZXRfaW5kZXgobGV2ZWw9aW5kZXhlc190b19kcm9wKQogICAgZWxzZToKICAgICAgICBkZiA9IGlucHV0X2RmCiAgICAKICAgIGlmIG1ldHJpY3M6CiAgICAgICAgbWV0cmljc19kZiA9IGRmLmxvY1s6LCBtZXRyaWNzXS5yb2xsaW5nKHdpbmRvdz13aW5kb3csCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcj1jZW50ZXIpLmFnZ3JlZ2F0ZShtZXRyaWNfYWdncykKICAgICAgICAKICAgICAgICBtZXRyaWNzX2RmLmNvbHVtbnMgPSBbJ18nLmpvaW4oY29sKS5zdHJpcCgpIGZvciBjb2wgaW4gbWV0cmljc19kZi5jb2x1bW5zLnZhbHVlc10KICAgICAgICAKICAgICAgICBpZiBzdWZmaXg6CiAgICAgICAgICAgIG1ldHJpY3NfZGYuY29sdW1ucyA9IFtmJ3ttZXRyaWN9X3tzdWZmaXh9JyBmb3IgbWV0cmljIGluIG1ldHJpY3NfZGYuY29sdW1uc10KICAgICAgICAgICAgCiAgICAgICAgaWYgbm90IGlucGxhY2U6CiAgICAgICAgICAgIGZpbmFsX2RmID0gcGQubWVyZ2UoaW5wdXRfZGYsIG1ldHJpY3NfZGYsIHN1ZmZpeGVzPSgnJywgc3VmZml4KSwgbGVmdF9pbmRleD1UcnVlLCByaWdodF9pbmRleD1UcnVlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGZpbmFsX2RmID0gbWV0cmljc19kZgoKICAgIGlmIGxhYmVsczoKICAgICAgICBsYWJlbHNfZGYgPSBkZi5sb2NbOiwgbGFiZWxzXS5yb2xsaW5nKHdpbmRvdz13aW5kb3csCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI9Y2VudGVyKS5hZ2dyZWdhdGUobGFiZWxfYWdncykKICAgICAgICBsYWJlbHNfZGYuY29sdW1ucyA9IFsnXycuam9pbihjb2wpLnN0cmlwKCkgZm9yIGNvbCBpbiBsYWJlbHNfZGYuY29sdW1ucy52YWx1ZXNdCiAgICAgICAgCiAgICAgICAgaWYgc3VmZml4OgogICAgICAgICAgICBsYWJlbHNfZGYuY29sdW1ucyA9IFtmJ3tsYWJlbH1fe3N1ZmZpeH0nIGZvciBsYWJlbCBpbiBsYWJlbHNfZGYuY29sdW1uc10KICAgICAgICAgICAgCiAgICAgICAgaWYgbWV0cmljczoKICAgICAgICAgICAgZmluYWxfZGYgPSBwZC5tZXJnZShmaW5hbF9kZiwgbGFiZWxzX2RmLCBzdWZmaXhlcz0oJycsIHN1ZmZpeCksIGxlZnRfaW5kZXg9VHJ1ZSwgcmlnaHRfaW5kZXg9VHJ1ZSkgICAKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3QgaW5wbGFjZToKICAgICAgICAgICAgICAgIGZpbmFsX2RmID0gcGQubWVyZ2UoaW5wdXRfZGYsIGxhYmVsc19kZiwgc3VmZml4ZXM9KCcnLCBzdWZmaXgpLCBsZWZ0X2luZGV4PVRydWUsIHJpZ2h0X2luZGV4PVRydWUpICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBmaW5hbF9kZiA9IGxhYmVsc19kZgogICAgICAgIAogICAgY29udGV4dC5sb2dfZGF0YXNldChrZXk9J2FnZ3JlZ2F0ZScsIAogICAgICAgICAgICAgICAgICAgICAgICBkZj1maW5hbF9kZiwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0ncGFycXVldCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsX3BhdGg9c2F2ZV90bykKCg==
    commands: []
    code_origin: https://github.com/mlrun/functions#de8eaee500fa17c44cf2172adb7140053a20836a:aggregate.ipynb
