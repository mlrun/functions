kind: job
metadata:
  name: aggregate
  tag: ''
  hash: b6bcbcfef5863538fe52cf231b0750def23cf616
  project: ''
  labels:
    author: avia
  categories:
  - data-preparation
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/yonishelach/functions.git#fcf13c174ffc86d9edb4f02fd91a11dc308806d6:/Users/Yonatan_Shelach/projects/functions/aggregate/aggregate.py
    origin_filename: /Users/Yonatan_Shelach/projects/functions/aggregate/aggregate.py
    requirements: []
  entry_points:
    aggregate:
      name: aggregate
      doc: 'Time-series aggregation function


        Will perform a rolling aggregation on {df_artifact}, over {window} by the
        selected {keys}

        applying {metric_aggregations} on {metrics} and {label_aggregations} on {labels}.
        adding {suffix} to the

        feature names.


        if not {inplace}, will return the original {df_artifact}, joined by the aggregated
        result.'
      parameters:
      - name: context
        doc: After running a job, you need to be able to track it. To gain the maximum
          value, MLRun uses the job context object inside the code. This provides
          access to job metadata, parameters, inputs, secrets, and API for logging
          and monitoring the results, as well as log text, files, artifacts, and labels.
        default: ''
      - name: df_artifact
        type: Union[DataItem, pd.core.frame.DataFrame]
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path) or a  directory
          containing parquet files. * When given a directory the latest {files_to_select}
          will be selected
        default: ''
      - name: save_to
        type: str
        doc: Where to save the result dataframe. * If relative will add to the {artifact_path}
        default: aggregated-df.pq
      - name: keys
        type: list
        doc: Subset of indexes from the source dataframe to aggregate by (default=all)
        default: null
      - name: metrics
        type: list
        doc: 'Array containing a list of metrics to run the aggregations on. (default=None) '
        default: null
      - name: labels
        type: list
        doc: 'Array containing a list of labels to run the aggregations on. (default=None) '
        default: null
      - name: metric_aggregations
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''mean'', ''std'') (default=''mean'')'
        default:
        - mean
      - name: label_aggregations
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''max'', ''min'') (default=''max'') '
        default:
        - max
      - name: suffix
        type: str
        doc: 'Suffix to add to the feature name, E.g: <Feature_Name>_<Agg_Function>_<Suffix>
          (Ex: ''last_60_minutes'') (default='''')'
        default: ''
      - name: window
        type: int
        doc: Window size to perform the rolling aggregate on. (default=3)
        default: 3
      - name: center
        type: bool
        doc: If True, Sets the value for the central sample in the window, If False,
          will set the value to the last sample. (default=False)
        default: false
      - name: inplace
        type: bool
        doc: If True, will return only the aggregated results. If False, will join
          the aggregated results with the original dataframe
        default: false
      - name: drop_na
        type: bool
        doc: Will drop na lines due to the Rolling.
        default: true
      - name: files_to_select
        type: int
        doc: Specifies the number of *latest* files to select (and concat) for aggregation.
        default: 1
      outputs:
      - default: ''
      lineno: 24
  description: Rolling aggregation over Metrics and Lables according to specifications
  default_handler: aggregate
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
