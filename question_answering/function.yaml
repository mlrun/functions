kind: job
metadata:
  name: question-answering
  tag: ''
  hash: 90e67d116b256a98da7d5819724e43df01d8b4eb
  project: ''
  labels:
    author: yonish
  categories:
  - machine-learning
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - transformers
    - torch
    - tqdm
  entry_points:
    open_mpi_handler:
      name: open_mpi_handler
      doc: ''
      parameters:
      - name: worker_inputs
        type: List[str]
      - name: root_worker_inputs
        type: Dict[str, Any]
        default: null
      outputs: []
      lineno: 58
      has_varargs: false
      has_kwargs: false
    decorator:
      name: decorator
      doc: ''
      parameters:
      - name: handler
      outputs: []
      lineno: 66
      has_varargs: false
      has_kwargs: false
    wrapper:
      name: wrapper
      doc: ''
      parameters: []
      outputs: []
      lineno: 71
      has_varargs: false
      has_kwargs: true
    answer_questions:
      name: answer_questions
      doc: 'Answer questions with a context to the given text files contents by a
        pretrained LLM model. Each text file will have

        the following prompt built:


        start of `text_wrapper`

        <text file content>

        end of `text_wrapper`


        start of `questions_wrapper`

        1. <questions[0]>

        2. <questions[1]>

        ...

        n. <questions[n-1]>

        end of `questions_wrapper`'
      parameters:
      - name: data_path
        type: Union[str, List[str]]
        doc: A path to a directory of text files or a path to a text file to ask questions
          about.
      - name: model_name
        type: str
        doc: The pre-trained model name from the huggingface hub to use for asking
          questions.
      - name: questions
        type: Union[List[str], List[List[str]]]
        doc: The questions to ask. A list of lists of questions to ask per text file,
          and devided by question groups, the groups can be dtermained by size (in
          order to avoid large inputs to the llm) or by questioning method (regular
          or poll like questioning).
      - name: device_map
        type: Union[str, dict]
        doc: A map to use for loading the model on multiple devices.
        default: null
      - name: model_kwargs
        type: dict
        doc: Keyword arguments to pass for loading the model using HuggingFace's `transformers.AutoModelForCausalLM.from_pretrained`
          function.
        default: null
      - name: auto_gptq_exllama_max_input_length
        type: int
        doc: For AutoGPTQ models to set and extend the model's input buffer size.
        default: null
      - name: tokenizer_name
        type: str
        doc: The tokenizer name from the huggingface hub to use. If not given, the
          model name will be used.
        default: null
      - name: tokenizer_kwargs
        type: dict
        doc: Keyword arguments to pass for loading the tokenizer using HuggingFace's
          `transformers.AutoTokenizer.from_pretrained` function.
        default: null
      - name: text_wrapper
        type: Union[str, List[str]]
        doc: A wrapper for the file's text. Will be added at the start of the prompt.
          Must have a placeholder ('{}') for the text of the file.
        default: ''
      - name: questions_wrapper
        type: Union[str, List[str]]
        doc: A wrapper for the questions received. Will be added after the text wrapper
          in the prompt template. Must have a placeholder ('{}') for the questions.
        default: ''
      - name: generation_config
        type: Union[Dict, List[Dict]]
        doc: HuggingFace's `GenerationConfig` keyword arguments to pass to the `generate`
          method.
        default: null
      - name: questions_config
        type: Union[Dict, List[Dict]]
        doc: A dictionary or list of dictionaries containing specific ways to answer
          questions (using a poll for example), each dictionary in the list is for
          corresponding question group and determines the question asking method for
          said group.
        default: null
      - name: batch_size
        type: int
        doc: Batch size for inference.
        default: 1
      - name: questions_columns
        type: List[str]
        doc: Columns to use for the dataframe returned.
        default: null
      - name: verbose
        type: bool
        doc: 'Whether to present logs of a progress bar and errors. Default: True.'
        default: false
      outputs:
      - doc: 'A tuple of:'
        type: Tuple[pd.DataFrame, dict]
      lineno: 130
      has_varargs: false
      has_kwargs: false
    answer:
      name: answer
      doc: Answer questions with a context to the given text files contents by a pretrained
        LLM model in given pipeline.
      parameters:
      - name: self
      - name: questions_amount
        type: int
      - name: batched_input
        type: List[str]
      - name: generation_pipeline
        type: Pipeline
      - name: generation_config
        type: GenerationConfig
      outputs:
      - type: List[List[str]]
      lineno: 674
      has_varargs: false
      has_kwargs: false
    most_common:
      name: most_common
      doc: Calculate the most common answer for a given list of answers.
      parameters:
      - name: answers
      outputs: []
      lineno: 637
      has_varargs: false
      has_kwargs: false
    average:
      name: average
      doc: Calculate the average answer for a given list of answers.
      parameters:
      - name: answers
      outputs: []
      lineno: 646
      has_varargs: false
      has_kwargs: false
    do:
      name: do
      doc: Perform the strategy.
      parameters:
      - name: self
      - name: answers
      outputs: []
      lineno: 662
      has_varargs: false
      has_kwargs: false
  description: GenAI approach of question answering on a given data
  default_handler: answer_questions
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
