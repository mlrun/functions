kind: job
metadata:
  name: sklearn-classifier
  tag: latest
  hash: 070ba76a56162fab21932f30dbd53e445fe1e921
  project: ''
  labels:
    author: yjb
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.6
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: train a classifier.
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: model_pkg_class
        type: str
        doc: the model to train, e.g, "sklearn.neural_networks.MLPClassifier",  or
          json model config
      - name: data_key
        type: str
        doc: ("data") name of raw data file
        default: data
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7f04d2e42dd0>
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: labels
      - name: model_key
        type: str
        doc: ("model") name of model in artifact store, points to a directory
        default: model
      - name: test_size
        type: float
        doc: (0.05) test set size
        default: 0.05
      - name: train_val_split
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: test_set_key
        type: str
        doc: store the test data set under this key in the artifact store
        default: test_set
      - name: rng
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: models_dest
        type: str
        doc: models subfolder on artifact path
        default: models
      - name: plots_dest
        type: str
        doc: plot subfolder on artifact path
        default: plots
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: model_pkg_file
        type: str
        doc: json model config file
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: parquet
      outputs: []
      lineno: 30
  description: train any classifier using scikit-learn's API
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#870ee50259a3ac26ad1bac28dd9aefc95515708d:sklearn_classifier.ipynb
