kind: job
metadata:
  name: xgb-trainer
  tag: ''
  hash: fc9a4e7412f6437238f079b42da0cbd19a6909d5
  project: ''
  labels:
    author: yjb
    framework: xgboost
  categories:
  - training
  - ml
  - experimental
spec:
  command: ''
  args: []
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: 'train an xgboost model.


        Note on imabalanced data:  the `imbal_vec` parameter represents the measured

        class representations in the sample and can be used as a first step in tuning

        an XGBoost model.  This isn''t a hyperparamter, merely an estimate that should

        be set as ''constant'' throughout tuning process.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: model_type
        type: str
        doc: the model type to train, "classifier", "regressor"...
      - name: dataset
        type: DataItem
        doc: ("data") name of raw data file
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: labels
      - name: encode_cols
        type: dict
        doc: dictionary of names and prefixes for columns that are to hot be encoded.
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7fe9b31fce80>
      - name: imbal_vec
        doc: ([]) vector of class weights seen in sample
      - name: test_size
        type: float
        doc: (0.05) test set size
        default: 0.25
      - name: valid_size
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: random_state
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: models_dest
        type: str
        doc: destination subfolder for model artifacts
        default: models
      - name: plots_dest
        type: str
        doc: destination subfolder for plot artifacts
        default: plots
      - name: eval_metrics
        type: list
        doc: (["error", "auc"]) learning curve metrics
        default:
        - error
        - auc
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: parquet
      - name: model_pkg_file
        type: str
      outputs: []
      lineno: 58
  description: train multiple model types using xgboost
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IHdhcm5pbmdzCndhcm5pbmdzLnNpbXBsZWZpbHRlcihhY3Rpb249Imlnbm9yZSIsIGNhdGVnb3J5PUZ1dHVyZVdhcm5pbmcpCgpmcm9tIG1sdXRpbHMgaW1wb3J0IChnZXRfc2FtcGxlLAogICAgICAgICAgICAgICAgICAgICBnZXRfc3BsaXRzLAogICAgICAgICAgICAgICAgICAgICBnZW5fc2tsZWFybl9tb2RlbCwKICAgICAgICAgICAgICAgICAgICAgY3JlYXRlX2NsYXNzLCAKICAgICAgICAgICAgICAgICAgICAgZXZhbF9jbGFzc19tb2RlbCwKICAgICAgICAgICAgICAgICAgICAgZ2NmX2NsZWFyKQoKZnJvbSBtbHJ1bi5leGVjdXRpb24gaW1wb3J0IE1MQ2xpZW50Q3R4CmZyb20gbWxydW4uZGF0YXN0b3JlIGltcG9ydCBEYXRhSXRlbQpmcm9tIG1scnVuLmFydGlmYWN0cyBpbXBvcnQgUGxvdEFydGlmYWN0LCBUYWJsZUFydGlmYWN0Cgpmcm9tIGNsb3VkcGlja2xlIGltcG9ydCBkdW1wcwppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBvcwpmcm9tIHR5cGluZyBpbXBvcnQgTGlzdAoKZGVmIF9nZW5feGdiX21vZGVsKG1vZGVsX3R5cGU6IHN0ciwgeGdiX3BhcmFtczogZGljdCk6CiAgICAiIiJnZW5lcmF0ZSBhbiB4Z2Jvb3N0IG1vZGVsCiAgICAKICAgIE11bHRpcGxlIG1vZGVsIHR5cGVzIHRoYXQgY2FuIGJlIGVzdGltYXRlZCB1c2luZwogICAgdGhlIFhHQm9vc3QgU2Npa2l0LUxlYXJuIEFQSS4KICAgIAogICAgSW5wdXQgY2FuIGVpdGhlciBiZSBhIHByZWRlZmluZWQganNvbiBtb2RlbCBjb25maWd1cmF0aW9uIG9yIG9uZQogICAgb2YgdGhlIGZpdmUgeGdib29zdCBtb2RlbCB0eXBlczogImNsYXNzaWZpZXIiLCAicmVncmVzc29yIiwgInJhbmtlciIsCiAgICAicmZfY2xhc3NpZmllciIsIG9yICJyZl9yZWdyZXNzb3IiLgogICAgCiAgICBJbiBlaXRoZXIgY2FzZSBvbmUgY2FuIHBhc3MgaW4gYSBwYXJhbXMgZGljdCB0byBtb2RpZnkgZGVmYXVsdHMgdmFsdWVzLgogICAgCiAgICBCYXNlZCBvbiBgbWx1dGlscy5tb2RlbHMuZ2VuX3NrbGVhcm5fbW9kZWxgLCBzZWUgdGhlIGZ1bmN0aW9uCiAgICBgc2tsZWFybl9jbGFzc2lmaWVyYCBpbiB0aGlzIHJlcG9zaXRvcnkuCiAgICAKICAgIDpwYXJhbSBtb2RlbF90eXBlOiBvbmUgb2YgImNsYXNzaWZpZXIiLCAicmVncmVzc29yIiwKICAgICAgICAgICAgICAgICAgICAgICAicmFua2VyIiwgInJmX2NsYXNzaWZpZXIiLCBvcgogICAgICAgICAgICAgICAgICAgICAgInJmX3JlZ3Jlc3NvciIKICAgIDpwYXJhbSB4Z2JfcGFyYW1zOiBjbGFzcyBpbml0IHBhcmFtZXRlcnMKICAgICIiIgogICAgbXR5cGVzID0gewogICAgICAgICJjbGFzc2lmaWVyIiAgIDogInhnYm9vc3QuWEdCQ2xhc3NpZmllciIsCiAgICAgICAgInJlZ3Jlc3NvciIgICAgOiAieGdib29zdC5YR0JSZWdyZXNzb3IiLAogICAgICAgICJyYW5rZXIiICAgICAgIDogInhnYm9vc3QuWEdCUmFua2VyIiwKICAgICAgICAicmZfY2xhc3NpZmllciI6ICJ4Z2Jvb3N0LlhHQlJGQ2xhc3NpZmllciIsCiAgICAgICAgInJmX3JlZ3Jlc3NvciIgOiAieGdib29zdC5YR0JSRlJlZ3Jlc3NvciIKICAgIH0KICAgIGlmIG1vZGVsX3R5cGUuZW5kc3dpdGgoImpzb24iKToKICAgICAgICBtb2RlbF9jb25maWcgPSBtb2RlbF90eXBlCiAgICBlbGlmIG1vZGVsX3R5cGUgaW4gbXR5cGVzLmtleXMoKToKICAgICAgICBtb2RlbF9jb25maWcgPSBtdHlwZXNbbW9kZWxfdHlwZV0KICAgIGVsc2U6CiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJ1bnJlY29nbml6ZWQgbW9kZWwgdHlwZSwgc2VlIGhlbHAgZG9jdW1lbnRhdGlvbiIpCgogICAgcmV0dXJuIGdlbl9za2xlYXJuX21vZGVsKG1vZGVsX2NvbmZpZywgeGdiX3BhcmFtcykKCmRlZiB0cmFpbl9tb2RlbCgKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgbW9kZWxfdHlwZTogc3RyLAogICAgZGF0YXNldDogRGF0YUl0ZW0sCiAgICBsYWJlbF9jb2x1bW46IHN0ciA9ICJsYWJlbHMiLAogICAgZW5jb2RlX2NvbHM6IGRpY3QgPSB7fSwKICAgIHNhbXBsZTogaW50ID0gLTEsCiAgICBpbWJhbF92ZWMgPSBbXSwKICAgIHRlc3Rfc2l6ZTogZmxvYXQgPSAwLjI1LAogICAgdmFsaWRfc2l6ZTogZmxvYXQgPSAwLjc1LAogICAgcmFuZG9tX3N0YXRlOiBpbnQgPSAxLAogICAgbW9kZWxzX2Rlc3Q6IHN0ciA9ICJtb2RlbHMiLAogICAgcGxvdHNfZGVzdDogc3RyID0gInBsb3RzIiwKICAgIGV2YWxfbWV0cmljczogbGlzdD0gWyJlcnJvciIsICJhdWMiXSwKICAgIGZpbGVfZXh0OiBzdHIgPSAicGFycXVldCIsCiAgICBtb2RlbF9wa2dfZmlsZTogc3RyID0gIiIsICAgIAopIC0+IE5vbmU6CiAgICAiIiJ0cmFpbiBhbiB4Z2Jvb3N0IG1vZGVsLgogICAgCiAgICBOb3RlIG9uIGltYWJhbGFuY2VkIGRhdGE6ICB0aGUgYGltYmFsX3ZlY2AgcGFyYW1ldGVyIHJlcHJlc2VudHMgdGhlIG1lYXN1cmVkCiAgICBjbGFzcyByZXByZXNlbnRhdGlvbnMgaW4gdGhlIHNhbXBsZSBhbmQgY2FuIGJlIHVzZWQgYXMgYSBmaXJzdCBzdGVwIGluIHR1bmluZwogICAgYW4gWEdCb29zdCBtb2RlbC4gIFRoaXMgaXNuJ3QgYSBoeXBlcnBhcmFtdGVyLCBtZXJlbHkgYW4gZXN0aW1hdGUgdGhhdCBzaG91bGQKICAgIGJlIHNldCBhcyAnY29uc3RhbnQnIHRocm91Z2hvdXQgdHVuaW5nIHByb2Nlc3MuCiAgICAKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgICAgdGhlIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBtb2RlbF90eXBlOiAgICAgICAgdGhlIG1vZGVsIHR5cGUgdG8gdHJhaW4sICJjbGFzc2lmaWVyIiwgInJlZ3Jlc3NvciIuLi4KICAgIDpwYXJhbSBkYXRhc2V0OiAgICAgICAgICAgKCJkYXRhIikgbmFtZSBvZiByYXcgZGF0YSBmaWxlCiAgICA6cGFyYW0gbGFiZWxfY29sdW1uOiAgICAgIGdyb3VuZC10cnV0aCAoeSkgbGFiZWxzCiAgICA6cGFyYW0gZW5jb2RlX2NvbHM6ICAgICAgIGRpY3Rpb25hcnkgb2YgbmFtZXMgYW5kIHByZWZpeGVzIGZvciBjb2x1bW5zIHRoYXQgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGhvdCBiZSBlbmNvZGVkLgogICAgOnBhcmFtIHNhbXBsZTogICAgICAgICAgICBTZWxlY3RzIHRoZSBmaXJzdCBuIHJvd3MsIG9yIHNlbGVjdCBhIHNhbXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydGluZyBmcm9tIHRoZSBmaXJzdC4gSWYgbmVnYXRpdmUgPC0xLCBzZWxlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSByYW5kb20gc2FtcGxlCiAgICA6cGFyYW0gaW1iYWxfdmVjOiAgICAgICAgIChbXSkgdmVjdG9yIG9mIGNsYXNzIHdlaWdodHMgc2VlbiBpbiBzYW1wbGUKICAgIDpwYXJhbSB0ZXN0X3NpemU6ICAgICAgICAgKDAuMDUpIHRlc3Qgc2V0IHNpemUKICAgIDpwYXJhbSB2YWxpZF9zaXplOiAgICAgICAgKDAuNzUpIE9uY2UgdGhlIHRlc3Qgc2V0IGhhcyBiZWVuIHJlbW92ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWluaW5nIHNldCBnZXRzIHRoaXMgcHJvcG9ydGlvbi4KICAgIDpwYXJhbSByYW5kb21fc3RhdGU6ICAgICAgKDEpIHNrbGVhcm4gcm5nIHNlZWQKICAgIDpwYXJhbSBtb2RlbHNfZGVzdDogICAgICAgZGVzdGluYXRpb24gc3ViZm9sZGVyIGZvciBtb2RlbCBhcnRpZmFjdHMKICAgIDpwYXJhbSBwbG90c19kZXN0OiAgICAgICAgZGVzdGluYXRpb24gc3ViZm9sZGVyIGZvciBwbG90IGFydGlmYWN0cwogICAgOnBhcmFtIGV2YWxfbWV0cmljczogICAgICAoWyJlcnJvciIsICJhdWMiXSkgbGVhcm5pbmcgY3VydmUgbWV0cmljcwogICAgOnBhcmFtIGZpbGVfZXh0OiAgICAgICAgICBmb3JtYXQgZm9yIHRlc3Rfc2V0X2tleSBob2xkIG91dCBkYXRhCiAgICAiIiIKICAgIG1vZGVsc19kZXN0ID0gbW9kZWxzX2Rlc3Qgb3IgIm1vZGVscyIKICAgIHBsb3RzX2Rlc3QgPSBwbG90c19kZXN0IG9yIGYicGxvdHMve2NvbnRleHQubmFtZX0iCiAgICAKICAgIHJhdywgbGFiZWxzLCBoZWFkZXIgPSBnZXRfc2FtcGxlKGRhdGFzZXQsIHNhbXBsZSwgbGFiZWxfY29sdW1uKQogICAgCiAgICBpZiBlbmNvZGVfY29sczoKICAgICAgICByYXcgPSBwZC5nZXRfZHVtbWllcyhyYXcsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM9bGlzdChlbmNvZGVfY29scy5rZXlzKCkpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXg9bGlzdChlbmNvZGVfY29scy52YWx1ZXMoKSksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BfZmlyc3Q9VHJ1ZSkKICAgIAogICAgKHh0cmFpbiwgeXRyYWluKSwgKHh2YWxpZCwgeXZhbGlkKSwgKHh0ZXN0LCB5dGVzdCkgPSAgICAgICAgIGdldF9zcGxpdHMocmF3LCBsYWJlbHMsIDMsIHRlc3Rfc2l6ZSwgdmFsaWRfc2l6ZSwgcmFuZG9tX3N0YXRlKQogICAgCiAgICBjb250ZXh0LmxvZ19kYXRhc2V0KCJ0ZXN0LXNldCIsIGRmPXBkLmNvbmNhdChbeHRlc3QsIHl0ZXN0XSwgYXhpcz0xKSwgZm9ybWF0PWZpbGVfZXh0LCBpbmRleD1GYWxzZSkKCiAgICBtb2RlbF9jb25maWcgPSBfZ2VuX3hnYl9tb2RlbChtb2RlbF90eXBlLCBjb250ZXh0LnBhcmFtZXRlcnMuaXRlbXMoKSkKCiAgICBpZiBsZW4oaW1iYWxfdmVjKSA9PSAyOgogICAgICAgIHNjYWxlX3Bvc193ZWlnaHQgPSBpbWJhbF92ZWNbMF0vaW1iYWxfdmVjWzFdCiAgICAgICAgbW9kZWxfY29uZmlnWyJDTEFTUyJdLnVwZGF0ZSh7InNjYWxlX3Bvc193ZWlnaHQiOiBzY2FsZV9wb3Nfd2VpZ2h0fSkKCiAgICBYR0JCb29zdENsYXNzID0gY3JlYXRlX2NsYXNzKG1vZGVsX2NvbmZpZ1siTUVUQSJdWyJjbGFzcyJdKQogICAgbW9kZWwgPSBYR0JCb29zdENsYXNzKCoqbW9kZWxfY29uZmlnWyJDTEFTUyJdKQoKICAgIG1vZGVsX2NvbmZpZ1siRklUIl0udXBkYXRlKHsiWCI6IHh0cmFpbiwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInkiOiB5dHJhaW4udmFsdWVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJldmFsX3NldCI6Wyh4dHJhaW4sIHl0cmFpbiksICh4dmFsaWQsIHl2YWxpZCldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJldmFsX21ldHJpYyI6IGV2YWxfbWV0cmljc30pCgogICAgbW9kZWwuZml0KCoqbW9kZWxfY29uZmlnWyJGSVQiXSkKCiAgICBldmFsX21ldHJpY3MgPSBldmFsX2NsYXNzX21vZGVsKGNvbnRleHQsIHh2YWxpZCwgeXZhbGlkLCBtb2RlbCkKCiAgICBtb2RlbF9wbG90cyA9IGV2YWxfbWV0cmljcy5wb3AoInBsb3RzIikKICAgIG1vZGVsX3RhYmxlcyA9IGV2YWxfbWV0cmljcy5wb3AoInRhYmxlcyIpCiAgICBmb3IgcGxvdCBpbiBtb2RlbF9wbG90czoKICAgICAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChwbG90LCBsb2NhbF9wYXRoPWYie3Bsb3RzX2Rlc3R9L3twbG90LmtleX0uaHRtbCIpCiAgICBmb3IgdGJsIGluIG1vZGVsX3RhYmxlczoKICAgICAgICBjb250ZXh0LmxvZ19hcnRpZmFjdCh0YmwsIGxvY2FsX3BhdGg9ZiJ7cGxvdHNfZGVzdH0ve3Bsb3Qua2V5fS5jc3YiKQoKICAgIG1vZGVsX2JpbiA9IGR1bXBzKG1vZGVsKSAjIC5nZXRfYm9vc3RlcigpKQogICAgY29udGV4dC5sb2dfbW9kZWwoIm1vZGVsIiwgYm9keT1tb2RlbF9iaW4sCiAgICAgICAgICAgICAgICAgICAgICBhcnRpZmFjdF9wYXRoPW9zLnBhdGguam9pbihjb250ZXh0LmFydGlmYWN0X3BhdGgsIG1vZGVsc19kZXN0KSwKICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX2ZpbGU9Im1vZGVsLnBrbCIsCiAgICAgICAgICAgICAgICAgICAgICBtZXRyaWNzPWV2YWxfbWV0cmljcykKCiAgICBjb250ZXh0LmxvZ19yZXN1bHRzKGV2YWxfbWV0cmljcykKCg==
    base_image: mlrun/ml-models
    commands:
    - pip install git+https://github.com/mlrun/mlutils.git@development scikit-plot
    code_origin: https://github.com/yjb-ds/functions.git#f862aa40408127422ae0180104f51e28351969d0:xgb_trainer.ipynb
