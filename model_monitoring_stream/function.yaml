kind: remote
metadata:
  name: model-monitoring-stream
  tag: ''
  hash: 33f4d6de0858b3dfc9d150fc82fbed6feb05534c
  project: ''
  categories:
  - monitoring
spec:
  command: ''
  args: []
  image: livsmichael/mlrun-api:automation
  entry_points:
    consume:
      name: consume
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 293
    compute_predictions_per_second:
      name: compute_predictions_per_second
      doc: ''
      parameters:
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 311
    process_before_kv:
      name: process_before_kv
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 316
    process_before_events_tsdb:
      name: process_before_events_tsdb
      doc: ''
      parameters:
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 325
    process_before_parquet:
      name: process_before_parquet
      doc: ''
      parameters:
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 362
    set_none_if_empty:
      name: set_none_if_empty
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 364
    drop_if_exists:
      name: drop_if_exists
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 369
    unpack_if_exists:
      name: unpack_if_exists
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 373
    do:
      name: do
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 702
    resume_state:
      name: resume_state
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: endpoint_id
        default: ''
      outputs:
      - default: ''
      lineno: 475
    is_valid:
      name: is_valid
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: endpoint_id
        type: str
        default: ''
      - name: validation_function
        default: ''
      - name: field
        type: Any
        default: ''
      - name: dict_path
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 495
    handle_errors:
      name: handle_errors
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: endpoint_id
        default: ''
      - name: event
        default: ''
      outputs:
      - default: ''
        type: bool
      lineno: 503
    enrich_even_details:
      name: enrich_even_details
      doc: ''
      parameters:
      - name: event
        default: ''
      outputs:
      - default: ''
      lineno: 511
    is_not_none:
      name: is_not_none
      doc: ''
      parameters:
      - name: field
        type: Any
        default: ''
      - name: dict_path
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 536
    is_list_of_numerics:
      name: is_list_of_numerics
      doc: ''
      parameters:
      - name: field
        type: List[Union[int, float, dict, list]]
        default: ''
      - name: dict_path
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 545
    get_endpoint_record:
      name: get_endpoint_record
      doc: ''
      parameters:
      - name: kv_container
        type: str
        default: ''
      - name: kv_path
        type: str
        default: ''
      - name: endpoint_id
        type: str
        default: ''
      - name: access_key
        type: str
        default: ''
      outputs:
      - default: ''
      lineno: 717
    init_context:
      name: init_context
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      outputs:
      - default: ''
      lineno: 743
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: event
        type: Event
        default: ''
      outputs:
      - default: ''
      lineno: 751
  description: ''
  min_replicas: 1
  max_replicas: 4
  env: []
  base_spec:
    apiVersion: nuclio.io/v1
    kind: Function
    metadata:
      name: model-monitoring-stream
      labels: {}
      annotations:
        nuclio.io/generated_by: function generated from /home/michaell/projects/functions/model_monitoring_stream/model_monitoring_stream.py
    spec:
      runtime: python:3.9
      handler: model_monitoring_stream:handler
      env: []
      volumes: []
      build:
        commands: []
        noBaseImagesPull: true
        functionSourceCode: 
  source: ''
  build:
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#202b4c489e4c02c3025742ea237f1a042b7c6043:/home/michaell/projects/functions/model_monitoring_stream/model_monitoring_stream.py
  default_handler: handler
verbose: false
