kind: job
metadata:
  name: batch-inference
  tag: ''
  hash: 2522525a899857d70582067647828dfaeffd03f2
  project: ''
  labels:
    author: guyl
  categories:
  - utils
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/yonishelach/functions.git#1f6afed6bbe17186995c39b6e40067cfd8dc6e64:/Users/Yonatan_Shelach/projects/functions/batch_inference/batch_inference.py
    origin_filename: /Users/Yonatan_Shelach/projects/functions/batch_inference/batch_inference.py
    with_mlrun: false
    auto_build: false
  entry_points:
    infer:
      name: infer
      doc: 'Perform a prediction on a given dataset with the given model. Can perform
        drift analysis between the sample set

        statistics stored in the model to the current input data. The drift rule is
        the value per-feature mean of the TVD

        and Hellinger scores according to the thresholds configures here.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model
        type: str
        doc: The model Store path.
        default: ''
      - name: dataset
        type: DatasetType
        doc: The dataset to infer through the model. Can be passed in `inputs` as
          either a Dataset artifact / Feature vector URI. Or, in `parameters` as a
          list, dictionary or numpy array.
        default: ''
      - name: drop_columns
        type: Union[str, List[str], int, List[int]]
        doc: A string / integer or a list of strings / integers that represent the
          column names / indices to drop. When the dataset is a list or a numpy array
          this parameter must be represented by integers.
        default: null
      - name: label_columns
        type: Union[str, List[str]]
        doc: The target label(s) of the column(s) in the dataset for Regression or
          Classification tasks. The label column can be accessed from the model object,
          or the feature vector provided if available.
        default: null
      - name: log_result_set
        type: bool
        doc: Whether to log the result set - a DataFrame of the given inputs concatenated
          with the predictions. Defaulted to True.
        default: true
      - name: result_set_name
        type: str
        doc: The db key to set name of the prediction result and the filename. Defaulted
          to 'prediction'.
        default: prediction
      - name: batch_id
        type: str
        doc: The ID of the given batch (inference dataset). If `None`, it will be
          generated. Will be logged as a result of the run.
        default: null
      - name: perform_drift_analysis
        type: bool
        doc: Whether to perform drift analysis between the sample set of the model
          object to the dataset given. By default, None, which means it will perform
          drift analysis if the model has a sample set statistics. Perform drift analysis
          will produce a data drift table artifact.
        default: null
      - name: sample_set
        type: DatasetType
        doc: A sample dataset to give to compare the inputs in the drift analysis.
          The default chosen sample set will always be the one who is set in the model
          artifact itself.
        default: null
      - name: drift_threshold
        type: float
        doc: The threshold of which to mark drifts. Defaulted to 0.7.
        default: 0.7
      - name: possible_drift_threshold
        type: float
        doc: The threshold of which to mark possible drifts. Defaulted to 0.5.
        default: 0.5
      - name: inf_capping
        type: float
        doc: The value to set for when it reached infinity. Defaulted to 10.0.
        default: 10.0
      - name: artifacts_tag
        type: str
        doc: Tag to use for all the artifacts resulted from the function.
        default: ''
      outputs:
      - default: ''
      lineno: 306
  description: Batch inference (also knows as prediction) for the common ML frameworks
    (SciKit-Learn, XGBoost and LightGBM) while performing data drift analysis.
  default_handler: infer
  disable_auto_mount: false
  allow_empty_resources: true
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
