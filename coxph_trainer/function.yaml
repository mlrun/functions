kind: job
metadata:
  name: cox-hazards
  tag: ''
  hash: 5ade464092c87908d3eafe1161cb784c3e2dda46
  project: ''
  labels:
    author: yjb
    framework: survival
  categories:
  - training
  - ml
spec:
  command: ''
  args: []
  image: yjbds/ml-models:0.4.7
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: "train models to predict the timing of events\n\nAlthough identical in\
        \ structure to other training functions, this one\nrequires generating a 'Y'\
        \ that represents the age/duration/tenure of\nthe obervation, designated 'tenure'\
        \ here, and a binary labels columns that\nrepresents the event of interest,\
        \ churned/not-churned.\n\nIn addition, there is a strata_cols parameter, representing\
        \ a list of \nstratification (aka grouping) variables."
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: dataset
        type: DataItem
        doc: ("data") name of raw data file
      - name: event_column
        type: str
        doc: ground-truth (y) labels (considered as events in this model)
        default: labels
      - name: time_column
        type: str
        doc: age or tenure column
        default: tenure
      - name: encode_cols
        type: dict
        doc: dictionary of names and prefixes for columns that are to hot be encoded.
      - name: strata_cols
        type: list
        doc: columns used to stratify predictors
      - name: plot_cov_groups
        type: bool
      - name: p_value
        type: float
        doc: (0.005) max p value for coeffcients selected
        default: 0.005
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7fd154f224d0>
      - name: test_size
        type: float
        doc: (0.25) test set size
        default: 0.25
      - name: valid_size
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: random_state
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: models_dest
        type: str
        doc: destination subfolder for model artifacts
      - name: plots_dest
        type: str
        doc: destination subfolder for plot artifacts
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: csv
      outputs: []
      lineno: 89
  description: train any classifier using scikit-learn's API
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/yjb-ds/functions.git#5a858f627203e3708519818a7e65938f6607ff12:cox_hazards.ipynb
