kind: job
metadata:
  name: llm-judge
  tag: ''
  hash: 944bc5677dca3283d350c63ce8551c99109e80d9
  project: ''
  labels:
    author: pgw
  categories:
  - machine-learning
  - monitoring
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - pytest==5.2.0
    - pandas
    - openai
    - mlrun==1.4.0
    - auto-gptq
    - openmpi
    - mpi4py
    - transformers
    - torch=2.0.0
    - accelerate
    - einops
    - optimum
  entry_points:
    llm_judge:
      name: llm_judge
      doc: Compute the metrics over a dataset
      parameters:
      - name: input_path
        type: Union[str, Path]
        doc: the path to the input data
      outputs:
      - doc: the metrics score and the explanation
        default: ''
      lineno: 1045
  description: This function is used to compute the metrics using llm as a judge
  default_handler: llm_judge
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
