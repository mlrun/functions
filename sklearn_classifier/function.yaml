kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: c2b0d13dffe5550c7e337f80ba37bdcd440796f9
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: aW1wb3J0IGpzb24KaW1wb3J0IG9zCmZyb20gaW1wb3J0bGliIGltcG9ydCBpbXBvcnRfbW9kdWxlCmZyb20gaW5zcGVjdCBpbXBvcnQgZ2V0ZnVsbGFyZ3NwZWMsIEZ1bGxBcmdTcGVjCmZyb20gY2xvdWRwaWNrbGUgaW1wb3J0IGR1bXAsIGxvYWQKaW1wb3J0IGl0ZXJ0b29scwoKaW1wb3J0IHNrbGVhcm4KaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgcHlhcnJvdyBhcyBwYQppbXBvcnQgcHlhcnJvdy5wYXJxdWV0IGFzIHBxCmltcG9ydCBudW1weSBhcyBucAppbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CmltcG9ydCBzZWFib3JuIGFzIHNucwoKZnJvbSBza2xlYXJuLnV0aWxzLnRlc3RpbmcgaW1wb3J0IGFsbF9lc3RpbWF0b3JzCmZyb20gc2tsZWFybi5kYXRhc2V0cyBpbXBvcnQgbWFrZV9jbGFzc2lmaWNhdGlvbgpmcm9tIHNrbGVhcm4ucHJlcHJvY2Vzc2luZyBpbXBvcnQgbGFiZWxfYmluYXJpemUKZnJvbSBza2xlYXJuLm1vZGVsX3NlbGVjdGlvbiBpbXBvcnQgdHJhaW5fdGVzdF9zcGxpdApmcm9tIHNrbGVhcm4gaW1wb3J0IG1ldHJpY3MKCmZyb20gdHlwaW5nIGltcG9ydCBVbmlvbiwgTGlzdCwgQW55LCBPcHRpb25hbApmcm9tIG1scnVuLmV4ZWN1dGlvbiBpbXBvcnQgTUxDbGllbnRDdHgKZnJvbSBtbHJ1bi5kYXRhc3RvcmUgaW1wb3J0IERhdGFJdGVtCmZyb20gbWxydW4uYXJ0aWZhY3RzIGltcG9ydCBQbG90QXJ0aWZhY3QKCnNrdmVyc2lvbiA9IHNrbGVhcm4uX192ZXJzaW9uX18KCmltcG9ydCB3YXJuaW5ncwoKd2FybmluZ3Muc2ltcGxlZmlsdGVyKGFjdGlvbj0iaWdub3JlIiwgY2F0ZWdvcnk9RnV0dXJlV2FybmluZykKCgpkZWYgX2djZl9jbGVhcihwbHQpOgogICAgIiIiVXRpbGl0eSB0byBjbGVhciBtYXRwbG90bGliIGZpZ3VyZQoKICAgIFJ1biB0aGlzIGluc2lkZSBldmVyeSBwbG90IG1ldGhvZCBiZWZvcmUgY2FsbGluZyBhbnkgbWF0cGxvdGxpYgogICAgbWV0aG9kcwoKICAgIDpwYXJhbSBwbG90OiAgICBtYXRsb2JsaWIgZmlndXJlIG9iamVjdAogICAgIiIiCiAgICBwbHQuY2xhKCkKICAgIHBsdC5jbGYoKQogICAgcGx0LmNsb3NlKCkKCgpkZWYgX2NyZWF0ZV9jbGFzcyhwa2dfY2xhc3M6IHN0cik6CiAgICAiIiJDcmVhdGUgYSBjbGFzcyBmcm9tIGEgcGFja2FnZS5tb2R1bGUuY2xhc3Mgc3RyaW5nCgogICAgOnBhcmFtIHBrZ19jbGFzczogIGZ1bGwgY2xhc3MgbG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgZS5nLiAic2tsZWFybi5tb2RlbF9zZWxlY3Rpb24uR3JvdXBLRm9sZCIKICAgICIiIgogICAgc3BsaXRzID0gcGtnX2NsYXNzLnNwbGl0KCIuIikKICAgIGNsZmNsYXNzID0gc3BsaXRzWy0xXQogICAgcGtnX21vZHVsZSA9IHNwbGl0c1s6LTFdCiAgICBjbGFzc18gPSBnZXRhdHRyKGltcG9ydF9tb2R1bGUoIi4iLmpvaW4ocGtnX21vZHVsZSkpLCBjbGZjbGFzcykKICAgIHJldHVybiBjbGFzc18KCmRlZiBfY3JlYXRlX2Z1bmN0aW9uKHBrZ19mdW5jOiBsaXN0KToKICAgICIiIkNyZWF0ZSBhIGZ1bmN0aW9uIGZyb20gYSBwYWNrYWdlLm1vZHVsZS5mdW5jdGlvbiBzdHJpbmcKCiAgICA6cGFyYW0gcGtnX2Z1bmM6ICBmdWxsIGZ1bmN0aW9uIGxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICAgZS5nLiAic2tsZWFybi5mZWF0dXJlX3NlbGVjdGlvbi5mX2NsYXNzaWYiCiAgICAiIiIKICAgIHNwbGl0cyA9IHBrZ19mdW5jLnNwbGl0KCIuIikKICAgIHBrZ19tb2R1bGUgPSAiLiIuam9pbihzcGxpdHNbOi0xXSkKICAgIGNiX2ZuYW1lID0gc3BsaXRzWy0xXQogICAgcGtnX21vZHVsZSA9IF9faW1wb3J0X18ocGtnX21vZHVsZSwgZnJvbWxpc3Q9W2NiX2ZuYW1lXSkKICAgIGZ1bmN0aW9uXyA9IGdldGF0dHIocGtnX21vZHVsZSwgY2JfZm5hbWUpCiAgICByZXR1cm4gZnVuY3Rpb25fCgpkZWYgZ2V0X21vZGVsX2NvbmZpZ3MoCiAgICBteV9tb2RlbHM6IFVuaW9uW3N0ciwgTGlzdFtzdHJdXSwKICAgIGNsYXNzX2tleSA9ICJDTEFTUyIsCiAgICBmaXRfa2V5ID0gIkZJVCIsCiAgICBtZXRhX2tleSA9ICJNRVRBIiwKKSAtPiBVbmlvbltkaWN0LCBMaXN0W2RpY3RdXToKICAgICIiImJ1aWxkIHNrbGVhcm4gbW9kZWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzCiAgICAKICAgIFRha2UgKGZ1bGwpIGNsYXNzIG5hbWUgb2YgYW4gc2Npa2l0LWxlYXJuIG1vZGVsIAogICAgYW5kIHJldHJpZXZlIGl0cyBgY2xhc3NgIGFuZCBgZml0YCBwYXJhbWV0ZXJzIGFuZAogICAgdGhlaXIgZGVmYXVsdCB2YWx1ZXMuCiAgICAKICAgIEFsc28gcmV0dXJucyBzb21lIHVzZWZ1bCBtZXRhZGF0YSB2YWx1ZXMgZm9yIHRoZSBjbGFzcwogICAgIiIiCiAgICAjIGdldCBhIGxpc3Qgb2YgYWxsIHNrbGVhcm4gZXN0aW1hdG9ycwogICAgZXN0aW1hdG9ycyA9IGFsbF9lc3RpbWF0b3JzKCkKICAgIGRlZiBfZ2V0X2VzdGltYXRvcihwa2dfY2xhc3MpOgogICAgICAgICIiImZpbmQgYSBzcGVjaWZpYyBjbGFzcyBpbiBhIGxpc3Qgb2Ygc2tsZWFybiBlc3RpbWF0b3JzIiIiCiAgICAgICAgbXlfY2xhc3MgPSBwa2dfY2xhc3Muc3BsaXQoJy4nKVstMV0KICAgICAgICByZXR1cm4gbGlzdChmaWx0ZXIobGFtYmRhIHg6IHhbMF0gPT0gbXlfY2xhc3MsIGVzdGltYXRvcnMpKVswXQoKICAgICMgZmluZCBlc3RpbWF0b3JzIGNvcnJlc3BvbmRpbmcgdG8gbXlfbW9kZWxzIGxpc3QKICAgIG15X2VzdGltYXRvcnMgPSBbXQogICAgbXlfbW9kZWxzID0gW215X21vZGVsc10gaWYgaXNpbnN0YW5jZShteV9tb2RlbHMsIHN0cikgZWxzZSBteV9tb2RlbHMKICAgIGZvciBtb2RlbCBpbiBteV9tb2RlbHM6CiAgICAgICAgZXN0aW1hdG9yX25hbWUsIGVzdGltYXRvcl9jbGFzcyA9IF9nZXRfZXN0aW1hdG9yKG1vZGVsKQogICAgICAgIG15X2VzdGltYXRvcnMuYXBwZW5kKChlc3RpbWF0b3JfbmFtZSwgZXN0aW1hdG9yX2NsYXNzKSkKCiAgICAjIGdldCBjbGFzcyBhbmQgZml0IHNwZWNzCiAgICBlc3RpbWF0b3Jfc3BlY3MgPSBbXQogICAgZm9yIGFuX2VzdGltYXRvciBpbiBteV9lc3RpbWF0b3JzOgogICAgICAgIGVzdGltYXRvcl9zcGVjcy5hcHBlbmQoKGFuX2VzdGltYXRvclswXSwgIyBtb2RlbCBvbmx5IG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRmdWxsYXJnc3BlYyhhbl9lc3RpbWF0b3JbMV0pLCAjIGNsYXNzIHBhcmFtcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldGZ1bGxhcmdzcGVjKGFuX2VzdGltYXRvclsxXS5maXQpLCAjIGZpdCBwYXJhbXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbl9lc3RpbWF0b3JbMV0pKSAjIHBhY2thZ2UubW9kdWxlLm1vZGVsCgogICAgbW9kZWxfY29uZmlncyA9IFtdCgogICAgZm9yIGVzdGltYXRvciBpbiBlc3RpbWF0b3Jfc3BlY3M6CiAgICAgICAgbW9kZWxfanNvbiA9IHtjbGFzc19rZXk6IHt9LCBmaXRfa2V5OiB7fX0KICAgICAgICBmaXRfcGFyYW1zID0ge30KCiAgICAgICAgZm9yIGksIGtleSBpbiBlbnVtZXJhdGUobW9kZWxfanNvbi5rZXlzKCkpOgogICAgICAgICAgICBmID0gZXN0aW1hdG9yW2krMV0KICAgICAgICAgICAgYXJnc19wYWlyZWQgPSBbXQogICAgICAgICAgICBkZWZzX3BhaXJlZCA9IFtdCgogICAgICAgICAgICAjIHJldmVyc2UgdGhlIGFyZ3Mgc2luY2UgdGhlcmUgYXJlIGZld2VyIGRlZmF1bHRzIHRoYW4gYXJncwogICAgICAgICAgICBhcmdzID0gZi5hcmdzCiAgICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpCiAgICAgICAgICAgIG5fYXJncyA9IGxlbihhcmdzKQoKICAgICAgICAgICAgZGVmcyA9IGYuZGVmYXVsdHMKICAgICAgICAgICAgaWYgZGVmcyBpcyBOb25lOgogICAgICAgICAgICAgICAgZGVmcyA9IFtkZWZzXQogICAgICAgICAgICBkZWZzID0gbGlzdChkZWZzKQogICAgICAgICAgICBkZWZzLnJldmVyc2UoKQogICAgICAgICAgICBuX2RlZnMgPSBsZW4oZGVmcykKCiAgICAgICAgICAgIG5fc21hbGxlc3QgPSBtaW4obl9hcmdzLCBuX2RlZnMpCiAgICAgICAgICAgIG5fbGFyZ2VzdCA9IG1heChuX2FyZ3MsIG5fZGVmcykKCiAgICAgICAgICAgICMgYnVpbGQgMiBsaXN0cyB0aGF0IGNhbiBiZSBjb25jYXRlbmF0ZWQKICAgICAgICAgICAgZm9yIGl4IGluIHJhbmdlKG5fc21hbGxlc3QpOgogICAgICAgICAgICAgICAgaWYgYXJnc1tpeF0gaXMgbm90ICJzZWxmIjoKICAgICAgICAgICAgICAgICAgICBhcmdzX3BhaXJlZC5hcHBlbmQoYXJnc1tpeF0pCiAgICAgICAgICAgICAgICAgICAgZGVmc19wYWlyZWQuYXBwZW5kKGRlZnNbaXhdKQoKICAgICAgICAgICAgZm9yIGl4IGluIHJhbmdlKG5fc21hbGxlc3QsIG5fbGFyZ2VzdCk6CiAgICAgICAgICAgICAgICBpZiBpeCBpcyBub3QgMCBhbmQgYXJnc1tpeF0gaXMgbm90ICJzZWxmIjoKICAgICAgICAgICAgICAgICAgICBhcmdzX3BhaXJlZC5hcHBlbmQoYXJnc1tpeF0pCiAgICAgICAgICAgICAgICAgICAgZGVmc19wYWlyZWQuYXBwZW5kKE5vbmUpCiAgICAgICAgICAgICAgICMgY29uY2F0ZW5hdGUgbGlzdHMgaW50byBhcHByb3ByaWF0ZSBzdHJ1Y3R1cmUKICAgICAgICAgICAgbW9kZWxfanNvbltrZXldID0gZGljdCh6aXAocmV2ZXJzZWQoYXJnc19wYWlyZWQpLCByZXZlcnNlZChkZWZzX3BhaXJlZCkpKQoKICAgICAgICBtb2RlbF9qc29uW21ldGFfa2V5XSA9IHt9CiAgICAgICAgbW9kZWxfanNvblttZXRhX2tleV1bJ3NrbGVhcm5fdmVyc2lvbiddID0gc2t2ZXJzaW9uCiAgICAgICAgbW9kZWxfanNvblttZXRhX2tleV1bJ2NsYXNzJ10gPSAnLicuam9pbihbZXN0aW1hdG9yWzNdLl9fbW9kdWxlX18sIGVzdGltYXRvclswXV0pCiAgICAgICAgbW9kZWxfY29uZmlncy5hcHBlbmQobW9kZWxfanNvbikKICAgIGlmIGxlbihtb2RlbF9jb25maWdzKSA9PSAxOgogICAgICAgICMgZG8gd2Ugd2FudCB0byBsb2cgdGhpcyBtb2RpZmllZCBtb2RlbCBhcyBhbiBhcnRpZmFjdD8KICAgICAgICByZXR1cm4gbW9kZWxfY29uZmlnc1swXQogICAgZWxzZToKICAgICAgICAjIGRvIHdlIHdhbnQgdG8gbG9nIHRoaXMgbW9kaWZpZWQgbW9kZWwgYXMgYW4gYXJ0aWZhY3Q/CiAgICAgICAgcmV0dXJuIG1vZGVsX2NvbmZpZ3MKCmRlZiB1cGRhdGVfbW9kZWxfY29uZmlnKAogICAgY29uZmlnOiBkaWN0LAogICAgbmV3X2NsYXNzOiBkaWN0LAogICAgbmV3X2ZpdDogZGljdCwKICAgIGNsYXNzX2tleTogc3RyID0gIkNMQVNTIiwKICAgIGZpdF9rZXk6IHN0ciA9ICJGSVQiCik6CiAgICAiIiJVcGRhdGUgbW9kZWwgY29uZmlnIGpzb24KICAgICAgICAKICAgIFRoaXMgZnVuY3Rpb24gaXMgZXNzZW50aWFsIHNpbmNlIHRoZXJlIGFyZSBtb2RpZmljYXRpb25zIGluIGNsYXNzCiAgICBhbmQgZml0IHBhcmFtcyB0aGF0IG11c3QgYmUgbWFkZSAoY2FsbGJhY2tzIGFyZSBhIGdvb2QgZXhhbXBsZSwgd2l0aG91dAogICAgd2hpY2ggdGhlcmUgaXMgbm8gdHJhaW5pbmcgaGlzdG9yeSBhdmFpbGFibGUpCiAgICAKICAgIFRPRE86ICBjdXJyZW50bHkgYSBtb2RlbCBjb25maWcgY29udGFpbnMgMiBrZXlzLCBidXQgdGhpcyB3aWxsIGxpa2VseQogICAgZXhwYW5kIHRvIGluY2x1ZGUgb3RoZXIgZnVuY3Rpb25zIGJleW9uZCBjbGFzcyBhbmQgZml0LiBTbyBuZWVkIHRvIGV4cGFuZCAKICAgIHRoaXMgdG8gYSBsaXN0IG9mIFR1cGxlKHN0ciwgZGljdCksIHdoZXJlIGBzdHJgIGNvcnJlc3BvbmRzIHRvIGEga2V5CiAgICBpbiB0aGUgbW9kZWwgY29uZmlnIGFuZCBgZGljdGAgY29udGFpbnMgdGhlIHBhcmFtcyBhbmQgdGhlaXIgbmV3IHZhbHVlcy4KICAgIAogICAgOnBhcmFtIGNvbmZpZzogICAgICBvcmlnaW5hbCBtb2RlbCBkZWZpbml0aW9uIGNvbnRhaW5pbmcgMiBrZXlzLCBDTEFTUyBhbmQgRklUCiAgICA6cGFyYW0gbmV3X2NsYXNzOiAgIG5ldyBjbGFzcyBrZXktdmFsdWVzCiAgICA6cGFyYW0gbmV3X2ZpdDogICAgIG5ldyBmaXQga2V5LXZhbHVlcwogICAgIiIiCiAgICBjb25maWdbY2xhc3Nfa2V5XS51cGRhdGUobmV3X2NsYXNzKQogICAgY29uZmlnW2ZpdF9rZXldLnVwZGF0ZShuZXdfZml0KQogICAgCiAgICByZXR1cm4gY29uZmlnCgpkZWYgdHJhaW5fbW9kZWwoCiAgICBjb250ZXh0OiBNTENsaWVudEN0eCwKICAgIG1vZGVsX3BrZ19jbGFzczogc3RyLAogICAgZGF0YV9rZXk6IFVuaW9uW0RhdGFJdGVtLCBzdHJdLAogICAgc2FtcGxlOiBpbnQsCiAgICBsYWJlbF9jb2x1bW46IHN0ciwKICAgIG1vZGVsX2tleTogc3RyID0gIm1vZGVsIiwKICAgIHRlc3Rfc2l6ZTogZmxvYXQgPSAwLjA1LAogICAgdHJhaW5fdmFsX3NwbGl0OiBmbG9hdCA9IDAuNzUsCiAgICB0ZXN0X3NldF9rZXk6IHN0ciA9ICJ0ZXN0X3NldCIsCiAgICBybmc6IGludCA9IDEsCiAgICBtb2RlbHNfZGlyOiBzdHIgPSAibW9kZWxzIiwKICAgIHBsb3RzX2Rpcjogc3RyID0gInBsb3RzIiwKICAgIHNjb3JlX21ldGhvZDogc3RyID0gIm1pY3JvIiwKICAgIGNsYXNzX3BhcmFtc191cGRhdGVzOiBVbmlvbltEYXRhSXRlbSwgZGljdF0gPSB7fSwKICAgIGZpdF9wYXJhbXNfdXBkYXRlczogVW5pb25bRGF0YUl0ZW0sIGRpY3RdID0ge30sCikgLT4gTm9uZToKICAgICIiInRyYWluIGEgY2xhc3NpZmllci4KCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICAgIHRoZSBmdW5jdGlvbiBjb250ZXh0CiAgICA6cGFyYW0gbW9kZWxfcGtnX2NsYXNzOiAgIHRoZSBtb2RlbCB0byB0cmFpbiwgZS5nLCAnc2tsZWFybi5uZXVyYWxfbmV0d29ya3MuTUxQQ2xhc3NpZmllcicKICAgIDpwYXJhbSBkYXRhX2tleTogICAgICAgICAgKCJyYXciKSBuYW1lIG9mIHJhdyBkYXRhIGZpbGUKICAgIDpwYXJhbSBzYW1wbGU6ICAgICAgICAgICAgU2VsZWN0cyB0aGUgZmlyc3QgbiByb3dzLCBvciBzZWxlY3QgYSBzYW1wbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRpbmcgZnJvbSB0aGUgZmlyc3QuIElmIG5lZ2F0aXZlIDwtMSwgc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgcmFuZG9tIHNhbXBsZQogICAgOnBhcmFtIGxhYmVsX2NvbHVtbjogICAgICBncm91bmQtdHJ1dGggKHkpIGxhYmVscwogICAgOnBhcmFtIG1vZGVsX2tleTogICAgICAgICAoJ21vZGVsJykgbmFtZSBvZiBtb2RlbCBpbiBhcnRpZmFjdCBzdG9yZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzIHRvIGEgZGlyZWN0b3J5CiAgICA6cGFyYW0gdGVzdF9zaXplOiAgICAgICAgICgwLjA1KSB0ZXN0IHNldCBzaXplCiAgICA6cGFyYW0gdHJhaW5fdmFsX3NwbGl0OiAgICgwLjc1KSBPbmNlIHRoZSB0ZXN0IHNldCBoYXMgYmVlbiByZW1vdmVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFpbmluZyBzZXQgZ2V0cyB0aGlzIHByb3BvcnRpb24uCiAgICA6cGFyYW0gdGVzdF9zZXRfa2V5OiAgICAgIHN0b3JlIHRoZSB0ZXN0IGRhdGEgc2V0IHVuZGVyIHRoaXMga2V5IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnRpZmFjdCBzdG9yZQogICAgOnBhcmFtIHJuZzogICAgICAgICAgICAgICAoMSkgc2tsZWFybiBybmcgc2VlZAogICAgOnBhcmFtIG1vZGVsc19kaXI6ICAgICAgICBtb2RlbHMgc3ViZm9sZGVyIG9uIGFydGlmYWN0IHBhdGgKICAgIDpwYXJhbSBwbG90c19kaXI6ICAgICAgICAgcGxvdCBzdWJmb2xkZXIgb24gYXJ0aWZhY3QgcGF0aAogICAgOnBhcmFtIHNjb3JlX21ldGhvZDogICAgICBmb3IgbXVsdGljbGFzcyBjbGFzc2lmaWNhdGlvbgogICAgOnBhcmFtIGNsYXNzX3VwZGF0ZXM6ICAgICB1cGRhdGUgdGhlc2Ugc2Npa2l0LWxlYXJuIGNsYXNzaWZpZXIgcGFyYW1zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCBhcyBhIGRpY3QKICAgIDpwYXJhbSBmaXRfdXBkYXRlczogICAgICAgdXBkYXRlIHNjaWtpdC1sZWFybiBmaXQgcGFyYW1ldGVycywgaW5wdXQgYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBkaWN0LgogICAgIiIiCiAgICBiYXNlX3BhdGggPSBjb250ZXh0LmFydGlmYWN0X3BhdGgKICAgIG9zLm1ha2VkaXJzKGJhc2VfcGF0aCwgZXhpc3Rfb2s9VHJ1ZSkKICAgIG9zLm1ha2VkaXJzKG9zLnBhdGguam9pbihiYXNlX3BhdGgsIHBsb3RzX2RpciksIGV4aXN0X29rPVRydWUpCiAgICBvcy5tYWtlZGlycyhvcy5wYXRoLmpvaW4oYmFzZV9wYXRoLCBtb2RlbHNfZGlyKSwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgIyBleHRyYWN0IGZpbGUgbmFtZSBmcm9tIERhdGFJdGVtCiAgICBzcmNmaWxlcGF0aCA9IHN0cihkYXRhX2tleSkKICAgIAogICAgIyBUT0RPOiB0aGlzIHNob3VsZCBiZSBwYXJ0IG9mIGRhdGEncyBtZXRhZGF0YSBkZWFsdCB3aXRoIGluIGFub3RoZXIgc3RlcCBnZXQgYSBkYXRhIHNldCwgc2FtcGxlLCBldGMuLi4KICAgICMgZ2V0IGFsbCBkYXRhIG9yIGEgc2FtcGxlCiAgICBpZiAoc2FtcGxlID09IC0xKSBvciAoc2FtcGxlID49IDEpOgogICAgICAgICMgZ2V0IGFsbCByb3dzLCBvciBjb250aWd1b3VzIHNhbXBsZSBzdGFydGluZyBhdCByb3cgMS4KICAgICAgICByYXcgPSBwcS5yZWFkX3RhYmxlKHNyY2ZpbGVwYXRoKS50b19wYW5kYXMoKS5kcm9wbmEoKQogICAgICAgIGxhYmVscyA9IHJhdy5wb3AobGFiZWxfY29sdW1uKQogICAgICAgIHJhdyA9IHJhdy5pbG9jWzpzYW1wbGUsIDpdCiAgICAgICAgbGFiZWxzID0gbGFiZWxzLmlsb2NbOnNhbXBsZV0KICAgIGVsc2U6CiAgICAgICAgIyBncmFiIGEgcmFuZG9tIHNhbXBsZQogICAgICAgIHJhdyA9IHBxLnJlYWRfdGFibGUoc3JjZmlsZXBhdGgpLnRvX3BhbmRhcygpLmRyb3BuYSgpLnNhbXBsZShzYW1wbGUgKiAtMSkKICAgICAgICBsYWJlbHMgPSByYXcucG9wKGxhYmVsX2NvbHVtbikKCiAgICAjIFRPRE86IHRoaXMgc2hvdWxkIGJlIHBhcnQgb2YgZGF0YSdzIG1ldGFkYXRhIGRlYWx0IHdpdGggaW4gYW5vdGhlciBzdGVwCiAgICBjb250ZXh0LmhlYWRlciA9IHJhdy5jb2x1bW5zLnZhbHVlcwogICAgCiAgICAjIFRPRE86IGFsbCBvZiB0aGlzIHNob3VsZCBiZSBwYXJ0IG9mIGEgc3BpdHRlciBjb21wb25lbnQgdGhhdCBkb2VzIGN2IHRvbywgZGVhbHQgd2l0aCBpbiBhbm90aGVyIHN0ZXAKICAgICMgbWFrZSBhIGhvdCBlbmNvZGUgY29weSBvZiBsYWJlbHMgYmVmb3JlIHRoZSBzcGxpdAogICAgeWIgPSBsYWJlbF9iaW5hcml6ZShsYWJlbHMsIGNsYXNzZXM9bGlzdChyYW5nZShyYXcuc2hhcGVbMV0pKSkKICAgICMgZG91YmxlIHNwbGl0IHRvIGdlbmVyYXRlIDMgZGF0YSBzZXRzOiB0cmFpbiwgdmFsaWRhdGlvbiBhbmQgdGVzdAogICAgIyB3aXRoIHh0ZXN0LHl0ZXN0IHNldCBhc2lkZQogICAgeCwgeHRlc3QsIHksIHl0ZXN0ID0gdHJhaW5fdGVzdF9zcGxpdChucC5jb25jYXRlbmF0ZShbcmF3LCB5Yl0sIGF4aXM9MSksIGxhYmVscywgdGVzdF9zaXplPXRlc3Rfc2l6ZSwgcmFuZG9tX3N0YXRlPXJuZykKICAgIHh0cmFpbiwgeHZhbGlkLCB5dHJhaW4sIHl2YWxpZCA9IHRyYWluX3Rlc3Rfc3BsaXQoeCwgeSwgdHJhaW5fc2l6ZT10cmFpbl92YWxfc3BsaXQsIHJhbmRvbV9zdGF0ZT1ybmcpCiAgICAjIGV4dHJhY3QgdGhlIGhvdF9lbmNvZGVkIGxhYmVscwogICAgeXRyYWluYiA9IHh0cmFpbls6LCAteWIuc2hhcGVbMV06XS5jb3B5KCkKICAgIHh0cmFpbiA9IHh0cmFpbls6LCA6LXliLnNoYXBlWzFdXS5jb3B5KCkKICAgICMgZXh0cmFjdCB0aGUgaG90X2VuY29kZWQgbGFiZWxzCiAgICB5dmFsaWRiID0geHZhbGlkWzosIC15Yi5zaGFwZVsxXTpdLmNvcHkoKQogICAgeHZhbGlkID0geHZhbGlkWzosIDoteWIuc2hhcGVbMV1dLmNvcHkoKQogICAgIyBleHRyYWN0IHRoZSBob3RfZW5jb2RlZCBsYWJlbHMKICAgIHl0ZXN0YiA9IHh0ZXN0WzosIC15Yi5zaGFwZVsxXTpdLmNvcHkoKQogICAgeHRlc3QgPSB4dGVzdFs6LCA6LXliLnNoYXBlWzFdXS5jb3B5KCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgIyBzZXQtYXNpZGUgdGVzdF9zZXQKICAgIHRlc3Rfc2V0ID0gcGQuY29uY2F0KAogICAgICAgIFtwZC5EYXRhRnJhbWUoZGF0YT14dGVzdCwgY29sdW1ucz1jb250ZXh0LmhlYWRlciksCiAgICAgICAgIHBkLkRhdGFGcmFtZShkYXRhPXl0ZXN0LCBjb2x1bW5zPVtsYWJlbF9jb2x1bW5dKV0sCiAgICAgICAgYXhpcz0xLCkKICAgIGZpbGVwYXRoID0gb3MucGF0aC5qb2luKGJhc2VfcGF0aCwgdGVzdF9zZXRfa2V5ICsgIi5wcXQiKQogICAgdGVzdF9zZXQudG9fcGFycXVldChmaWxlcGF0aCwgaW5kZXg9RmFsc2UpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdCh0ZXN0X3NldF9rZXksIGxvY2FsX3BhdGg9dGVzdF9zZXRfa2V5ICsgIi5wcXQiKQoKICAgICMgbG9hZCB0aGUgbW9kZWwgY29uZmlnCiAgICBtb2RlbF9jb25maWcgPSBnZXRfbW9kZWxfY29uZmlncyhtb2RlbF9wa2dfY2xhc3MpCiAgICAjIGdldCB1cGRhdGUgcGFyYW1zIGlmIGFueQogICAgaWYgaXNpbnN0YW5jZShjbGFzc19wYXJhbXNfdXBkYXRlcywgRGF0YUl0ZW0pOgogICAgICAgIGNsYXNzX3BhcmFtc191cGRhdGVzID0ganNvbi5sb2FkcyhjbGFzc19wYXJhbXNfdXBkYXRlcy5nZXQoKSkKICAgIGlmIGlzaW5zdGFuY2UoZml0X3BhcmFtc191cGRhdGVzLCBEYXRhSXRlbSk6CiAgICAgICAgZml0X3BhcmFtc191cGRhdGVzID0ganNvbi5sb2FkcyhmaXRfcGFyYW1zX3VwZGF0ZXMuZ2V0KCkpCiAgICAjIHVwZGF0ZSB0aGUgcGFyYW1ldGVycyAgICAgICAgICAgIAogICAgIyBhZGQgZGF0YSB0byBmaXQgcGFyYW1zCiAgICBmaXRfcGFyYW1zX3VwZGF0ZXMudXBkYXRlKHsnWCc6IHh0cmFpbiwneSc6IHl0cmFpbn0pCiAgICBtb2RlbF9jb25maWcgPSB1cGRhdGVfbW9kZWxfY29uZmlnKG1vZGVsX2NvbmZpZywgY2xhc3NfcGFyYW1zX3VwZGF0ZXMsIGZpdF9wYXJhbXNfdXBkYXRlcykKCiAgICAjIGNyZWF0ZSBjbGFzcyBhbmQgZml0CiAgICBDbGFzc2lmaWVyQ2xhc3MgPSBfY3JlYXRlX2NsYXNzKG1vZGVsX2NvbmZpZ1siTUVUQSJdWyJjbGFzcyJdKQogICAgbW9kZWwgPSBDbGFzc2lmaWVyQ2xhc3MoKiptb2RlbF9jb25maWdbIkNMQVNTIl0pCiAgICBtb2RlbC5maXQoKiptb2RlbF9jb25maWdbIkZJVCJdKQoKICAgICMgc2F2ZSBtb2RlbAogICAgZmlsZXBhdGggPSBvcy5wYXRoLmpvaW4oYmFzZV9wYXRoLCBmInttb2RlbHNfZGlyfS97bW9kZWxfa2V5fS5wa2wiKQogICAgZHVtcChtb2RlbCwgb3BlbihmaWxlcGF0aCwgIndiIikpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChtb2RlbF9rZXksIGxvY2FsX3BhdGg9bW9kZWxzX2RpcikKCiAgICAjIGNvbXB1dGUgdmFsaWRhdGlvbiBtZXRyaWNzCiAgICB5cHJlZCA9IG1vZGVsLnByZWRpY3QoeHZhbGlkKQogICAgeV9zY29yZSA9IG1vZGVsLnByZWRpY3RfcHJvYmEoeHZhbGlkKQoKICAgIGF2ZXJhZ2VfcHJlY2lzaW9uID0gYXZlcmFnZV9wcmVjaXNpb25fc2NvcmUoeXZhbGlkYiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeV9zY29yZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpCgogICAgY29udGV4dC5sb2dfcmVzdWx0KGYiYWNjdXJhY3kiLCBmbG9hdChtb2RlbC5zY29yZSh4dmFsaWQsIHl2YWxpZCkpKQogICAgY29udGV4dC5sb2dfcmVzdWx0KGYicm9jYXVjIiwgcm9jX2F1Y19zY29yZSh5dmFsaWRiLCB5X3Njb3JlKSkKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImYxX3Njb3JlIiwgZjFfc2NvcmUoeXZhbGlkLCB5cHJlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpKQogICAgY29udGV4dC5sb2dfcmVzdWx0KGYiYXZnX3ByZWNzY29yZSIsIGF2ZXJhZ2VfcHJlY2lzaW9uKQoKICAgICMgdmFsaWRhdGlvbiBwbG90cwogICAgCiAgICBwbG90X3JvYyhjb250ZXh0LCB5dmFsaWRiLCB5X3Njb3JlKQogICAgcGxvdF9jb25mdXNpb25fbWF0cml4KGNvbnRleHQsIHl2YWxpZCwgeXByZWQsIGtleT0iY29uZnVzaW9uIiwgZm10PSJwbmciKQoKZGVmIHBsb3Rfcm9jKAogICAgY29udGV4dCwKICAgIHlfbGFiZWxzLAogICAgeV9wcm9icywKICAgIGtleT0icm9jIiwKICAgIHBsb3RzX2Rpcjogc3RyID0gInBsb3RzIiwKICAgIGZtdD0icG5nIiwKICAgIHhfbGFiZWw6IHN0ciA9ICJmYWxzZSBwb3NpdGl2ZSByYXRlIiwKICAgIHlfbGFiZWw6IHN0ciA9ICAidHJ1ZSBwb3NpdGl2ZSByYXRlIiwKICAgIHRpdGxlOiBzdHIgPSAicm9jIGN1cnZlIiwKICAgIGxlZ2VuZF9sb2M6IHN0ciA9ICJiZXN0IgopOgogICAgIiIicGxvdCByb2MgY3VydmVzCiAgICAKICAgIFRPRE86ICBhZGQgYXZlcmFnaW5nIG1ldGhvZCAoYXMgc3RyaW5nKSB0aGF0IHdhcyB1c2VkIHRvIGNyZWF0ZSBwcm9icywgCiAgICBkaXNwbGF5IGluIGxlZ2VuZAogICAgCiAgICA6cGFyYW0gY29udGV4dDogICAgICB0aGUgZnVuY3Rpb24gY29udGV4dAogICAgOnBhcmFtIHlfbGFiZWxzOiAgICAgZ3JvdW5kIHRydXRoIGxhYmVscywgaG90IGVuY29kZWQgZm9yIG11bHRpY2xhc3MgIAogICAgOnBhcmFtIHlfcHJvYnM6ICAgICAgbW9kZWwgcHJlZGljdGlvbiBwcm9iYWJpbGl0aWVzCiAgICA6cGFyYW0ga2V5OiAgICAgICAgICAoInJvYyIpIGtleSBvZiBwbG90IGluIGFydGlmYWN0IHN0b3JlCiAgICA6cGFyYW0gcGxvdHNfZGlyOiAgICAoInBsb3RzIikgZGVzdGluYXRpb24gZm9sZGVyIHJlbGF0aXZlIHBhdGggdG8gYXJ0aWZhY3QgcGF0aAogICAgOnBhcmFtIGZtdDogICAgICAgICAgKCJwbmciKSBwbG90IGZvcm1hdAogICAgOnBhcmFtIHhfbGFiZWw6ICAgICAgKCJmYWxzZSBwb3NpdGl2ZSByYXRlIikgeC1heGlzIGxhYmVscwogICAgOnBhcmFtIHlfbGFiZWw6ICAgICAgKCJ0cnVlIHBvc2l0aXZlIHJhdGUiKSB5LWF4aXMgbGFiZWxzCiAgICA6cGFyYW0gdGl0bGU6ICAgICAgICAoInJvYyBjdXJ2ZSIpIHRpdGxlIG9mIHBsb3QKICAgIDpwYXJhbSBsZWdlbmRfbG9jOiAgICgiYmVzdCIpIGxvY2F0aW9uIG9mIHBsb3QgbGVnZW5kCiAgICAiIiIKICAgICMgZG9uJ3QgYm90aGVyIGlmIHRoaXMgZG9lc24ndCB3b3JrCiAgICBhc3NlcnQgeV9wcm9icy5zaGFwZSA9PSB5X2xhYmVscy5zaGFwZQogICAgCiAgICAjIGNsZWFyIG1hdHBsb3RsaWIgY3VycmVudCBmaWd1cmUKICAgIF9nY2ZfY2xlYXIocGx0KQogICAgCiAgICAjIGRhdGEgYWNjdW1tdWxhdG9ycyBieSBjbGFzcwogICAgZnByID0gZGljdCgpCiAgICB0cHIgPSBkaWN0KCkKICAgIHJvY19hdWMgPSBkaWN0KCkKICAgIAogICAgIyBkcmF3IDQ1IGRlZ3JlZSBsaW5lCiAgICBwbHQucGxvdChbMCwgMV0sIFswLCAxXSwgImstLSIpCiAgICAKICAgICMgbGFiZWxsaW5nCiAgICBwbHQueGxhYmVsKHhfbGFiZWwpCiAgICBwbHQueWxhYmVsKHlfbGFiZWwpCiAgICBwbHQudGl0bGUodGl0bGUpCiAgICBwbHQubGVnZW5kKGxvYz1sZWdlbmRfbG9jKQogICAgCiAgICAjIHNpbmdsZSBST0Mgb3IgbXV0bGlwbGUKICAgIGZvciBpIGluIHJhbmdlKHlfbGFiZWxzLnNoYXBlWzFdKToKICAgICAgICBmcHJbaV0sIHRwcltpXSwgXyA9IG1ldHJpY3Mucm9jX2N1cnZlKHlfbGFiZWxzWzosIGldLCB5X3Byb2JzWzosIGldLCBwb3NfbGFiZWw9MSkKICAgICAgICByb2NfYXVjW2ldID0gbWV0cmljcy5hdWMoZnByW2ldLCB0cHJbaV0pCiAgICAgICAgcGx0LnBsb3QoZnByW2ldLCB0cHJbaV0sIGxhYmVsPWYiY2xhc3Mge2l9IikKCiAgICBmbmFtZSA9IGYie3Bsb3RzX2Rpcn0ve2tleX0ue2ZtdH0iCiAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oY29udGV4dC5hcnRpZmFjdF9wYXRoLCBmbmFtZSkpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChQbG90QXJ0aWZhY3Qoa2V5LCBib2R5PXBsdC5nY2YoKSksIGxvY2FsX3BhdGg9Zm5hbWUpCiAgICAKCmRlZiBwbG90X2NvbmZ1c2lvbl9tYXRyaXgoCiAgICBjb250ZXh0OiBNTENsaWVudEN0eCwKICAgIGxhYmVscywKICAgIHByZWRpY3Rpb25zLAogICAga2V5OiBzdHIgPSAiY29uZnVzaW9uX21hdHJpeCIsCiAgICBwbG90c19kaXI6IHN0ciA9ICJwbG90cyIsCiAgICBjb2xvcm1hcDogc3RyID0gIkJsdWVzIiwKICAgIGZtdDogc3RyID0gInBuZyIsCiAgICBzYW1wbGVfd2VpZ2h0PU5vbmUKKToKICAgICIiIkNyZWF0ZSBhIGNvbmZ1c2lvbiBtYXRyaXguCiAgICBQbG90IGFuZCBzYXZlIGEgY29uZnVzaW9uIG1hdHJpeCB1c2luZyB0ZXN0IGRhdGEgZnJvbSBhCiAgICBtb2RlbGxpbmUgc3RlcC4KICAgIAogICAgU2VlIGh0dHBzOi8vc2Npa2l0LWxlYXJuLm9yZy9zdGFibGUvbW9kdWxlcy9nZW5lcmF0ZWQvc2tsZWFybi5tZXRyaWNzLmNvbmZ1c2lvbl9tYXRyaXguaHRtbAogICAgCiAgICBUT0RPOiBmaXggbGFiZWwgYWxpZ25tZW50CiAgICBUT0RPOiBjb25zaWRlciB1c2luZyBhbm90aGVyIHBhY2thZ2VkIHZlcnNpb24KICAgIFRPRE86IHJlZmFjdG9yIHRvIHRha2UgcGFyYW1zIGRpY3QgZm9yIHBsb3Qgb3B0aW9ucwoKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBsYWJlbHM6ICAgICAgICAgIHZhbGlkYXRpb24gZGF0YSBncm91bmQtdHJ1dGggbGFiZWxzCiAgICA6cGFyYW0gcHJlZGljdGlvbnM6ICAgICB2YWxpZGF0aW9uIGRhdGEgcHJlZGljdGlvbnMKICAgIDpwYXJhbSBrZXk6ICAgICAgICAgICAgIHN0cgogICAgOnBhcmFtIHBsb3RzX2RpcjogICAgICAgcmVsYXRpdmUgcGF0aCBvZiBwbG90cyBpbiBhcnRpZmFjdCBzdG9yZQogICAgOnBhcmFtIGNvbG9ybWFwOiAgICAgICAgY29sb3VybWFwIGZvciBjb25mdXNpb24gbWF0cml4CiAgICA6cGFyYW0gZm10OiAgICAgICAgICAgICBwbG90IGZvcm1hdAogICAgOnBhcmFtIHNhbXBsZV93ZWlnaHQ6ICAgc2FtcGxlIHdlaWdodHMKICAgICIiIgogICAgX2djZl9jbGVhcihwbHQpCiAgICAKICAgIGNtID0gbWV0cmljcy5jb25mdXNpb25fbWF0cml4KGxhYmVscywgcHJlZGljdGlvbnMsIHNhbXBsZV93ZWlnaHQ9Tm9uZSkKICAgIHNucy5oZWF0bWFwKGNtLCBhbm5vdD1UcnVlLCBjbWFwPWNvbG9ybWFwLCBzcXVhcmU9VHJ1ZSkKCiAgICBmaWcgPSBwbHQuZ2NmKCkKICAgIGZuYW1lID0gZiJ7cGxvdHNfZGlyfS97a2V5fS57Zm10fSIKICAgIGZpZy5zYXZlZmlnKG9zLnBhdGguam9pbihjb250ZXh0LmFydGlmYWN0X3BhdGgsIGZuYW1lKSkKICAgIGNvbnRleHQubG9nX2FydGlmYWN0KFBsb3RBcnRpZmFjdChrZXksIGJvZHk9ZmlnKSwgbG9jYWxfcGF0aD1mbmFtZSkK
    commands: []
    code_origin: https://github.com/mlrun/functions.git#649e86fda1015e37bfdd586758b2a1b2bddf221d:sklearn_classifier/sklearn_classifier.py
