kind: job
metadata:
  name: auto-trainer
  tag: ''
  hash: a2c4e105494cc9827e94cb08a66fbc2c96dc4c28
  project: ''
  labels:
    author: yonish
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/yonishelach/functions.git#693669bad40b4c5c2d623c84cb67e32dc7072f99:/Users/Yonatan_Shelach/projects/functions/auto_trainer/auto_trainer.py
    origin_filename: /Users/Yonatan_Shelach/projects/functions/auto_trainer/auto_trainer.py
  entry_points:
    train:
      name: train
      doc: Training the given model on the given dataset.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
        default: ''
      - name: dataset
        type: DataItem
        doc: The dataset to train the model on. Can be either a URI or a FeatureVector
        default: ''
      - name: drop_columns
        type: List[str]
        doc: str or a list of strings that represent the columns to drop
        default: null
      - name: model_class
        type: str
        doc: The class of the model, e.g. `sklearn.linear_model.LogisticRegression`
        default: null
      - name: model_name
        type: str
        doc: The model's name to use for storing the model artifact, default to 'model'
        default: model
      - name: tag
        type: str
        doc: The model's tag to log with
        default: ''
      - name: label_columns
        type: Union[str, List[str]]
        doc: The target label(s) of the column(s) in the dataset. for Regression or
          Classification tasks
        default: null
      - name: sample_set
        type: DataItem
        doc: A sample set of inputs for the model for logging its stats along the
          model in favour of model monitoring. Can be either a URI or a FeatureVector
        default: null
      - name: test_set
        type: DataItem
        doc: The test set to train the model with
        default: null
      - name: train_test_split_size
        type: float
        doc: Should be between 0.0 and 1.0 and represent the proportion of the dataset
          to include in the test split. The size of the Training set is set to the
          complement of this value. Default = 0.2
        default: null
      - name: random_state
        type: int
        doc: Random state for `train_test_split`
        default: null
      outputs:
      - default: ''
      lineno: 110
    evaluate:
      name: evaluate
      doc: Evaluating a model. Artifacts generated by the MLHandler.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model
        type: str
        doc: The model Store path.
        default: ''
      - name: dataset
        type: DataItem
        doc: The dataset to evaluate the model on. Can be either a URI or a FeatureVector.
        default: ''
      - name: drop_columns
        type: List[str]
        doc: str or a list of strings that represent the columns to drop.
        default: null
      - name: label_columns
        type: Optional[str, List[str]]
        doc: The target label(s) of the column(s) in the dataset. for Regression or
          Classification tasks.
        default: null
      outputs:
      - default: ''
      lineno: 231
    predict:
      name: predict
      doc: Predicting dataset by a model.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model
        type: str
        doc: The model Store path.
        default: ''
      - name: dataset
        type: DataItem
        doc: The dataset to predict the model on. Can be either a URI, a FeatureVector
          or a sample in a shape of a list/dict. When passing a sample, pass the dataset
          as a field in `params` instead of `inputs`.
        default: ''
      - name: drop_columns
        type: Union[str, List[str], int, List[int]]
        doc: str/int or a list of strings/ints that represent the column names/indices
          to drop. When the dataset is a list/dict this parameter should be represented
          by integers.
        default: null
      - name: label_columns
        type: Optional[str, List[str]]
        doc: The target label(s) of the column(s) in the dataset. for Regression or
          Classification tasks.
        default: null
      - name: result_set
        type: Optional[str]
        doc: The db key to set name of the prediction result and the filename. Default
          to 'prediction'.
        default: null
      outputs:
      - default: ''
      lineno: 283
  description: Automatic train, evaluate and predict functions for the ML frameworks
    - Scikit-Learn, XGBoost and LightGBM.
  default_handler: train
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
