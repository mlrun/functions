kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: a8d63a945ddabf5839ba9935c9bd9f4d22275a41
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: aW1wb3J0IGpzb24KaW1wb3J0IG9zCmZyb20gaW1wb3J0bGliIGltcG9ydCBpbXBvcnRfbW9kdWxlCmZyb20gaW5zcGVjdCBpbXBvcnQgZ2V0ZnVsbGFyZ3NwZWMsIEZ1bGxBcmdTcGVjCmZyb20gY2xvdWRwaWNrbGUgaW1wb3J0IGR1bXAsIGxvYWQKaW1wb3J0IGl0ZXJ0b29scwoKaW1wb3J0IHNrbGVhcm4KZnJvbSBza2xlYXJuIGltcG9ydCBtZXRyaWNzCmltcG9ydCBwYW5kYXMgYXMgcGQKaW1wb3J0IHB5YXJyb3cgYXMgcGEKaW1wb3J0IHB5YXJyb3cucGFycXVldCBhcyBwcQppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAppbXBvcnQgc2VhYm9ybiBhcyBzbnMKCmZyb20gc2tsZWFybi51dGlscy50ZXN0aW5nIGltcG9ydCBhbGxfZXN0aW1hdG9ycwpmcm9tIHNrbGVhcm4uZGF0YXNldHMgaW1wb3J0IG1ha2VfY2xhc3NpZmljYXRpb24KZnJvbSBza2xlYXJuLnByZXByb2Nlc3NpbmcgaW1wb3J0IGxhYmVsX2JpbmFyaXplCmZyb20gc2tsZWFybi5tb2RlbF9zZWxlY3Rpb24gaW1wb3J0IHRyYWluX3Rlc3Rfc3BsaXQKZnJvbSBza2xlYXJuIGltcG9ydCBtZXRyaWNzCgpmcm9tIHR5cGluZyBpbXBvcnQgVW5pb24sIExpc3QsIEFueSwgT3B0aW9uYWwKZnJvbSBtbHJ1bi5leGVjdXRpb24gaW1wb3J0IE1MQ2xpZW50Q3R4CmZyb20gbWxydW4uZGF0YXN0b3JlIGltcG9ydCBEYXRhSXRlbQpmcm9tIG1scnVuLmFydGlmYWN0cyBpbXBvcnQgUGxvdEFydGlmYWN0Cgpza3ZlcnNpb24gPSBza2xlYXJuLl9fdmVyc2lvbl9fCgppbXBvcnQgd2FybmluZ3MKCndhcm5pbmdzLnNpbXBsZWZpbHRlcihhY3Rpb249Imlnbm9yZSIsIGNhdGVnb3J5PUZ1dHVyZVdhcm5pbmcpCgoKZGVmIF9nY2ZfY2xlYXIocGx0KToKICAgICIiIlV0aWxpdHkgdG8gY2xlYXIgbWF0cGxvdGxpYiBmaWd1cmUKCiAgICBSdW4gdGhpcyBpbnNpZGUgZXZlcnkgcGxvdCBtZXRob2QgYmVmb3JlIGNhbGxpbmcgYW55IG1hdHBsb3RsaWIKICAgIG1ldGhvZHMKCiAgICA6cGFyYW0gcGxvdDogICAgbWF0bG9ibGliIGZpZ3VyZSBvYmplY3QKICAgICIiIgogICAgcGx0LmNsYSgpCiAgICBwbHQuY2xmKCkKICAgIHBsdC5jbG9zZSgpCgoKZGVmIF9jcmVhdGVfY2xhc3MocGtnX2NsYXNzOiBzdHIpOgogICAgIiIiQ3JlYXRlIGEgY2xhc3MgZnJvbSBhIHBhY2thZ2UubW9kdWxlLmNsYXNzIHN0cmluZwoKICAgIDpwYXJhbSBwa2dfY2xhc3M6ICBmdWxsIGNsYXNzIGxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICAgIGUuZy4gInNrbGVhcm4ubW9kZWxfc2VsZWN0aW9uLkdyb3VwS0ZvbGQiCiAgICAiIiIKICAgIHNwbGl0cyA9IHBrZ19jbGFzcy5zcGxpdCgiLiIpCiAgICBjbGZjbGFzcyA9IHNwbGl0c1stMV0KICAgIHBrZ19tb2R1bGUgPSBzcGxpdHNbOi0xXQogICAgY2xhc3NfID0gZ2V0YXR0cihpbXBvcnRfbW9kdWxlKCIuIi5qb2luKHBrZ19tb2R1bGUpKSwgY2xmY2xhc3MpCiAgICByZXR1cm4gY2xhc3NfCgpkZWYgX2NyZWF0ZV9mdW5jdGlvbihwa2dfZnVuYzogbGlzdCk6CiAgICAiIiJDcmVhdGUgYSBmdW5jdGlvbiBmcm9tIGEgcGFja2FnZS5tb2R1bGUuZnVuY3Rpb24gc3RyaW5nCgogICAgOnBhcmFtIHBrZ19mdW5jOiAgZnVsbCBmdW5jdGlvbiBsb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAgIGUuZy4gInNrbGVhcm4uZmVhdHVyZV9zZWxlY3Rpb24uZl9jbGFzc2lmIgogICAgIiIiCiAgICBzcGxpdHMgPSBwa2dfZnVuYy5zcGxpdCgiLiIpCiAgICBwa2dfbW9kdWxlID0gIi4iLmpvaW4oc3BsaXRzWzotMV0pCiAgICBjYl9mbmFtZSA9IHNwbGl0c1stMV0KICAgIHBrZ19tb2R1bGUgPSBfX2ltcG9ydF9fKHBrZ19tb2R1bGUsIGZyb21saXN0PVtjYl9mbmFtZV0pCiAgICBmdW5jdGlvbl8gPSBnZXRhdHRyKHBrZ19tb2R1bGUsIGNiX2ZuYW1lKQogICAgcmV0dXJuIGZ1bmN0aW9uXwoKZGVmIGdldF9tb2RlbF9jb25maWdzKAogICAgbXlfbW9kZWxzOiBVbmlvbltzdHIsIExpc3Rbc3RyXV0sCiAgICBjbGFzc19rZXkgPSAiQ0xBU1MiLAogICAgZml0X2tleSA9ICJGSVQiLAogICAgbWV0YV9rZXkgPSAiTUVUQSIsCikgLT4gVW5pb25bZGljdCwgTGlzdFtkaWN0XV06CiAgICAiIiJidWlsZCBza2xlYXJuIG1vZGVsIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycwogICAgCiAgICBUYWtlIChmdWxsKSBjbGFzcyBuYW1lIG9mIGFuIHNjaWtpdC1sZWFybiBtb2RlbCAKICAgIGFuZCByZXRyaWV2ZSBpdHMgYGNsYXNzYCBhbmQgYGZpdGAgcGFyYW1ldGVycyBhbmQKICAgIHRoZWlyIGRlZmF1bHQgdmFsdWVzLgogICAgCiAgICBBbHNvIHJldHVybnMgc29tZSB1c2VmdWwgbWV0YWRhdGEgdmFsdWVzIGZvciB0aGUgY2xhc3MKICAgICIiIgogICAgIyBnZXQgYSBsaXN0IG9mIGFsbCBza2xlYXJuIGVzdGltYXRvcnMKICAgIGVzdGltYXRvcnMgPSBhbGxfZXN0aW1hdG9ycygpCiAgICBkZWYgX2dldF9lc3RpbWF0b3IocGtnX2NsYXNzKToKICAgICAgICAiIiJmaW5kIGEgc3BlY2lmaWMgY2xhc3MgaW4gYSBsaXN0IG9mIHNrbGVhcm4gZXN0aW1hdG9ycyIiIgogICAgICAgIG15X2NsYXNzID0gcGtnX2NsYXNzLnNwbGl0KCcuJylbLTFdCiAgICAgICAgcmV0dXJuIGxpc3QoZmlsdGVyKGxhbWJkYSB4OiB4WzBdID09IG15X2NsYXNzLCBlc3RpbWF0b3JzKSlbMF0KCiAgICAjIGZpbmQgZXN0aW1hdG9ycyBjb3JyZXNwb25kaW5nIHRvIG15X21vZGVscyBsaXN0CiAgICBteV9lc3RpbWF0b3JzID0gW10KICAgIG15X21vZGVscyA9IFtteV9tb2RlbHNdIGlmIGlzaW5zdGFuY2UobXlfbW9kZWxzLCBzdHIpIGVsc2UgbXlfbW9kZWxzCiAgICBmb3IgbW9kZWwgaW4gbXlfbW9kZWxzOgogICAgICAgIGVzdGltYXRvcl9uYW1lLCBlc3RpbWF0b3JfY2xhc3MgPSBfZ2V0X2VzdGltYXRvcihtb2RlbCkKICAgICAgICBteV9lc3RpbWF0b3JzLmFwcGVuZCgoZXN0aW1hdG9yX25hbWUsIGVzdGltYXRvcl9jbGFzcykpCgogICAgIyBnZXQgY2xhc3MgYW5kIGZpdCBzcGVjcwogICAgZXN0aW1hdG9yX3NwZWNzID0gW10KICAgIGZvciBhbl9lc3RpbWF0b3IgaW4gbXlfZXN0aW1hdG9yczoKICAgICAgICBlc3RpbWF0b3Jfc3BlY3MuYXBwZW5kKChhbl9lc3RpbWF0b3JbMF0sICMgbW9kZWwgb25seSBuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0ZnVsbGFyZ3NwZWMoYW5fZXN0aW1hdG9yWzFdKSwgIyBjbGFzcyBwYXJhbXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRmdWxsYXJnc3BlYyhhbl9lc3RpbWF0b3JbMV0uZml0KSwgIyBmaXQgcGFyYW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5fZXN0aW1hdG9yWzFdKSkgIyBwYWNrYWdlLm1vZHVsZS5tb2RlbAoKICAgIG1vZGVsX2NvbmZpZ3MgPSBbXQoKICAgIGZvciBlc3RpbWF0b3IgaW4gZXN0aW1hdG9yX3NwZWNzOgogICAgICAgIG1vZGVsX2pzb24gPSB7Y2xhc3Nfa2V5OiB7fSwgZml0X2tleToge319CiAgICAgICAgZml0X3BhcmFtcyA9IHt9CgogICAgICAgIGZvciBpLCBrZXkgaW4gZW51bWVyYXRlKG1vZGVsX2pzb24ua2V5cygpKToKICAgICAgICAgICAgZiA9IGVzdGltYXRvcltpKzFdCiAgICAgICAgICAgIGFyZ3NfcGFpcmVkID0gW10KICAgICAgICAgICAgZGVmc19wYWlyZWQgPSBbXQoKICAgICAgICAgICAgIyByZXZlcnNlIHRoZSBhcmdzIHNpbmNlIHRoZXJlIGFyZSBmZXdlciBkZWZhdWx0cyB0aGFuIGFyZ3MKICAgICAgICAgICAgYXJncyA9IGYuYXJncwogICAgICAgICAgICBhcmdzLnJldmVyc2UoKQogICAgICAgICAgICBuX2FyZ3MgPSBsZW4oYXJncykKCiAgICAgICAgICAgIGRlZnMgPSBmLmRlZmF1bHRzCiAgICAgICAgICAgIGlmIGRlZnMgaXMgTm9uZToKICAgICAgICAgICAgICAgIGRlZnMgPSBbZGVmc10KICAgICAgICAgICAgZGVmcyA9IGxpc3QoZGVmcykKICAgICAgICAgICAgZGVmcy5yZXZlcnNlKCkKICAgICAgICAgICAgbl9kZWZzID0gbGVuKGRlZnMpCgogICAgICAgICAgICBuX3NtYWxsZXN0ID0gbWluKG5fYXJncywgbl9kZWZzKQogICAgICAgICAgICBuX2xhcmdlc3QgPSBtYXgobl9hcmdzLCBuX2RlZnMpCgogICAgICAgICAgICAjIGJ1aWxkIDIgbGlzdHMgdGhhdCBjYW4gYmUgY29uY2F0ZW5hdGVkCiAgICAgICAgICAgIGZvciBpeCBpbiByYW5nZShuX3NtYWxsZXN0KToKICAgICAgICAgICAgICAgIGlmIGFyZ3NbaXhdIGlzIG5vdCAic2VsZiI6CiAgICAgICAgICAgICAgICAgICAgYXJnc19wYWlyZWQuYXBwZW5kKGFyZ3NbaXhdKQogICAgICAgICAgICAgICAgICAgIGRlZnNfcGFpcmVkLmFwcGVuZChkZWZzW2l4XSkKCiAgICAgICAgICAgIGZvciBpeCBpbiByYW5nZShuX3NtYWxsZXN0LCBuX2xhcmdlc3QpOgogICAgICAgICAgICAgICAgaWYgaXggaXMgbm90IDAgYW5kIGFyZ3NbaXhdIGlzIG5vdCAic2VsZiI6CiAgICAgICAgICAgICAgICAgICAgYXJnc19wYWlyZWQuYXBwZW5kKGFyZ3NbaXhdKQogICAgICAgICAgICAgICAgICAgIGRlZnNfcGFpcmVkLmFwcGVuZChOb25lKQogICAgICAgICAgICAgICAjIGNvbmNhdGVuYXRlIGxpc3RzIGludG8gYXBwcm9wcmlhdGUgc3RydWN0dXJlCiAgICAgICAgICAgIG1vZGVsX2pzb25ba2V5XSA9IGRpY3QoemlwKHJldmVyc2VkKGFyZ3NfcGFpcmVkKSwgcmV2ZXJzZWQoZGVmc19wYWlyZWQpKSkKCiAgICAgICAgbW9kZWxfanNvblttZXRhX2tleV0gPSB7fQogICAgICAgIG1vZGVsX2pzb25bbWV0YV9rZXldWydza2xlYXJuX3ZlcnNpb24nXSA9IHNrdmVyc2lvbgogICAgICAgIG1vZGVsX2pzb25bbWV0YV9rZXldWydjbGFzcyddID0gJy4nLmpvaW4oW2VzdGltYXRvclszXS5fX21vZHVsZV9fLCBlc3RpbWF0b3JbMF1dKQogICAgICAgIG1vZGVsX2NvbmZpZ3MuYXBwZW5kKG1vZGVsX2pzb24pCiAgICBpZiBsZW4obW9kZWxfY29uZmlncykgPT0gMToKICAgICAgICAjIGRvIHdlIHdhbnQgdG8gbG9nIHRoaXMgbW9kaWZpZWQgbW9kZWwgYXMgYW4gYXJ0aWZhY3Q/CiAgICAgICAgcmV0dXJuIG1vZGVsX2NvbmZpZ3NbMF0KICAgIGVsc2U6CiAgICAgICAgIyBkbyB3ZSB3YW50IHRvIGxvZyB0aGlzIG1vZGlmaWVkIG1vZGVsIGFzIGFuIGFydGlmYWN0PwogICAgICAgIHJldHVybiBtb2RlbF9jb25maWdzCgpkZWYgdXBkYXRlX21vZGVsX2NvbmZpZygKICAgIGNvbmZpZzogZGljdCwKICAgIG5ld19jbGFzczogZGljdCwKICAgIG5ld19maXQ6IGRpY3QsCiAgICBjbGFzc19rZXk6IHN0ciA9ICJDTEFTUyIsCiAgICBmaXRfa2V5OiBzdHIgPSAiRklUIgopOgogICAgIiIiVXBkYXRlIG1vZGVsIGNvbmZpZyBqc29uCiAgICAKICAgIE5vdCB1c2VkIHVudGlsIHdlIHJlZmFjdG9yIGFzIHBlciB0aGUgVE9ETwogICAgICAgIAogICAgVGhpcyBmdW5jdGlvbiBpcyBlc3NlbnRpYWwgc2luY2UgdGhlcmUgYXJlIG1vZGlmaWNhdGlvbnMgaW4gY2xhc3MKICAgIGFuZCBmaXQgcGFyYW1zIHRoYXQgbXVzdCBiZSBtYWRlIChjYWxsYmFja3MgYXJlIGEgZ29vZCBleGFtcGxlLCB3aXRob3V0CiAgICB3aGljaCB0aGVyZSBpcyBubyB0cmFpbmluZyBoaXN0b3J5IGF2YWlsYWJsZSkKICAgIAogICAgVE9ETzogIGN1cnJlbnRseSBhIG1vZGVsIGNvbmZpZyBjb250YWlucyAyIGtleXMsIGJ1dCB0aGlzIHdpbGwgbGlrZWx5CiAgICBleHBhbmQgdG8gaW5jbHVkZSBvdGhlciBmdW5jdGlvbnMgYmV5b25kIGNsYXNzIGFuZCBmaXQuIFNvIG5lZWQgdG8gZXhwYW5kIAogICAgdGhpcyB0byBhIGxpc3Qgb2YgVHVwbGUoc3RyLCBkaWN0KSwgd2hlcmUgYHN0cmAgY29ycmVzcG9uZHMgdG8gYSBrZXkKICAgIGluIHRoZSBtb2RlbCBjb25maWcgYW5kIGBkaWN0YCBjb250YWlucyB0aGUgcGFyYW1zIGFuZCB0aGVpciBuZXcgdmFsdWVzLgogICAgCiAgICA6cGFyYW0gY29uZmlnOiAgICAgIG9yaWdpbmFsIG1vZGVsIGRlZmluaXRpb24gY29udGFpbmluZyAyIGtleXMsIENMQVNTIGFuZCBGSVQKICAgIDpwYXJhbSBuZXdfY2xhc3M6ICAgbmV3IGNsYXNzIGtleS12YWx1ZXMKICAgIDpwYXJhbSBuZXdfZml0OiAgICAgbmV3IGZpdCBrZXktdmFsdWVzCiAgICAiIiIKICAgIGNvbmZpZ1tjbGFzc19rZXldLnVwZGF0ZShuZXdfY2xhc3MpCiAgICBjb25maWdbZml0X2tleV0udXBkYXRlKG5ld19maXQpCiAgICAKICAgIHJldHVybiBjb25maWcKCmRlZiB0cmFpbl9tb2RlbCgKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgbW9kZWxfcGtnX2NsYXNzOiBzdHIsCiAgICBkYXRhX2tleTogVW5pb25bRGF0YUl0ZW0sIHN0cl0sCiAgICBzYW1wbGU6IGludCwKICAgIGxhYmVsX2NvbHVtbjogc3RyLAogICAgbW9kZWxfa2V5OiBzdHIgPSAibW9kZWwiLAogICAgdGVzdF9zaXplOiBmbG9hdCA9IDAuMDUsCiAgICB0cmFpbl92YWxfc3BsaXQ6IGZsb2F0ID0gMC43NSwKICAgIHRlc3Rfc2V0X2tleTogc3RyID0gInRlc3Rfc2V0IiwKICAgIHJuZzogaW50ID0gMSwKICAgIG1vZGVsc19kaXI6IHN0ciA9ICJtb2RlbHMiLAogICAgcGxvdHNfZGlyOiBzdHIgPSAicGxvdHMiLAogICAgc2NvcmVfbWV0aG9kOiBzdHIgPSAibWljcm8iLAogICAgY2xhc3NfcGFyYW1zX3VwZGF0ZXM6IFVuaW9uW0RhdGFJdGVtLCBkaWN0XSA9IHt9LAogICAgZml0X3BhcmFtc191cGRhdGVzOiBVbmlvbltEYXRhSXRlbSwgZGljdF0gPSB7fSwKKSAtPiBOb25lOgogICAgIiIidHJhaW4gYSBjbGFzc2lmaWVyLgoKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgICAgdGhlIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBtb2RlbF9wa2dfY2xhc3M6ICAgdGhlIG1vZGVsIHRvIHRyYWluLCBlLmcsICdza2xlYXJuLm5ldXJhbF9uZXR3b3Jrcy5NTFBDbGFzc2lmaWVyJwogICAgOnBhcmFtIGRhdGFfa2V5OiAgICAgICAgICAoInJhdyIpIG5hbWUgb2YgcmF3IGRhdGEgZmlsZQogICAgOnBhcmFtIHNhbXBsZTogICAgICAgICAgICBTZWxlY3RzIHRoZSBmaXJzdCBuIHJvd3MsIG9yIHNlbGVjdCBhIHNhbXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydGluZyBmcm9tIHRoZSBmaXJzdC4gSWYgbmVnYXRpdmUgPC0xLCBzZWxlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSByYW5kb20gc2FtcGxlCiAgICA6cGFyYW0gbGFiZWxfY29sdW1uOiAgICAgIGdyb3VuZC10cnV0aCAoeSkgbGFiZWxzCiAgICA6cGFyYW0gbW9kZWxfa2V5OiAgICAgICAgICgnbW9kZWwnKSBuYW1lIG9mIG1vZGVsIGluIGFydGlmYWN0IHN0b3JlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgdG8gYSBkaXJlY3RvcnkKICAgIDpwYXJhbSB0ZXN0X3NpemU6ICAgICAgICAgKDAuMDUpIHRlc3Qgc2V0IHNpemUKICAgIDpwYXJhbSB0cmFpbl92YWxfc3BsaXQ6ICAgKDAuNzUpIE9uY2UgdGhlIHRlc3Qgc2V0IGhhcyBiZWVuIHJlbW92ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWluaW5nIHNldCBnZXRzIHRoaXMgcHJvcG9ydGlvbi4KICAgIDpwYXJhbSB0ZXN0X3NldF9rZXk6ICAgICAgc3RvcmUgdGhlIHRlc3QgZGF0YSBzZXQgdW5kZXIgdGhpcyBrZXkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFydGlmYWN0IHN0b3JlCiAgICA6cGFyYW0gcm5nOiAgICAgICAgICAgICAgICgxKSBza2xlYXJuIHJuZyBzZWVkCiAgICA6cGFyYW0gbW9kZWxzX2RpcjogICAgICAgIG1vZGVscyBzdWJmb2xkZXIgb24gYXJ0aWZhY3QgcGF0aAogICAgOnBhcmFtIHBsb3RzX2RpcjogICAgICAgICBwbG90IHN1YmZvbGRlciBvbiBhcnRpZmFjdCBwYXRoCiAgICA6cGFyYW0gc2NvcmVfbWV0aG9kOiAgICAgIGZvciBtdWx0aWNsYXNzIGNsYXNzaWZpY2F0aW9uCiAgICA6cGFyYW0gY2xhc3NfdXBkYXRlczogICAgIHVwZGF0ZSB0aGVzZSBzY2lraXQtbGVhcm4gY2xhc3NpZmllciBwYXJhbXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0IGFzIGEgZGljdAogICAgOnBhcmFtIGZpdF91cGRhdGVzOiAgICAgICB1cGRhdGUgc2Npa2l0LWxlYXJuIGZpdCBwYXJhbWV0ZXJzLCBpbnB1dCBhcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIGRpY3QuCiAgICAiIiIKICAgIGJhc2VfcGF0aCA9IGNvbnRleHQuYXJ0aWZhY3RfcGF0aAogICAgb3MubWFrZWRpcnMoYmFzZV9wYXRoLCBleGlzdF9vaz1UcnVlKQogICAgb3MubWFrZWRpcnMob3MucGF0aC5qb2luKGJhc2VfcGF0aCwgcGxvdHNfZGlyKSwgZXhpc3Rfb2s9VHJ1ZSkKICAgIG9zLm1ha2VkaXJzKG9zLnBhdGguam9pbihiYXNlX3BhdGgsIG1vZGVsc19kaXIpLCBleGlzdF9vaz1UcnVlKQogICAgCiAgICAjIGV4dHJhY3QgZmlsZSBuYW1lIGZyb20gRGF0YUl0ZW0KICAgIHNyY2ZpbGVwYXRoID0gc3RyKGRhdGFfa2V5KQogICAgCiAgICAjIFRPRE86IHRoaXMgc2hvdWxkIGJlIHBhcnQgb2YgZGF0YSdzIG1ldGFkYXRhIGRlYWx0IHdpdGggaW4gYW5vdGhlciBzdGVwIGdldCBhIGRhdGEgc2V0LCBzYW1wbGUsIGV0Yy4uLgogICAgIyBnZXQgYWxsIGRhdGEgb3IgYSBzYW1wbGUKICAgIGlmIChzYW1wbGUgPT0gLTEpIG9yIChzYW1wbGUgPj0gMSk6CiAgICAgICAgIyBnZXQgYWxsIHJvd3MsIG9yIGNvbnRpZ3VvdXMgc2FtcGxlIHN0YXJ0aW5nIGF0IHJvdyAxLgogICAgICAgIHJhdyA9IHBxLnJlYWRfdGFibGUoc3JjZmlsZXBhdGgpLnRvX3BhbmRhcygpLmRyb3BuYSgpCiAgICAgICAgbGFiZWxzID0gcmF3LnBvcChsYWJlbF9jb2x1bW4pCiAgICAgICAgcmF3ID0gcmF3Lmlsb2NbOnNhbXBsZSwgOl0KICAgICAgICBsYWJlbHMgPSBsYWJlbHMuaWxvY1s6c2FtcGxlXQogICAgZWxzZToKICAgICAgICAjIGdyYWIgYSByYW5kb20gc2FtcGxlCiAgICAgICAgcmF3ID0gcHEucmVhZF90YWJsZShzcmNmaWxlcGF0aCkudG9fcGFuZGFzKCkuZHJvcG5hKCkuc2FtcGxlKHNhbXBsZSAqIC0xKQogICAgICAgIGxhYmVscyA9IHJhdy5wb3AobGFiZWxfY29sdW1uKQoKICAgICMgVE9ETzogdGhpcyBzaG91bGQgYmUgcGFydCBvZiBkYXRhJ3MgbWV0YWRhdGEgZGVhbHQgd2l0aCBpbiBhbm90aGVyIHN0ZXAKICAgIGNvbnRleHQuaGVhZGVyID0gcmF3LmNvbHVtbnMudmFsdWVzCiAgICAKICAgICMgVE9ETzogYWxsIG9mIHRoaXMgc2hvdWxkIGJlIHBhcnQgb2YgYSBzcGl0dGVyIGNvbXBvbmVudCB0aGF0IGRvZXMgY3YgdG9vLCBkZWFsdCB3aXRoIGluIGFub3RoZXIgc3RlcAogICAgIyBtYWtlIGEgaG90IGVuY29kZSBjb3B5IG9mIGxhYmVscyBiZWZvcmUgdGhlIHNwbGl0CiAgICB5YiA9IGxhYmVsX2JpbmFyaXplKGxhYmVscywgY2xhc3Nlcz1saXN0KHJhbmdlKHJhdy5zaGFwZVsxXSkpKQogICAgIyBkb3VibGUgc3BsaXQgdG8gZ2VuZXJhdGUgMyBkYXRhIHNldHM6IHRyYWluLCB2YWxpZGF0aW9uIGFuZCB0ZXN0CiAgICAjIHdpdGggeHRlc3QseXRlc3Qgc2V0IGFzaWRlCiAgICB4LCB4dGVzdCwgeSwgeXRlc3QgPSB0cmFpbl90ZXN0X3NwbGl0KG5wLmNvbmNhdGVuYXRlKFtyYXcsIHliXSwgYXhpcz0xKSwgbGFiZWxzLCB0ZXN0X3NpemU9dGVzdF9zaXplLCByYW5kb21fc3RhdGU9cm5nKQogICAgeHRyYWluLCB4dmFsaWQsIHl0cmFpbiwgeXZhbGlkID0gdHJhaW5fdGVzdF9zcGxpdCh4LCB5LCB0cmFpbl9zaXplPXRyYWluX3ZhbF9zcGxpdCwgcmFuZG9tX3N0YXRlPXJuZykKICAgICMgZXh0cmFjdCB0aGUgaG90X2VuY29kZWQgbGFiZWxzCiAgICB5dHJhaW5iID0geHRyYWluWzosIC15Yi5zaGFwZVsxXTpdLmNvcHkoKQogICAgeHRyYWluID0geHRyYWluWzosIDoteWIuc2hhcGVbMV1dLmNvcHkoKQogICAgIyBleHRyYWN0IHRoZSBob3RfZW5jb2RlZCBsYWJlbHMKICAgIHl2YWxpZGIgPSB4dmFsaWRbOiwgLXliLnNoYXBlWzFdOl0uY29weSgpCiAgICB4dmFsaWQgPSB4dmFsaWRbOiwgOi15Yi5zaGFwZVsxXV0uY29weSgpCiAgICAjIGV4dHJhY3QgdGhlIGhvdF9lbmNvZGVkIGxhYmVscwogICAgeXRlc3RiID0geHRlc3RbOiwgLXliLnNoYXBlWzFdOl0uY29weSgpCiAgICB4dGVzdCA9IHh0ZXN0WzosIDoteWIuc2hhcGVbMV1dLmNvcHkoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAjIHNldC1hc2lkZSB0ZXN0X3NldAogICAgdGVzdF9zZXQgPSBwZC5jb25jYXQoCiAgICAgICAgW3BkLkRhdGFGcmFtZShkYXRhPXh0ZXN0LCBjb2x1bW5zPWNvbnRleHQuaGVhZGVyKSwKICAgICAgICAgcGQuRGF0YUZyYW1lKGRhdGE9eXRlc3QudmFsdWVzLCBjb2x1bW5zPVtsYWJlbF9jb2x1bW5dKV0sCiAgICAgICAgYXhpcz0xLCkKICAgIGZpbGVwYXRoID0gb3MucGF0aC5qb2luKGJhc2VfcGF0aCwgdGVzdF9zZXRfa2V5ICsgIi5wcXQiKQogICAgdGVzdF9zZXQudG9fcGFycXVldChmaWxlcGF0aCwgaW5kZXg9RmFsc2UpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdCh0ZXN0X3NldF9rZXksIGxvY2FsX3BhdGg9dGVzdF9zZXRfa2V5ICsgIi5wcXQiKQoKICAgICMgbG9hZCB0aGUgbW9kZWwgY29uZmlnCiAgICBtb2RlbF9jb25maWcgPSBnZXRfbW9kZWxfY29uZmlncyhtb2RlbF9wa2dfY2xhc3MpCiAgICAjIGdldCB1cGRhdGUgcGFyYW1zIGlmIGFueQogICAgaWYgaXNpbnN0YW5jZShjbGFzc19wYXJhbXNfdXBkYXRlcywgRGF0YUl0ZW0pOgogICAgICAgIGNsYXNzX3BhcmFtc191cGRhdGVzID0ganNvbi5sb2FkcyhjbGFzc19wYXJhbXNfdXBkYXRlcy5nZXQoKSkKICAgIGlmIGlzaW5zdGFuY2UoZml0X3BhcmFtc191cGRhdGVzLCBEYXRhSXRlbSk6CiAgICAgICAgZml0X3BhcmFtc191cGRhdGVzID0ganNvbi5sb2FkcyhmaXRfcGFyYW1zX3VwZGF0ZXMuZ2V0KCkpCiAgICAjIHVwZGF0ZSB0aGUgcGFyYW1ldGVycyAgICAgICAgICAgIAogICAgIyBhZGQgZGF0YSB0byBmaXQgcGFyYW1zCiAgICBmaXRfcGFyYW1zX3VwZGF0ZXMudXBkYXRlKHsnWCc6IHh0cmFpbiwneSc6IHl0cmFpbi52YWx1ZXN9KQogICAgCiAgICBtb2RlbF9jb25maWdbIkNMQVNTIl0udXBkYXRlKGNsYXNzX3BhcmFtc191cGRhdGVzKQogICAgbW9kZWxfY29uZmlnWyJGSVQiXS51cGRhdGUoZml0X3BhcmFtc191cGRhdGVzKQogICAgCiAgICAjIGNyZWF0ZSBjbGFzcyBhbmQgZml0CiAgICBDbGFzc2lmaWVyQ2xhc3MgPSBfY3JlYXRlX2NsYXNzKG1vZGVsX2NvbmZpZ1siTUVUQSJdWyJjbGFzcyJdKQogICAgbW9kZWwgPSBDbGFzc2lmaWVyQ2xhc3MoKiptb2RlbF9jb25maWdbIkNMQVNTIl0pCiAgICBtb2RlbC5maXQoKiptb2RlbF9jb25maWdbIkZJVCJdKQoKICAgICMgc2F2ZSBtb2RlbAogICAgZmlsZXBhdGggPSBvcy5wYXRoLmpvaW4oYmFzZV9wYXRoLCBmInttb2RlbHNfZGlyfS97bW9kZWxfa2V5fS5wa2wiKQogICAgdHJ5OgogICAgICAgIGR1bXAobW9kZWwsIG9wZW4oZmlsZXBhdGgsICJ3YiIpKQogICAgICAgIGNvbnRleHQubG9nX2FydGlmYWN0KG1vZGVsX2tleSwgbG9jYWxfcGF0aD1tb2RlbHNfZGlyKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KCdTRVJJQUxJWkUgTU9ERUwgRVJST1I6Jywgc3RyKGUpKQoKICAgICMgY29tcHV0ZSB2YWxpZGF0aW9uIG1ldHJpY3MKICAgIHlwcmVkID0gbW9kZWwucHJlZGljdCh4dmFsaWQpCiAgICB5X3Njb3JlID0gbW9kZWwucHJlZGljdF9wcm9iYSh4dmFsaWQpCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYieV9zY29yZS5zaGFwZSB7eV9zY29yZS5zaGFwZX0iKQogICAgY29udGV4dC5sb2dnZXIuaW5mbyhmInl2YWxpZGIuc2hhcGUge3l2YWxpZGIuc2hhcGV9IikKICAgIGF2ZXJhZ2VfcHJlY2lzaW9uID0gbWV0cmljcy5hdmVyYWdlX3ByZWNpc2lvbl9zY29yZSh5dmFsaWRiWzosOi0xXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5X3Njb3JlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKQoKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImFjY3VyYWN5IiwgZmxvYXQobW9kZWwuc2NvcmUoeHZhbGlkLCB5dmFsaWQpKSkKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmInJvY2F1YyIsIG1ldHJpY3Mucm9jX2F1Y19zY29yZSh5dmFsaWRiLCB5X3Njb3JlKSkKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImYxX3Njb3JlIiwgbWV0cmljcy5mMV9zY29yZSh5dmFsaWQsIHlwcmVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmVyYWdlPXNjb3JlX21ldGhvZCkpCiAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJhdmdfcHJlY3Njb3JlIiwgYXZlcmFnZV9wcmVjaXNpb24pCgogICAgIyB2YWxpZGF0aW9uIHBsb3RzCiAgICAKICAgIHBsb3Rfcm9jKGNvbnRleHQsIHl2YWxpZGIsIHlfc2NvcmUpCiAgICBwbG90X2NvbmZ1c2lvbl9tYXRyaXgoY29udGV4dCwgeXZhbGlkLCB5cHJlZCwga2V5PSJjb25mdXNpb24iLCBmbXQ9InBuZyIpCgpkZWYgcGxvdF9yb2MoCiAgICBjb250ZXh0LAogICAgeV9sYWJlbHMsCiAgICB5X3Byb2JzLAogICAga2V5PSJyb2MiLAogICAgcGxvdHNfZGlyOiBzdHIgPSAicGxvdHMiLAogICAgZm10PSJwbmciLAogICAgeF9sYWJlbDogc3RyID0gImZhbHNlIHBvc2l0aXZlIHJhdGUiLAogICAgeV9sYWJlbDogc3RyID0gICJ0cnVlIHBvc2l0aXZlIHJhdGUiLAogICAgdGl0bGU6IHN0ciA9ICJyb2MgY3VydmUiLAogICAgbGVnZW5kX2xvYzogc3RyID0gImJlc3QiCik6CiAgICAiIiJwbG90IHJvYyBjdXJ2ZXMKICAgIAogICAgVE9ETzogIGFkZCBhdmVyYWdpbmcgbWV0aG9kIChhcyBzdHJpbmcpIHRoYXQgd2FzIHVzZWQgdG8gY3JlYXRlIHByb2JzLCAKICAgIGRpc3BsYXkgaW4gbGVnZW5kCiAgICAKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgIHRoZSBmdW5jdGlvbiBjb250ZXh0CiAgICA6cGFyYW0geV9sYWJlbHM6ICAgICBncm91bmQgdHJ1dGggbGFiZWxzLCBob3QgZW5jb2RlZCBmb3IgbXVsdGljbGFzcyAgCiAgICA6cGFyYW0geV9wcm9iczogICAgICBtb2RlbCBwcmVkaWN0aW9uIHByb2JhYmlsaXRpZXMKICAgIDpwYXJhbSBrZXk6ICAgICAgICAgICgicm9jIikga2V5IG9mIHBsb3QgaW4gYXJ0aWZhY3Qgc3RvcmUKICAgIDpwYXJhbSBwbG90c19kaXI6ICAgICgicGxvdHMiKSBkZXN0aW5hdGlvbiBmb2xkZXIgcmVsYXRpdmUgcGF0aCB0byBhcnRpZmFjdCBwYXRoCiAgICA6cGFyYW0gZm10OiAgICAgICAgICAoInBuZyIpIHBsb3QgZm9ybWF0CiAgICA6cGFyYW0geF9sYWJlbDogICAgICAoImZhbHNlIHBvc2l0aXZlIHJhdGUiKSB4LWF4aXMgbGFiZWxzCiAgICA6cGFyYW0geV9sYWJlbDogICAgICAoInRydWUgcG9zaXRpdmUgcmF0ZSIpIHktYXhpcyBsYWJlbHMKICAgIDpwYXJhbSB0aXRsZTogICAgICAgICgicm9jIGN1cnZlIikgdGl0bGUgb2YgcGxvdAogICAgOnBhcmFtIGxlZ2VuZF9sb2M6ICAgKCJiZXN0IikgbG9jYXRpb24gb2YgcGxvdCBsZWdlbmQKICAgICIiIgogICAgIyBkb24ndCBib3RoZXIgaWYgdGhpcyBkb2Vzbid0IHdvcmsKICAgIGFzc2VydCB5X3Byb2JzLnNoYXBlID09IHlfbGFiZWxzWzosOi0xXS5zaGFwZQogICAgCiAgICAjIGNsZWFyIG1hdHBsb3RsaWIgY3VycmVudCBmaWd1cmUKICAgIF9nY2ZfY2xlYXIocGx0KQogICAgCiAgICAjIGRhdGEgYWNjdW1tdWxhdG9ycyBieSBjbGFzcwogICAgZnByID0gZGljdCgpCiAgICB0cHIgPSBkaWN0KCkKICAgIHJvY19hdWMgPSBkaWN0KCkKICAgIAogICAgIyBkcmF3IDQ1IGRlZ3JlZSBsaW5lCiAgICBwbHQucGxvdChbMCwgMV0sIFswLCAxXSwgImstLSIpCiAgICAKICAgICMgbGFiZWxsaW5nCiAgICBwbHQueGxhYmVsKHhfbGFiZWwpCiAgICBwbHQueWxhYmVsKHlfbGFiZWwpCiAgICBwbHQudGl0bGUodGl0bGUpCiAgICBwbHQubGVnZW5kKGxvYz1sZWdlbmRfbG9jKQogICAgCiAgICAjIHNpbmdsZSBST0Mgb3IgbXV0bGlwbGUKICAgIGZvciBpIGluIHJhbmdlKHlfbGFiZWxzWzosOi0xXS5zaGFwZVsxXSk6CiAgICAgICAgZnByW2ldLCB0cHJbaV0sIF8gPSBtZXRyaWNzLnJvY19jdXJ2ZSh5X2xhYmVsc1s6LCBpXSwgeV9wcm9ic1s6LCBpXSwgcG9zX2xhYmVsPTEpCiAgICAgICAgcm9jX2F1Y1tpXSA9IG1ldHJpY3MuYXVjKGZwcltpXSwgdHByW2ldKQogICAgICAgIHBsdC5wbG90KGZwcltpXSwgdHByW2ldLCBsYWJlbD1mImNsYXNzIHtpfSIpCgogICAgZm5hbWUgPSBmIntwbG90c19kaXJ9L3trZXl9LntmbXR9IgogICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKGNvbnRleHQuYXJ0aWZhY3RfcGF0aCwgZm5hbWUpKQogICAgY29udGV4dC5sb2dfYXJ0aWZhY3QoUGxvdEFydGlmYWN0KGtleSwgYm9keT1wbHQuZ2NmKCkpLCBsb2NhbF9wYXRoPWZuYW1lKQogICAgCgpkZWYgcGxvdF9jb25mdXNpb25fbWF0cml4KAogICAgY29udGV4dDogTUxDbGllbnRDdHgsCiAgICBsYWJlbHMsCiAgICBwcmVkaWN0aW9ucywKICAgIGtleTogc3RyID0gImNvbmZ1c2lvbl9tYXRyaXgiLAogICAgcGxvdHNfZGlyOiBzdHIgPSAicGxvdHMiLAogICAgY29sb3JtYXA6IHN0ciA9ICJCbHVlcyIsCiAgICBmbXQ6IHN0ciA9ICJwbmciLAogICAgc2FtcGxlX3dlaWdodD1Ob25lCik6CiAgICAiIiJDcmVhdGUgYSBjb25mdXNpb24gbWF0cml4LgogICAgUGxvdCBhbmQgc2F2ZSBhIGNvbmZ1c2lvbiBtYXRyaXggdXNpbmcgdGVzdCBkYXRhIGZyb20gYQogICAgbW9kZWxsaW5lIHN0ZXAuCiAgICAKICAgIFNlZSBodHRwczovL3NjaWtpdC1sZWFybi5vcmcvc3RhYmxlL21vZHVsZXMvZ2VuZXJhdGVkL3NrbGVhcm4ubWV0cmljcy5jb25mdXNpb25fbWF0cml4Lmh0bWwKICAgIAogICAgVE9ETzogZml4IGxhYmVsIGFsaWdubWVudAogICAgVE9ETzogY29uc2lkZXIgdXNpbmcgYW5vdGhlciBwYWNrYWdlZCB2ZXJzaW9uCiAgICBUT0RPOiByZWZhY3RvciB0byB0YWtlIHBhcmFtcyBkaWN0IGZvciBwbG90IG9wdGlvbnMKCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICBmdW5jdGlvbiBjb250ZXh0CiAgICA6cGFyYW0gbGFiZWxzOiAgICAgICAgICB2YWxpZGF0aW9uIGRhdGEgZ3JvdW5kLXRydXRoIGxhYmVscwogICAgOnBhcmFtIHByZWRpY3Rpb25zOiAgICAgdmFsaWRhdGlvbiBkYXRhIHByZWRpY3Rpb25zCiAgICA6cGFyYW0ga2V5OiAgICAgICAgICAgICBzdHIKICAgIDpwYXJhbSBwbG90c19kaXI6ICAgICAgIHJlbGF0aXZlIHBhdGggb2YgcGxvdHMgaW4gYXJ0aWZhY3Qgc3RvcmUKICAgIDpwYXJhbSBjb2xvcm1hcDogICAgICAgIGNvbG91cm1hcCBmb3IgY29uZnVzaW9uIG1hdHJpeAogICAgOnBhcmFtIGZtdDogICAgICAgICAgICAgcGxvdCBmb3JtYXQKICAgIDpwYXJhbSBzYW1wbGVfd2VpZ2h0OiAgIHNhbXBsZSB3ZWlnaHRzCiAgICAiIiIKICAgIF9nY2ZfY2xlYXIocGx0KQogICAgCiAgICBjbSA9IG1ldHJpY3MuY29uZnVzaW9uX21hdHJpeChsYWJlbHMsIHByZWRpY3Rpb25zLCBzYW1wbGVfd2VpZ2h0PU5vbmUpCiAgICBzbnMuaGVhdG1hcChjbSwgYW5ub3Q9VHJ1ZSwgY21hcD1jb2xvcm1hcCwgc3F1YXJlPVRydWUpCgogICAgZmlnID0gcGx0LmdjZigpCiAgICBmbmFtZSA9IGYie3Bsb3RzX2Rpcn0ve2tleX0ue2ZtdH0iCiAgICBmaWcuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oY29udGV4dC5hcnRpZmFjdF9wYXRoLCBmbmFtZSkpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChQbG90QXJ0aWZhY3Qoa2V5LCBib2R5PWZpZyksIGxvY2FsX3BhdGg9Zm5hbWUpCg==
    commands: []
    code_origin: https://github.com/mlrun/functions.git#958fb8f6ea3c6a3231eb153b424e9984e8dba0c1:sklearn_classifier/sklearn_classifier.py
