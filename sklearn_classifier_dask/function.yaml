kind: job
metadata:
  name: sklearn-classifier-dask
  tag: ''
  hash: 9eda6a55463782ab74a8661bf0cd0fa8042c0069
  project: ''
  labels:
    author: yjb
    framework: sklearn
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: Train a sklearn classifier with Dask
      parameters:
      - name: context
        doc: Function context.
        default: ''
      - name: dataset
        type: DataItem
        doc: Raw data file.
        default: ''
      - name: model_pkg_class
        type: str
        doc: Model to train, e.g, "sklearn.ensemble.RandomForestClassifier",  or json
          model config.
        default: ''
      - name: label_column
        type: str
        doc: (label) Ground-truth y labels.
        default: label
      - name: train_validation_size
        type: float
        doc: (0.75) Train validation set proportion out of the full dataset.
        default: 0.75
      - name: sample
        type: float
        doc: (1.0) Select sample from dataset (n-rows/% of total), randomzie rows
          as default.
        default: 1.0
      - name: models_dest
        type: str
        doc: (models) Models subfolder on artifact path.
        default: models
      - name: test_set_key
        type: str
        doc: (test_set) Mlrun db key of held out data in artifact store.
        default: test_set
      - name: plots_dest
        type: str
        doc: (plots) Plot subfolder on artifact path.
        default: plots
      - name: dask_function
        type: str
        doc: dask function url (db://..)
        default: null
      - name: dask_client
        doc: dask client object
        default: null
      - name: file_ext
        type: str
        doc: (parquet) format for test_set_key hold out data
        default: parquet
      - name: random_state
        type: int
        doc: (42) sklearn seed
        default: 42
      outputs:
      - default: ''
      lineno: 29
  description: train any classifier using scikit-learn's API over Dask
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/daniels290813/functions.git#55a79c32be5d233cc11efcf40cd3edbe309bfdef:/home/kali/functions/sklearn_classifier_dask/sklearn-classifier-dask.py
  affinity: null
verbose: false
