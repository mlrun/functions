kind: job
metadata:
  name: xgb-trainer
  tag: ''
  hash: 77f6e110dfd8a829824aecf57f67d221de30b0d2
  project: ''
  labels:
    author: yjb
    framework: xgboost
  categories:
  - training
  - ml
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: train_model
  entry_points:
    plot_confusion_matrix:
      name: plot_confusion_matrix
      doc: prints and plots the confusion matrix.
      parameters:
      - name: labels
      - name: predictions
      - name: classes
      - name: normalize
        default: all
      - name: title
        default: Confusion matrix
      - name: cmap
      outputs: []
      lineno: 198
    plot_roc:
      name: plot_roc
      doc: "plot roc curves\n\nTODO:  add averaging method (as string) that was used\
        \ to create probs, \ndisplay in legend"
      parameters:
      - name: context
        doc: the function context
      - name: y_labels
        doc: 'ground truth labels, hot encoded for multiclass  '
      - name: y_probs
        doc: model prediction probabilities
      - name: fpr_label
        type: str
        doc: ("false positive rate") x-axis labels
        default: false positive rate
      - name: tpr_label
        type: str
        doc: ("true positive rate") y-axis labels
        default: true positive rate
      - name: title
        type: str
        doc: ("roc curve") title of plot
        default: roc curve
      - name: legend_loc
        type: str
        doc: ("best") location of plot legend
        default: best
      outputs: []
      lineno: 236
    gen_proba:
      name: gen_proba
      doc: generate predictions and validation stats
      parameters:
      - name: context
        doc: the function execution context
      - name: feats
        doc: 'validation features array '
      - name: labels
        doc: validation ground-truth labels
      - name: model
        doc: estimated model
      - name: score_method
      - name: plots_dest
        doc: destination subfolder for plot artifacts
      - name: ntree_limit
        doc: (None) limit no. trees used in prediction
      - name: validate_features
        doc: (True) ensure consistent feature names  between model and input data
        default: true
      - name: base_margin
        doc: (None) undefined
      outputs: []
      lineno: 290
    train_model:
      name: train_model
      doc: train an xgboost model.
      parameters:
      - name: context
        doc: the function context
      - name: model_type
        type: str
        doc: the model type to train, 'classifier', 'regressor'...
      - name: dataset
        type: DataItem
        doc: ("data") name of raw data file
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: labels
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7f71db965550>
      - name: test_size
        type: float
        doc: (0.05) test set size
        default: 0.05
      - name: valid_size
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: random_state
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: model_filename
        type: str
        doc: model file filename, points to a directory
        default: xgb-model
      - name: models_dest
        type: str
        doc: models subfolder on artifact path
      - name: plots_dest
        type: str
        doc: plot subfolder on artifact path
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: parquet
      - name: model_pkg_file
        type: str
        doc: json model config file
      outputs: []
      lineno: 342
  description: train any classifier using scikit-learn's API
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlciBvbiAyMDIwLTA1LTAyIDE5OjUwCgppbXBvcnQgd2FybmluZ3MKd2FybmluZ3Muc2ltcGxlZmlsdGVyKGFjdGlvbj0iaWdub3JlIiwgY2F0ZWdvcnk9RnV0dXJlV2FybmluZykKCmZyb20gbWxydW4uZGF0YXN0b3JlIGltcG9ydCBEYXRhSXRlbQoKZGVmIF9nZW5feGdiX21vZGVsKG1vZGVsX3R5cGU6IHN0ciwgeGdiX3BhcmFtczogZGljdCk6CiAgICAiIiJnZW5lcmF0ZSBhbiB4Z2Jvb3N0IG1vZGVsCiAgICAKICAgIE11bHRpcGxlIG1vZGVsIHR5cGVzIHRoYXQgY2FuIGJlIGVzdGltYXRlZCB1c2luZwogICAgdGhlIFhHQm9vc3QgU2Npa2l0LUxlYXJuIEFQSQogICAgCiAgICA6cGFyYW0gbW9kZWxfdHlwZTogb25lIG9mICJjbGFzc2lmaWVyIiwgInJlZ3Jlc3NvciIsCiAgICAgICAgICAgICAgICAgICAgICAgInJhbmtlciIsICJyZl9jbGFzc2lmaWVyIiwgb3IKICAgICAgICAgICAgICAgICAgICAgICJyZl9yZWdyZXNzb3IiCiAgICA6cGFyYW0geGdiX3BhcmFtczogcGFyYW1ldGVycyBwYXNzZWQgdGhyb3VnaCB0aGUgCiAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZXhlY3V0aW9uIGNvbnRleHQKICAgICIiIgogICAgZnJvbSBqc29uIGltcG9ydCBsb2FkCiAgICBmcm9tIG1scnVuLm1sdXRpbHMgaW1wb3J0IGdldF9jbGFzc19maXQsIGNyZWF0ZV9jbGFzcwoKICAgIG10eXBlcyA9IHsKICAgICAgICAiY2xhc3NpZmllciIgICA6ICJ4Z2Jvb3N0LlhHQkNsYXNzaWZpZXIiLAogICAgICAgICJyZWdyZXNzb3IiICAgIDogInhnYm9vc3QuWEdCUmVncmVzc29yIiwKICAgICAgICAicmFua2VyIiAgICAgICA6ICJ4Z2Jvb3N0LlhHQlJhbmtlciIsCiAgICAgICAgInJmX2NsYXNzaWZpZXIiOiAieGdib29zdC5YR0JSRkNsYXNzaWZpZXIiLAogICAgICAgICJyZl9yZWdyZXNzb3IiIDogInhnYm9vc3QuWEdCUkZSZWdyZXNzb3IiCiAgICB9CiAgICBpZiBtb2RlbF90eXBlIG5vdCBpbiBtdHlwZXMua2V5cygpOgogICAgICAgIHJhaXNlIEV4Y2VwdGlvbigidW5yZWNvZ25pemVkIG1vZGVsIHR5cGVzLCBzZWUgaGVscCBkb2N1bWVudGF0aW9uIikKICAgIAogICAgbW9kZWxfY29uZmlnID0gZ2V0X2NsYXNzX2ZpdChtdHlwZXNbbW9kZWxfdHlwZV0pCgogICAgZm9yIGssIHYgaW4geGdiX3BhcmFtczoKICAgICAgICBpZiBrLnN0YXJ0c3dpdGgoIkNMQVNTXyIpOgogICAgICAgICAgICBtb2RlbF9jb25maWdbIkNMQVNTIl1ba1s2Ol1dID0gdgogICAgICAgIGlmIGsuc3RhcnRzd2l0aCgiRklUXyIpOgogICAgICAgICAgICBtb2RlbF9jb25maWdbIkZJVCJdW2tbNDpdXSA9IHYKCiAgICBDbGFzc2lmaWVyQ2xhc3MgPSBjcmVhdGVfY2xhc3MobW9kZWxfY29uZmlnWyJNRVRBIl1bImNsYXNzIl0pCiAgICBtb2RlbCA9IENsYXNzaWZpZXJDbGFzcygqKm1vZGVsX2NvbmZpZ1siQ0xBU1MiXSkKCiAgICByZXR1cm4gbW9kZWwsIG1vZGVsX2NvbmZpZwoKZGVmIF9nZXRfc2FtcGxlKHNyYzpEYXRhSXRlbSwgc2FtcGxlOiBpbnQsIGxhYmVsOiBzdHIsIHJlYWRlcj1Ob25lKToKICAgICIiImdlbmVyYXRlIGRhdGEgc2FtcGxlIHRvIGJlIHNwbGl0IChjYW5kaWRhdGUgZm9yIG1scnVuKQogICAgIAogICAgUmV0dXJucyBmZWF0dXJlcyBtYXRyaXggYW5kIGhlYWRlciAoeCksIGFuZCBsYWJlbHMgKHkpCiAgICA6cGFyYW0gc3JjOiAgICBmdWxsIHBhdGggYW5kIGZpbGVuYW1lIG9mIGRhdGEgYXJ0aWZhY3QKICAgIDpwYXJhbSBzYW1wbGU6IHNhbXBsZSBzaXplIGZyb20gZGF0YSBzb3VyY2UsIHVzZSBuZWdhdGl2ZSAKICAgICAgICAgICAgICAgICAgIGludGVnZXJzIHRvIHNhbXBsZSByYW5kb21seSwgcG9zaXRpdmUgdG8KICAgICAgICAgICAgICAgICAgIHNhbXBsZSBjb25zZWN1dGl2ZWx5IGZyb20gdGhlIGZpcnN0IHJvdwogICAgOnBhcmFtIGxhYmVsOiAgbGFiZWwgY29sdW1uIHRpdGxlCiAgICA6cGFyYW0gcmVhZGVyOiBwYW5kYXMgdHlwZSByZWFkZXIgKHJlYWRfY3N2LCByZWFkX3BhcnF1ZXQsIC4uLikgcmV0dXJuaW5nCiAgICAgICAgICAgICAgICAgICBhIHBhbmRhcyBkYXRhZnJhbWUsIGFuZCB3aXRoIGEgYGRyb3BuYWAgYXR0cmlidXRlCiAgICAiIiIKICAgIGltcG9ydCBwYW5kYXMgYXMgcGQKICAgIHRhYmxlID0gc3JjLmFzX2RmKCkKICAgIAogICAgaWYgKHNhbXBsZSA9PSAtMSkgb3IgKHNhbXBsZSA+PSAxKToKICAgICAgICByYXcgPSB0YWJsZS5kcm9wbmEoKQogICAgICAgIGxhYmVscyA9IHJhdy5wb3AobGFiZWwpCiAgICAgICAgcmF3ID0gcmF3Lmlsb2NbOnNhbXBsZSwgOl0KICAgICAgICBsYWJlbHMgPSBsYWJlbHMuaWxvY1s6c2FtcGxlXQogICAgZWxzZToKICAgICAgICByYXcgPSB0YWJsZS5kcm9wbmEoKS5zYW1wbGUoc2FtcGxlICogLTEpCiAgICAgICAgbGFiZWxzID0gcmF3LnBvcChsYWJlbCkKCiAgICByZXR1cm4gcmF3LCBsYWJlbHMsIHJhdy5jb2x1bW5zLnZhbHVlcwoKZGVmIF9nZXRfc3BsaXRzKAogICAgcmF3LCAKICAgIGxhYmVscywgCiAgICBuX3dheXM6IGludCA9IDMsCiAgICB0ZXN0X3NpemU6IGZsb2F0ID0gMC4xNSwKICAgIHZhbGlkX3NpemU6IGZsb2F0ID0gMC4zMCwKICAgIGxhYmVsX25hbWVzOiBsaXN0ID0gWyJsYWJlbHMiXSwKICAgIHJhbmRvbV9zdGF0ZTogaW50ID0gMQopOgogICAgIiIiZ2VuZXJhdGUgdHJhaW4gYW5kIHRlc3Qgc2V0cyAoY2FuZGlkYXRlIGZvciBtbHJ1bikKCiAgICBjcm9zcyB2YWxpZGF0aW9uOgogICAgMS4gY3V0IG91dCBhIHRlc3Qgc2V0CiAgICAyYS4gdXNlIHRoZSB0cmFpbmluZyBzZXQgaW4gYSBjcm9zcyB2YWxpZGF0aW9uIHNjaGVtZSwgb3IKICAgIDJiLiBtYWtlIGFub3RoZXIgc3BsaXQgdG8gZ2VuZXJhdGUgYSB2YWxpZGF0aW9uIHNldAogICAgCiAgICAyIHBhcnRzIChuX3dheXM9Mik6IHRyYWluIGFuZCB0ZXN0IHNldCBvbmx5CiAgICAzIHBhcnRzIChuX3dheXM9Myk6IHRyYWluLCB2YWxpZGF0aW9uIGFuZCB0ZXN0IHNldAogICAgNCBwYXJ0cyAobl93YXlzPTQpOiBuX3dheXM9MyArIGEgaGVsZC1vdXQgcHJvYmFiaWxpdHkgY2FsaWJyYXRpb24gc2V0CiAgICAKICAgIDpwYXJhbSByYXc6ICAgICAgICAgICAgZGF0YWZyYW1lIG9yIG51bXB5IGFycmF5IG9mIHJhdyBmZWF0dXJlcwogICAgOnBhcmFtIGxhYmVsczogICAgICAgICBkYXRhZnJhbWUgb3IgbnVtcHkgYXJyYXkgb2YgcmF3IGxhYmVscwogICAgOnBhcmFtIG5fd2F5czogICAgICAgICAoMykgc3BsaXQgZGF0YSBpbnRvIDIsIDMsIG9yIDQgcGFydHMKICAgIDpwYXJhbSB0ZXN0X3NpemU6ICAgICAgcHJvcG9ydGlvbiBvZiByYXcgZGF0YSB0byBzZXQgYXNpZCBhcyB0ZXN0IGRhdGEKICAgIDpwYXJhbSB2YWxpZF9zaXplOiAgICAgcHJvcG9ydGlvbiBvZiByZW1haW5pbmcgZGF0YSB0byBiZSBzZXQgYXMgdmFsaWRhdGlvbgogICAgOnBhcmFtIGxhYmVsX25hbWVzOiAgICAgICAgIGxhYmVsIG5hbWVzCiAgICA6cGFyYW0gcmFuZG9tX3N0YXRlOiAgICgxKSByYW5kb20gbnVtYmVyIHNlZWQKICAgICIiIgogICAgaW1wb3J0IHBhbmRhcyBhcyBwZAogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBmcm9tIHNrbGVhcm4ubW9kZWxfc2VsZWN0aW9uIGltcG9ydCB0cmFpbl90ZXN0X3NwbGl0CiAgICAKICAgIGlmIGlzaW5zdGFuY2UocmF3LCBucC5uZGFycmF5KToKICAgICAgICBpZiBsYWJlbHMubmRpbT09MToKICAgICAgICAgICAgbGFiZWxzPWxhYmVscy5yZXNoYXBlKC0xLDEpCiAgICAgICAgeHkgPSBucC5jb25jYXRlbmF0ZShbcmF3LCBsYWJlbHNdLCBheGlzPTEpCiAgICBlbHNlOgogICAgICAgIGlmIGlzaW5zdGFuY2UobGFiZWxzLCBwZC5TZXJpZXMpOgogICAgICAgICAgICBsYWJlbHMgPSBwZC5EYXRhRnJhbWUoZGF0YT1sYWJlbHMsIGNvbHVtbnM9bGFiZWxfbmFtZXMpCiAgICAgICAgeHkgPSBwZC5jb25jYXQoW3JhdywgbGFiZWxzXSwgYXhpcz0xKQogICAgICAgIAogICAgeCwgeHRlLCB5LCB5dGUgPSB0cmFpbl90ZXN0X3NwbGl0KHh5LCBsYWJlbHMsIHRlc3Rfc2l6ZT10ZXN0X3NpemUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tX3N0YXRlPXJhbmRvbV9zdGF0ZSkKICAgIGlmIG5fd2F5cz09MjoKICAgICAgICByZXR1cm4gKHgsIHkpLCAoeHRlLCB5dGUpLCBOb25lLCBOb25lCiAgICBlbGlmIG5fd2F5cz09MzoKICAgICAgICB4dHIsIHh2YSwgeXRyLCB5dmEgPSB0cmFpbl90ZXN0X3NwbGl0KHgsIHksdHJhaW5fc2l6ZT12YWxpZF9zaXplLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tX3N0YXRlPXJhbmRvbV9zdGF0ZSkKICAgICAgICByZXR1cm4gKHh0ciwgeXRyKSwgKHh2YSwgeXZhKSwgKHh0ZSwgeXRlKSwgTm9uZQogICAgZWxpZiBuX3dheXM9PTQ6CiAgICAgICAgeHQsIHh2YSwgeXQsIHl2YSA9IHRyYWluX3Rlc3Rfc3BsaXQoeCwgeSx0cmFpbl9zaXplPXZhbGlkX3NpemUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kb21fc3RhdGU9cmFuZG9tX3N0YXRlKQogICAgICAgIHh0ciwgeGNhbCwgeXRyLCB5Y2FsID0gdHJhaW5fdGVzdF9zcGxpdCh4dCwgeXQsIHRyYWluX3NpemU9MC44LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tX3N0YXRlPXJhbmRvbV9zdGF0ZSkKICAgICAgICByZXR1cm4gKHh0ciwgeXRyKSwgKHh2YSwgeXZhKSwgKHh0ZSwgeXRlKSwgKHhjYWwsIHljYWwpCiAgICBlbHNlOgogICAgICAgIHJhaXNlIEV4Y2VwdGlvbigibl93YXlzIG11c3QgYmUgaW4gdGhlIHJhbmdlIFsyLDRdIikKCmRlZiBfc2F2ZV90ZXN0X3NldCgKICAgIGNvbnRleHQsIAogICAgeHRlc3QsIAogICAgeXRlc3QsIAogICAgaGVhZGVyOiBsaXN0LCAKICAgIGxhYmVsOiBzdHIgPSAibGFiZWxzIiwgCiAgICBmaWxlX2V4dDogc3RyID0gInBhcnF1ZXQiLCAKICAgIGluZGV4OiBib29sID0gRmFsc2UsCiAgICBkZWJ1ZzogYm9vbCA9IEZhbHNlCik6CiAgICAiIiJsb2cgYSBoZWxkIG91dCB0ZXN0IHNldAoKICAgIDpwYXJhbSBjb250ZXh0OiAgICB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uIGNvbnRleHQKICAgIDpwYXJhbSB4dGVzdDogICAgICB0ZXN0IGZlYXR1cmVzLCBhcyBucC5uZGFycmF5IG91dHB1dCBmcm9tIGBnZXRfc3BsaXRzYAogICAgOnBhcmFtIHl0ZXN0OiAgICAgIHRlc3QgbGFiZWxzLCBhcyBucC5uZGFycmF5IG91dHB1dCBmcm9tIGBnZXRfc3BsaXRzYAogICAgOnBhcmFtIGhlYWRlcjogICAgIChbXSlmZWF0dXJlcyBoZWFkZXIgaWYgcmVxdWlyZWQKICAgIDpwYXJhbSBsYWJlbDogICAgICAoImxhYmVscyIpIG5hbWUgb2YgbGFiZWwgY29sdW1uCiAgICA6cGFyYW0gZmlsZV9leHQ6ICAgZm9ybWF0IG9mIHRlc3Qgc2V0IGZpbGUKICAgIDpwYXJhbSBpbmRleDogICAgICBwcmVzZXJ2ZSBpbmRleCBjb2x1bW4KICAgIDpwYXJhbSBkZWJ1ZzogICAgICAoRmFsc2UpCiAgICAiIiIKICAgIGltcG9ydCBwYW5kYXMgYXMgcGQKICAgIGZyb20gbWxydW4gaW1wb3J0IG1sY29uZgogICAgCiAgICB0ZXN0X3NldCA9IHBkLmNvbmNhdCgKICAgICAgICBbcGQuRGF0YUZyYW1lKGRhdGE9eHRlc3QsIGNvbHVtbnM9aGVhZGVyKSwKICAgICAgICAgcGQuRGF0YUZyYW1lKGRhdGE9eXRlc3QudmFsdWVzLCBjb2x1bW5zPVtsYWJlbF0pXSwKICAgICAgICBheGlzPTEsKQogICAgCiAgICBpZiBkZWJ1ZzoKICAgICAgICB0ZXN0X3NldC50b19wYXJxdWV0KG1sY29uZi5hcnRpZmFjdF9wYXRoKycvdGVzdF9zZXQtZGV2LnBhcnF1ZXQnKQogICAgICAgIAogICAgY29udGV4dC5sb2dfZGF0YXNldCgidGVzdF9zZXQiLCBkZj10ZXN0X3NldCwgZm9ybWF0PWZpbGVfZXh0LCBpbmRleD1pbmRleCkKCmRlZiBfZHVtcF94Z2JfbW9kZWwoCiAgICBjb250ZXh0LCAKICAgIG1vZGVsLAogICAgZHVtcF90eXBlOiBzdHIsCiAgICBkZXN0X2ZvbGRlcjogc3RyLAogICAgZGVzdF9uYW1lOiBzdHIKKToKICAgICIiInNlcmlhbGl6ZS9sb2cgbW9kZWwKICAgIAogICAgWEdCb29zdCBtb2RlbCBjYW4gYmUgc2F2ZSBpbiAzIGRpZmZlcmVudCB3YXlzOgogICAgMS4gcGlja2xlIHRoZSBpbnRlcm5hbCBfYm9vc3RlciBvYmplY3QsIGluc2lkZSB0aGUgbW9kZWwKICAgIDIuIHVzaW5nIG1vZGVsLnNhdmVfbW9kZWwoImZuLmJpbiIpIHVzaW5nIGEgbGVnYWN5IGJpbmFyeSB4Z2IgZm9ybWF0CiAgICAyLiB1c2luZyBtb2RlbC5zYXZlX21vZGVsKCJmbi5qc29uIikgdXNpbmcgYSBwb3J0YWJsZSBqc29uIGZvcm1hdAogICAgCiAgICA6cGFyYW0gY29udGV4dDogICAgIHRoZSBmdW5jdGlvbiJzIGV4ZWN1dGlvbiBjb250ZXh0CiAgICA6cGFyYW0gbW9kZWw6ICAgICAgIHRoZSBmaXR0ZWQgeGdib29zdCBtb2RlbAogICAgOnBhcmFtIGR1bXBfdHlwZTogICAicGlja2xlIiBsZWdhY3kiLCBvciAianNvbiIsIAogICAgOnBhcmFtIGRlc3RfZm9sZGVyOiBwYXRoIGZvciBzZXJpYWxpemVkIG1vZGVsIAogICAgOnBhcmFtIGRlc3RfbmFtZTogICBuYW1lIGZvciBzZXJpYWxpemVkIG1vZGVsIGZpbGUKICAgICIiIgogICAgZnJvbSBjbG91ZHBpY2tsZSBpbXBvcnQgZHVtcHMsIGR1bXAKICAgIGltcG9ydCBvcwogICAgCiAgICBvcy5tYWtlZGlycyhkZXN0X2ZvbGRlciwgZXhpc3Rfb2s9VHJ1ZSkKICAgIGlmIGR1bXBfdHlwZSA9PSAicGlja2xlIjoKICAgICAgICBmaWxlbmFtZSA9IGYie2Rlc3RfbmFtZX0ucGtsIgogICAgZWxzZToKICAgICAgICBmaWxlbmFtZSA9IGYie2Rlc3RfbmFtZX0uanNvbiIKICAgIG1vZGVsLnNhdmVfbW9kZWwoZiJ7ZGVzdF9mb2xkZXJ9L3tmaWxlbmFtZX0iKQoKCiAgICBjb250ZXh0LmxvZ19tb2RlbCgieGdiLW1vZGVsIiwgbW9kZWxfZGlyPWRlc3RfZm9sZGVyLAogICAgICAgICAgICAgICAgICAgICAgbW9kZWxfZmlsZT1maWxlbmFtZSwgbWV0cmljcz1jb250ZXh0LnJlc3VsdHMpCgpkZWYgcGxvdF9jb25mdXNpb25fbWF0cml4KAogICAgbGFiZWxzLAogICAgcHJlZGljdGlvbnMsCiAgICBjbGFzc2VzLAogICAgbm9ybWFsaXplPSJhbGwiLAogICAgdGl0bGU9J0NvbmZ1c2lvbiBtYXRyaXgnLAogICAgY21hcD1Ob25lCik6CiAgICAiIiJwcmludHMgYW5kIHBsb3RzIHRoZSBjb25mdXNpb24gbWF0cml4LgogICAgCiAgICAiIiIKICAgIGltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQKICAgIGZyb20gc2tsZWFybiBpbXBvcnQgbWV0cmljcwogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBpbXBvcnQgaXRlcnRvb2xzCiAgICAKICAgIGlmIG5vdCBjbWFwOgogICAgICAgIGNtYXAgPSBwbHQuY20uQmx1ZXMKCiAgICBjbSA9IG1ldHJpY3MuY29uZnVzaW9uX21hdHJpeChsYWJlbHMsIHByZWRpY3Rpb25zLCBub3JtYWxpemU9bm9ybWFsaXplKQogICAgCiAgICBwbHQuaW1zaG93KGNtLCBpbnRlcnBvbGF0aW9uPSduZWFyZXN0JywgY21hcD1jbWFwKQogICAgcGx0LnRpdGxlKHRpdGxlKQogICAgcGx0LmNvbG9yYmFyKCkKICAgIHRpY2tfbWFya3MgPSBucC5hcmFuZ2UobGVuKGNsYXNzZXMpKQogICAgcGx0Lnh0aWNrcyh0aWNrX21hcmtzLCBjbGFzc2VzLCByb3RhdGlvbj00NSkKICAgIHBsdC55dGlja3ModGlja19tYXJrcywgY2xhc3NlcykKCiAgICB0aHJlc2ggPSBjbS5tYXgoKSAvIDIuCiAgICBmb3IgaSwgaiBpbiBpdGVydG9vbHMucHJvZHVjdChyYW5nZShjbS5zaGFwZVswXSksIHJhbmdlKGNtLnNoYXBlWzFdKSk6CiAgICAgICAgcGx0LnRleHQoaiwgaSwgcm91bmQoY21baSwgal0sIDIpLAogICAgICAgICAgICAgICAgIGhvcml6b250YWxhbGlnbm1lbnQ9ImNlbnRlciIsCiAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIiBpZiBjbVtpLCBqXSA+IHRocmVzaCBlbHNlICJibGFjayIpCgogICAgcGx0LnlsYWJlbCgnVHJ1ZSBsYWJlbCcpCiAgICBwbHQueGxhYmVsKCdQcmVkaWN0ZWQgbGFiZWwnKQogICAgcmV0dXJuIHBsdC5nY2YoKQoKZGVmIHBsb3Rfcm9jKAogICAgY29udGV4dCwKICAgIHlfbGFiZWxzLAogICAgeV9wcm9icywKICAgIGZwcl9sYWJlbDogc3RyID0gImZhbHNlIHBvc2l0aXZlIHJhdGUiLAogICAgdHByX2xhYmVsOiBzdHIgPSAidHJ1ZSBwb3NpdGl2ZSByYXRlIiwKICAgIHRpdGxlOiBzdHIgPSAicm9jIGN1cnZlIiwKICAgIGxlZ2VuZF9sb2M6IHN0ciA9ICJiZXN0IiwKKToKICAgICIiInBsb3Qgcm9jIGN1cnZlcwoKICAgIFRPRE86ICBhZGQgYXZlcmFnaW5nIG1ldGhvZCAoYXMgc3RyaW5nKSB0aGF0IHdhcyB1c2VkIHRvIGNyZWF0ZSBwcm9icywgCiAgICBkaXNwbGF5IGluIGxlZ2VuZAoKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgIHRoZSBmdW5jdGlvbiBjb250ZXh0CiAgICA6cGFyYW0geV9sYWJlbHM6ICAgICBncm91bmQgdHJ1dGggbGFiZWxzLCBob3QgZW5jb2RlZCBmb3IgbXVsdGljbGFzcyAgCiAgICA6cGFyYW0geV9wcm9iczogICAgICBtb2RlbCBwcmVkaWN0aW9uIHByb2JhYmlsaXRpZXMKICAgIDpwYXJhbSBrZXk6ICAgICAgICAgICgicm9jIikga2V5IG9mIHBsb3QgaW4gYXJ0aWZhY3Qgc3RvcmUKICAgIDpwYXJhbSBwbG90c19kaXI6ICAgICgicGxvdHMiKSBkZXN0aW5hdGlvbiBmb2xkZXIgcmVsYXRpdmUgcGF0aCB0byBhcnRpZmFjdCBwYXRoCiAgICA6cGFyYW0gZm10OiAgICAgICAgICAoInBuZyIpIHBsb3QgZm9ybWF0CiAgICA6cGFyYW0gZnByX2xhYmVsOiAgICAoImZhbHNlIHBvc2l0aXZlIHJhdGUiKSB4LWF4aXMgbGFiZWxzCiAgICA6cGFyYW0gdHByX2xhYmVsOiAgICAoInRydWUgcG9zaXRpdmUgcmF0ZSIpIHktYXhpcyBsYWJlbHMKICAgIDpwYXJhbSB0aXRsZTogICAgICAgICgicm9jIGN1cnZlIikgdGl0bGUgb2YgcGxvdAogICAgOnBhcmFtIGxlZ2VuZF9sb2M6ICAgKCJiZXN0IikgbG9jYXRpb24gb2YgcGxvdCBsZWdlbmQKICAgICIiIgogICAgZnJvbSBza2xlYXJuIGltcG9ydCBtZXRyaWNzCiAgICBpbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CiAgICBmcm9tIG1scnVuLm1sdXRpbHMgaW1wb3J0IGdjZl9jbGVhcgogICAgCiAgICBnY2ZfY2xlYXIocGx0KQoKICAgIHBsdC5wbG90KFswLCAxXSwgWzAsIDFdLCAiay0tIikKCiAgICBwbHQueGxhYmVsKGZwcl9sYWJlbCkKICAgIHBsdC55bGFiZWwodHByX2xhYmVsKQogICAgcGx0LnRpdGxlKHRpdGxlKQogICAgcGx0LmxlZ2VuZChsb2M9bGVnZW5kX2xvYykKCiAgICBpZiB5X2xhYmVscy5uZGltID4gMjoKICAgICAgICBmcHIgPSBkaWN0KCkKICAgICAgICB0cHIgPSBkaWN0KCkKICAgICAgICByb2NfYXVjID0gZGljdCgpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoeV9sYWJlbHNbOiwgOi0xXS5zaGFwZVsxXSk6CiAgICAgICAgICAgIGZwcltpXSwgdHByW2ldLCBfID0gbWV0cmljcy5yb2NfY3VydmUoCiAgICAgICAgICAgICAgICB5X2xhYmVsc1s6LCBpXSwgeV9wcm9ic1s6LCBpXSwgcG9zX2xhYmVsPTEKICAgICAgICAgICAgKQogICAgICAgICAgICByb2NfYXVjW2ldID0gbWV0cmljcy5hdWMoZnByW2ldLCB0cHJbaV0pCiAgICAgICAgICAgIHBsdC5wbG90KGZwcltpXSwgdHByW2ldLCBsYWJlbD1mImNsYXNzIHtpfSIpCiAgICBlbHNlOgogICAgICAgIGZwciwgdHByLCBfID0gbWV0cmljcy5yb2NfY3VydmUoeV9sYWJlbHMsIHlfcHJvYnNbOiwtMV0pCiAgICAgICAgcGx0LnBsb3QoZnByLCB0cHIsIGxhYmVsPWYicG9zaXRpdmUgY2xhc3MiKQoKICAgIHJldHVybiBwbHQuZ2NmKCkKCmRlZiBnZW5fcHJvYmEoCiAgICBjb250ZXh0LAogICAgZmVhdHMsCiAgICBsYWJlbHMsCiAgICBtb2RlbCwKICAgIHNjb3JlX21ldGhvZCwKICAgIHBsb3RzX2Rlc3QsCiAgICBudHJlZV9saW1pdD1Ob25lLAogICAgdmFsaWRhdGVfZmVhdHVyZXM9VHJ1ZSwKICAgIGJhc2VfbWFyZ2luPU5vbmUKKToKICAgICIiIiBnZW5lcmF0ZSBwcmVkaWN0aW9ucyBhbmQgdmFsaWRhdGlvbiBzdGF0cwogICAgCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICAgIHRoZSBmdW5jdGlvbiBleGVjdXRpb24gY29udGV4dAogICAgOnBhcmFtIGZlYXRzOiAgICAgICAgICAgICB2YWxpZGF0aW9uIGZlYXR1cmVzIGFycmF5IAogICAgOnBhcmFtIGxhYmVsczogICAgICAgICAgICB2YWxpZGF0aW9uIGdyb3VuZC10cnV0aCBsYWJlbHMKICAgIDpwYXJhbSBtb2RlbDogICAgICAgICAgICAgZXN0aW1hdGVkIG1vZGVsCiAgICA6cGFyYW0gc2Nyb3JlX21ldGhvZDogICAgICgiYXZlcmFnZSIpIG11bHRpY2xhc3Mgc2NvcmluZwogICAgOnBhcmFtIHBsb3RzX2Rlc3Q6ICAgICAgICBkZXN0aW5hdGlvbiBzdWJmb2xkZXIgZm9yIHBsb3QgYXJ0aWZhY3RzCiAgICA6cGFyYW0gbnRyZWVfbGltaXQ6ICAgICAgIChOb25lKSBsaW1pdCBuby4gdHJlZXMgdXNlZCBpbiBwcmVkaWN0aW9uCiAgICA6cGFyYW0gdmFsaWRhdGVfZmVhdHVyZXM6IChUcnVlKSBlbnN1cmUgY29uc2lzdGVudCBmZWF0dXJlIG5hbWVzIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIG1vZGVsIGFuZCBpbnB1dCBkYXRhCiAgICA6cGFyYW0gYmFzZV9tYXJnaW46ICAgICAgIChOb25lKSB1bmRlZmluZWQKICAgICIiIgogICAgZnJvbSBza2xlYXJuIGltcG9ydCBtZXRyaWNzCiAgICBmcm9tIG1scnVuLmFydGlmYWN0cyBpbXBvcnQgUGxvdEFydGlmYWN0CiAgICBmcm9tIG1scnVuLm1sdXRpbHMgaW1wb3J0IGdjZl9jbGVhcgogICAgZnJvbSB4Z2Jvb3N0IGltcG9ydCBYR0JDbGFzc2lmaWVyCiAgICBpbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CiAgICAKICAgIHlwcmVkID0gbW9kZWwucHJlZGljdChmZWF0cywgRmFsc2UsIG50cmVlX2xpbWl0LCB2YWxpZGF0ZV9mZWF0dXJlcywgYmFzZV9tYXJnaW4pCiAgICAKICAgIHlfcHJvYmEgPSBbXQogICAgaWYgaGFzYXR0cihtb2RlbCwgInByZWRpY3RfcHJvYmEiKToKICAgICAgICB5X3Byb2JhID0gbW9kZWwucHJlZGljdF9wcm9iYShmZWF0cywgbnRyZWVfbGltaXQsIHZhbGlkYXRlX2ZlYXR1cmVzLCBiYXNlX21hcmdpbikKICAgIHlwcmVkX2JpbmFyeSA9IFtyb3VuZCh2YWx1ZSkgZm9yIHZhbHVlIGluIHlfcHJvYmFbOiwtMV1dCiAgICAKICAgIGF2ZXJhZ2VfcHJlY2lzaW9uID0gbWV0cmljcy5hdmVyYWdlX3ByZWNpc2lvbl9zY29yZShsYWJlbHMsIHlfcHJvYmFbOiwtMV0sIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKQogICAgY29udGV4dC5sb2dfcmVzdWx0KGYiYXZnX3ByZWNpc2lvbiIsIGF2ZXJhZ2VfcHJlY2lzaW9uKQogICAgY29udGV4dC5sb2dfcmVzdWx0KGYicm9jYXVjIiwgbWV0cmljcy5yb2NfYXVjX3Njb3JlKGxhYmVscywgeV9wcm9iYVs6LC0xXSkpCiAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJhY2N1cmFjeV9zY29yZSIsIGZsb2F0KG1ldHJpY3MuYWNjdXJhY3lfc2NvcmUobGFiZWxzLCB5cHJlZF9iaW5hcnkpKSkKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImYxX3Njb3JlIiwgbWV0cmljcy5mMV9zY29yZShsYWJlbHMsIHlwcmVkX2JpbmFyeSwgYXZlcmFnZT1zY29yZV9tZXRob2QpKQogICAgCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdCgKICAgICAgICBQbG90QXJ0aWZhY3QoInJvYyIsIGJvZHk9cGxvdF9yb2MoY29udGV4dCwgbGFiZWxzLCB5X3Byb2JhKSksIGxvY2FsX3BhdGg9ZiJ7cGxvdHNfZGVzdH0vcm9jIikKICAgIGdjZl9jbGVhcihwbHQpCgogICAgYm9keSA9IHBsb3RfY29uZnVzaW9uX21hdHJpeChsYWJlbHMsIHlwcmVkX2JpbmFyeSwgY2xhc3Nlcz1sYWJlbHMubGFiZWxzLnVuaXF1ZSgpKSAKICAgIGNvbnRleHQubG9nX2FydGlmYWN0KFBsb3RBcnRpZmFjdCgiY29uZnVzaW9uIiwgYm9keT1ib2R5KSwgbG9jYWxfcGF0aD1mIntwbG90c19kZXN0fS9jb25mdXNpb24iKQogICAgCiAgICByZXR1cm4geV9wcm9iYQoKZGVmIHRyYWluX21vZGVsKAogICAgY29udGV4dCwKICAgIG1vZGVsX3R5cGU6IHN0ciwKICAgIGRhdGFzZXQ6IERhdGFJdGVtLAogICAgbGFiZWxfY29sdW1uOiBzdHIgPSAibGFiZWxzIiwKICAgIHNhbXBsZTogaW50ID0gLTEsCiAgICB0ZXN0X3NpemU6IGZsb2F0ID0gMC4wNSwKICAgIHZhbGlkX3NpemU6IGZsb2F0ID0gMC43NSwKICAgIHJhbmRvbV9zdGF0ZTogaW50ID0gMSwKICAgIG1vZGVsX2ZpbGVuYW1lOiBzdHIgPSAieGdiLW1vZGVsIiwKICAgIG1vZGVsc19kZXN0OiBzdHIgPSAiIiwKICAgIHBsb3RzX2Rlc3Q6IHN0ciA9ICIiLAogICAgc2NvcmVfbWV0aG9kOiBzdHIgPSAibWljcm8iLAogICAgZmlsZV9leHQ6IHN0ciA9ICJwYXJxdWV0IiwKICAgIG1vZGVsX3BrZ19maWxlOiBzdHIgPSAiIiwgICAgCikgLT4gTm9uZToKICAgICIiInRyYWluIGFuIHhnYm9vc3QgbW9kZWwuCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgICB0aGUgZnVuY3Rpb24gY29udGV4dAogICAgOnBhcmFtIG1vZGVsX3R5cGU6ICAgICAgICB0aGUgbW9kZWwgdHlwZSB0byB0cmFpbiwgJ2NsYXNzaWZpZXInLCAncmVncmVzc29yJy4uLgogICAgOnBhcmFtIGRhdGFzZXQ6ICAgICAgICAgICAoImRhdGEiKSBuYW1lIG9mIHJhdyBkYXRhIGZpbGUKICAgIDpwYXJhbSBsYWJlbF9jb2x1bW46ICAgICAgZ3JvdW5kLXRydXRoICh5KSBsYWJlbHMKICAgIDpwYXJhbSBzYW1wbGU6ICAgICAgICAgICAgU2VsZWN0cyB0aGUgZmlyc3QgbiByb3dzLCBvciBzZWxlY3QgYSBzYW1wbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRpbmcgZnJvbSB0aGUgZmlyc3QuIElmIG5lZ2F0aXZlIDwtMSwgc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgcmFuZG9tIHNhbXBsZQogICAgOnBhcmFtIG1vZGVsX2ZpbGVuYW1lOiAgICBtb2RlbCBmaWxlIGZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgdG8gYSBkaXJlY3RvcnkKICAgIDpwYXJhbSB0ZXN0X3NpemU6ICAgICAgICAgKDAuMDUpIHRlc3Qgc2V0IHNpemUKICAgIDpwYXJhbSB2YWxpZF9zaXplOiAgICAgICAgICAoMC43NSkgT25jZSB0aGUgdGVzdCBzZXQgaGFzIGJlZW4gcmVtb3ZlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhaW5pbmcgc2V0IGdldHMgdGhpcyBwcm9wb3J0aW9uLgogICAgOnBhcmFtIHJhbmRvbV9zdGF0ZTogICAgICAoMSkgc2tsZWFybiBybmcgc2VlZAogICAgOnBhcmFtIG1vZGVsc19kZXN0OiAgICAgICBtb2RlbHMgc3ViZm9sZGVyIG9uIGFydGlmYWN0IHBhdGgKICAgIDpwYXJhbSBwbG90c19kZXN0OiAgICAgICAgcGxvdCBzdWJmb2xkZXIgb24gYXJ0aWZhY3QgcGF0aAogICAgOnBhcmFtIHNjb3JlX21ldGhvZDogICAgICBmb3IgbXVsdGljbGFzcyBjbGFzc2lmaWNhdGlvbgogICAgCiAgICA6cGFyYW0gZmlsZV9leHQ6ICAgICAgICAgIGZvcm1hdCBmb3IgdGVzdF9zZXRfa2V5IGhvbGQgb3V0IGRhdGEKICAgIDpwYXJhbSBtb2RlbF9wa2dfZmlsZTogICAganNvbiBtb2RlbCBjb25maWcgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICIiIgogICAgbW9kZWxzX2Rlc3QgPSBtb2RlbHNfZGVzdCBvciAibW9kZWxzIgogICAgcGxvdHNfZGVzdCA9IHBsb3RzX2Rlc3Qgb3IgZiJwbG90cy97Y29udGV4dC5uYW1lfSIKICAgIAogICAgcmF3LCBsYWJlbHMsIGhlYWRlciA9IF9nZXRfc2FtcGxlKGRhdGFzZXQsIHNhbXBsZSwgbGFiZWxfY29sdW1uKQogICAgCiAgICAoeHRyLHl0ciksICh4dmEseXZhKSwgKHh0ZSx5dGUpLCAoeGNhbCwgeWNhbCkgPSBfZ2V0X3NwbGl0cyhyYXcsIGxhYmVscywgNCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3Rfc2l6ZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZF9zaXplLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsibGFiZWxzIl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kb21fc3RhdGUpCiAgICAgICAgCiAgICBtb2RlbCwgbW9kZWxfY29uZmlnID0gX2dlbl94Z2JfbW9kZWwobW9kZWxfdHlwZSwgY29udGV4dC5wYXJhbWV0ZXJzLml0ZW1zKCkpCiAgICAKICAgIG1vZGVsX2NvbmZpZ1siRklUIl0udXBkYXRlKHsiWCI6IHh0ciwieSI6IHl0ci52YWx1ZXN9KQogICAgCiAgICBtb2RlbC5maXQoKiptb2RlbF9jb25maWdbIkZJVCJdKQogICAgCiAgICB5X3Byb2JhID0gZ2VuX3Byb2JhKGNvbnRleHQsIHh2YSwgeXZhLCBtb2RlbCwgc2NvcmVfbWV0aG9kLCBwbG90c19kZXN0KQogICAgCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYnc2F2aW5nIG1vZGVsIHRvIHttb2RlbHNfZGVzdH0ve21vZGVsX2ZpbGVuYW1lfS4uJykKICAgIHByaW50KG1vZGVsKQogICAgX2R1bXBfeGdiX21vZGVsKGNvbnRleHQsIG1vZGVsLCAianNvbiIsIG1vZGVsc19kZXN0LCBtb2RlbF9maWxlbmFtZSkKCg==
    commands: []
    code_origin: https://github.com/mlrun/functions.git#e16b9e189c60ffa7ed79aeb5a9757b2847f66536:xgb_trainer.ipynb
