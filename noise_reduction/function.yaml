kind: job
metadata:
  name: noise-reduction
  tag: ''
  hash: cbf6498dca0358810ddaea3baa0e246b7874ea1d
  project: ''
  labels:
    author: yonatans
  categories: []
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - librosa
    - noisereduce
    - deepfilternet
    - torchaudio>=2.1.2
  entry_points:
    reduce_noise:
      name: reduce_noise
      doc: 'Reduce noise from audio file or directory containing audio files.

        The audio files must be in .wav format.

        The cleaned audio files will be saved in the target_directory.

        For information about the noise reduction algorithm see:

        https://github.com/timsainb/noisereduce

        Notice that the saved files are in wav format, even if the original files
        are in other format.'
      parameters:
      - name: audio_source
        type: str
        doc: path to audio file or directory containing audio files
      - name: target_directory
        type: str
        doc: path to directory to save the cleaned audio files.
      - name: sample_rate
        type: int
        doc: Number of samples in one second in the audio file. Pass `None` to keep
          the original sample rate.
        default: 16000
      - name: duration
        type: int
        doc: Duration of the audio file to clean in seconds. Pass `None` to keep the
          original duration.
        default: null
      - name: channel
        type: int
        doc: Channel to clean. Pass the number of the channel to clean. To clean all
          channels pass None.
        default: null
      - name: silence_threshold
        type: float
        doc: The threshold to remove silence from the audio, in dB. If None, no silence
          removal is performed.
        default: null
      - name: use_multiprocessing
        type: int
        doc: Number of processes to use for cleaning the audio files. If 0, no multiprocessing
          is used.
        default: 0
      - name: verbose
        type: bool
        doc: Verbosity level. If True, display progress bar.
        default: true
      outputs: []
      lineno: 388
      has_varargs: false
      has_kwargs: false
    clean_audio:
      name: clean_audio
      doc: ''
      parameters:
      - name: self
      - name: data
        type: Tensor
      outputs:
      - type: torch.Tensor
      lineno: 276
      has_varargs: false
      has_kwargs: false
    save_audio:
      name: save_audio
      doc: ''
      parameters:
      - name: self
      - name: audio
        type: ndarray
      - name: target_path
        type: Path
      outputs: []
      lineno: 256
      has_varargs: false
      has_kwargs: false
    load_audio:
      name: load_audio
      doc: ''
      parameters:
      - name: self
      - name: file
        type: str
      outputs:
      - type: torch.Tensor
      lineno: 268
      has_varargs: false
      has_kwargs: false
    update_to_wav_suffix:
      name: update_to_wav_suffix
      doc: ''
      parameters:
      - name: self
      - name: audio_file
        type: Path
      outputs: []
      lineno: 125
      has_varargs: false
      has_kwargs: false
    remove_silence:
      name: remove_silence
      doc: Remove silence sections from the audio.
      parameters:
      - name: self
      - name: audio
        type: ndarray
        doc: The audio to remove silence from.
      outputs:
      - doc: The audio without silence.
      lineno: 134
      has_varargs: false
      has_kwargs: false
    reduce_noise_dfn:
      name: reduce_noise_dfn
      doc: 'Reduce noise from audio files using DeepFilterNet.

        For more information about the noise reduction algorithm see:

        https://github.com/Rikorose/DeepFilterNet

        Notice that the saved files are in wav format, even if the original files
        are in other format.'
      parameters:
      - name: audio_source
        type: str
        doc: path to audio file or directory of audio files
      - name: target_directory
        type: str
        doc: path to target directory to save cleaned audio files
      - name: pad
        type: bool
        doc: whether to pad the audio file with zeros before cleaning
        default: true
      - name: atten_lim_db
        type: int
        doc: maximum attenuation in dB
        default: null
      - name: silence_threshold
        type: float
        doc: the threshold to remove silence from the audio, in dB. If None, no silence
          removal is performed.
        default: null
      - name: use_multiprocessing
        type: int
        doc: Number of processes to use for cleaning the audio files. If 0, no multiprocessing
          is used.
        default: 0
      - name: verbose
        type: bool
        doc: verbosity level. If True, display progress bar and logs.
        default: true
      outputs: []
      lineno: 322
      has_varargs: false
      has_kwargs: true
  description: Reduce noise from audio files
  default_handler: reduce_noise
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
