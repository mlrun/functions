kind: job
metadata:
  name: model-monitoring-batch
  tag: ''
  hash: e8043288fab4886b8dd9e74424352631782768f9
  project: default
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: handler
  entry_points:
    compute:
      name: compute
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: capping
        default: null
      - name: kld_scaling
        default: 0.0001
      outputs:
      - default: ''
        type: float
      lineno: 62
    dict_to_histogram:
      name: dict_to_histogram
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: histogram_dict
        default: ''
      outputs:
      - default: ''
      lineno: 110
    compute_metrics_over_df:
      name: compute_metrics_over_df
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: base_histogram
        default: ''
      - name: latest_histogram
        default: ''
      outputs:
      - default: ''
      lineno: 127
    compute_drift_from_histograms:
      name: compute_drift_from_histograms
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: feature_stats
        default: ''
      - name: current_stats
        default: ''
      outputs:
      - default: ''
      lineno: 138
    post_init:
      name: post_init
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 261
    run:
      name: run
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 274
    check_for_drift:
      name: check_for_drift
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: drift_result
        default: ''
      - name: endpoint
        default: ''
      outputs:
      - default: ''
      lineno: 385
    get_last_created_dir:
      name: get_last_created_dir
      doc: ''
      parameters:
      - name: fs
        default: ''
      - name: endpoint_dir
        default: ''
      outputs:
      - default: ''
      lineno: 410
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: project
        type: str
        default: ''
      outputs:
      - default: ''
      lineno: 417
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/igz-us-sales/functions.git#785c3a5ebe5c143ada43ece1251d8e79c971e791:model_monitoring_batch.py
  affinity: null
verbose: false
