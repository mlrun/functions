kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: d91012c81b76e17888b481f46d8dccbc47f2d7ee
  project: default
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: git@github.com-personal:pengwei715/pii_masker.git#6b594824a47b9c07be2a4801244427be4468010c:pii_recognizer.py
    origin_filename: pii_recognizer.py
    requirements:
    - mlrun==1.4.0-rc19
    - pandas
    - presidio-anonymizer
    - presidio-analyzer
    - torch
    - flair@git+https://github.com/flairNLP/flair.git@d4ed67bf663e4066517f00397412510d90043653
    - st-annotated-text
    - https://huggingface.co/beki/en_spacy_pii_distilbert/resolve/main/en_spacy_pii_distilbert-any-py3-none-any.whl
  entry_points:
    create_pattern_recognizer:
      name: create_pattern_recognizer
      doc: ''
      parameters: []
      outputs:
      - default: ''
      lineno: 39
    load:
      name: load
      doc: Load the model, not used. Model is loaded during initialization.
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 297
    get_supported_entities:
      name: get_supported_entities
      doc: Return supported entities from the Analyzer Engine.
      parameters: []
      outputs:
      - default: ''
        doc: The list of supported entities.
      lineno: 438
    build_spacy_explanation:
      name: build_spacy_explanation
      doc: Create explanation for why this result was detected.
      parameters:
      - name: self
        default: ''
      - name: original_score
        type: float
        doc: Score given by this recognizer
        default: ''
      - name: explanation
        type: str
        doc: Explanation string
        default: ''
      outputs:
      - default: ''
        doc: AnalysisExplanation object
        type: AnalysisExplanation
      lineno: 123
    analyze:
      name: analyze
      doc: Analyze input using Analyzer engine and input arguments (kwargs).
      parameters: []
      outputs:
      - default: ''
        doc: The list of Presidio RecognizerResult constructed from the recognized
      lineno: 445
    build_flair_explanation:
      name: build_flair_explanation
      doc: Create explanation for why this result was detected.
      parameters:
      - name: self
        default: ''
      - name: original_score
        type: float
        doc: Score given by this recognizer
        default: ''
      - name: explanation
        type: str
        doc: Explanation string
        default: ''
      outputs:
      - default: ''
        doc: AnalysisExplanation
        type: AnalysisExplanation
      lineno: 372
    analyzer_engine:
      name: analyzer_engine
      doc: Return AnalyzerEngine.
      parameters:
      - name: model
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: whole
      outputs:
      - default: ''
        doc: AnalyzerEngine
      lineno: 397
    anonymizer_engine:
      name: anonymizer_engine
      doc: Return AnonymizerEngine.
      parameters: []
      outputs:
      - default: ''
        doc: The AnonymizerEngine.
      lineno: 431
    anonymize:
      name: anonymize
      doc: Anonymize identified input using Presidio Abonymizer.
      parameters:
      - name: text
        doc: The text for analysis.
        default: ''
      - name: analyze_results
        doc: The list of Presidio RecognizerResult constructed from
        default: ''
      outputs:
      - default: ''
        doc: The anonymized text.
      lineno: 455
    annotate:
      name: annotate
      doc: Annotate identified input using Presidio Anonymizer.
      parameters:
      - name: text
        doc: The text for analysis.
        default: ''
      - name: st_analyze_results
        doc: The list of Presidio RecognizerResult constructed from
        default: ''
      - name: st_entities
        default: ''
      outputs:
      - default: ''
        doc: The list of tokens with the identified entities.
      lineno: 467
    default:
      name: default
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: o
        default: ''
      outputs:
      - default: ''
      lineno: 500
    process:
      name: process
      doc: Process the text of str using the model.
      parameters:
      - name: text
        type: str
        default: ''
      - name: model
        type: AnalyzerEngine
        doc: Model to use for processing
        default: ''
      outputs:
      - default: ''
        doc: The anonymized text, the html string and the stats report.
      lineno: 504
    pii_recognize:
      name: pii_recognize
      doc: Recognize PII in text.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun context.
        default: ''
      - name: model
        type: str
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: ''
      - name: input_path
        type: str
        doc: The input path to the artifact.
        default: ''
      - name: output_path
        type: str
        doc: The output path to store the anonymized text.
        default: ''
      - name: output_suffix
        type: str
        doc: The surfix of output key for the anonymized text. for example if the
          input file is pii.txt, the output key will be pii_anonymized.txt.
        default: ''
      - name: html_key
        type: str
        doc: The html key for the artifact.
        default: ''
      - name: rpt_key
        type: str
        doc: The report key for the artifact.
        default: ''
      outputs:
      - default: ''
        doc: output_path
        type: str
      lineno: 531
    get_text_files:
      name: get_text_files
      doc: Get a list of text file paths from a given path.
      parameters:
      - name: path
        doc: The path to walk through.
        default: ''
      outputs:
      - default: ''
        doc: A list of text file paths and list of file names.
      lineno: 577
  description: This function is used to recognize PII in a given text
  default_handler: pii_recognize
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
