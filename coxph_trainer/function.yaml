kind: job
metadata:
  name: cox-hazards
  tag: ''
  hash: 16ad1a506bb62359c7cfbeba9bf547e98e9ab605
  project: ''
  labels:
    author: yjb
    framework: survival
  categories:
  - training
  - ml
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: "train models to predict the timing of events\n\nAlthough identical in\
        \ structure to other training functions, this one\nrequires generating a 'Y'\
        \ that represents the age/duration/tenure of\nthe obervation, designated 'tenure'\
        \ here, and a binary labels columns that\nrepresents the event of interest,\
        \ churned/not-churned.\n\nIn addition, there is a strata_cols parameter, representing\
        \ a list of \nstratification (aka grouping) variables."
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: dataset
        type: DataItem
        doc: ("data") name of raw data file
      - name: event_column
        type: str
        doc: ground-truth (y) labels (considered as events in this model)
        default: labels
      - name: time_column
        type: str
        doc: age or tenure column
        default: tenure
      - name: encode_cols
        type: dict
        doc: dictionary of names and prefixes for columns that are to hot be encoded.
          (diff strata_cols)
      - name: strata_cols
        type: list
        doc: columns used to stratify analysis (aka groups)
      - name: plot_cov_groups
        type: bool
      - name: p_value
        type: float
        doc: (0.005) max p value for coeffcients selected
        default: 0.005
      - name: enc_drop_first
        type: bool
        doc: (True) whether to drop the first column of hot encoded  variables (avoid
          column exact dependencies)
        default: true
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7f760c0f2a20>
      - name: test_size
        type: float
        doc: (0.25) test set size
        default: 0.25
      - name: valid_size
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: random_state
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: models_dest
        type: str
        doc: destination subfolder for model artifacts
      - name: plots_dest
        type: str
        doc: destination subfolder for plot artifacts
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: csv
      outputs: []
      lineno: 89
  description: train any classifier using scikit-learn's API
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/yjb-ds/functions.git#bbaf91c5a14454dea6ba72cafa3f035608315b67:cox_hazards.ipynb
