kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: b09b7b9a4ffd55088d665a0191055411e9198a2f
  project: ''
  labels:
    author: pgw
  categories:
  - machine-learning
  - data-preparation
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - nltk
    - pandas
    - presidio-anonymizer
    - presidio-analyzer
    - torch
    - flair@git+https://github.com/flairNLP/flair.git@d4ed67bf663e4066517f00397412510d90043653
    - st-annotated-text
    - https://huggingface.co/beki/en_spacy_pii_distilbert/resolve/main/en_spacy_pii_distilbert-any-py3-none-any.whl
  entry_points:
    analyze:
      name: analyze
      doc: Analyze text and return the results.
      parameters:
      - name: self
      - name: text
        type: str
        doc: The text for analysis.
      - name: entities
        type: List[str]
        doc: The list of entities to recognize.
      - name: nlp_artifacts
        type: pa.nlp_engine.NlpArtifacts
        doc: Not used by this recognizer but needed for the interface.
        default: null
      outputs:
      - doc: The list of Presidio RecognizerResult constructed from the recognized
          Flair detections.
        type: List[pa.RecognizerResult]
      lineno: 381
      has_varargs: false
      has_kwargs: false
    recognize_pii:
      name: recognize_pii
      doc: 'Walk through the input path, recognize PII in text and store the anonymized
        text in the output path.

        Generate the html with different colors for each entity, json report of the
        explanation.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun context. this is needed for log the artifacts.
      - name: input_path
        type: Union[str, Path]
        doc: The input path of the text files needs to be analyzed.
      - name: html_key
        type: str
        doc: The html key for the artifact.
      - name: score_threshold
        type: float
        doc: The score threshold to mark the recognition as trusted.
      - name: output_directory
        type: str
        doc: The output directory path to store the anonymized text.
        default: null
      - name: entities
        type: List[str]
        doc: The list of entities to recognize.
        default: null
      - name: entity_operator_map
        type: dict
        doc: The map of entity to operator (mask, redact, replace, keep, hash, and
          its params)
        default: null
      - name: model
        type: str
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: null
      - name: generate_json
        type: bool
        doc: Whether to generate the json report of the explanation.
        default: true
      - name: generate_html
        type: bool
        doc: Whether to generate the html report of the explanation.
        default: true
      - name: is_full_text
        type: bool
        doc: Whether to return the full text or only the masked text.
        default: true
      - name: is_full_html
        type: bool
        doc: Whether to return the full html or just the annotated text
        default: true
      - name: is_full_report
        type: bool
        doc: Whether to return the full report or just the score and start, end index
        default: true
      outputs:
      - doc: 'A tuple of:'
        type: Union[Tuple[str, pd.DataFrame, dict, dict], Tuple[str, pd.DataFrame,
          dict]]
      lineno: 845
      has_varargs: false
      has_kwargs: false
  description: This function is used to recognize PII in a directory of text files
  default_handler: recognize_pii
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
