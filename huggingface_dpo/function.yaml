kind: job
metadata:
  name: huggingface-dpo-trainer
  tag: ''
  hash: 3db0dab27e7aaa2f91a96c2545060cc7e1a15676
  project: ''
  labels:
    author: pgw
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements: []
  entry_points:
    add_interface:
      name: add_interface
      doc: ''
      parameters:
      - name: cls
        default: ''
      - name: obj
        type: DPOTrainer
        default: ''
      - name: restoration
        type: MLRunInterfaceRestorationType
        default: null
      outputs:
      - default: ''
      lineno: 72
    mlrun_train:
      name: mlrun_train
      doc: ''
      parameters:
      - name: cls
        default: ''
      outputs:
      - default: ''
      lineno: 82
    wrapper:
      name: wrapper
      doc: ''
      parameters:
      - name: self
        type: DPOTrainer
        default: ''
      outputs:
      - default: ''
      lineno: 83
    on_epoch_begin:
      name: on_epoch_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 131
    on_epoch_end:
      name: on_epoch_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 142
    on_log:
      name: on_log
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: logs
        type: Dict[str, float]
        default: null
      outputs:
      - default: ''
      lineno: 153
    on_train_begin:
      name: on_train_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 179
    on_train_end:
      name: on_train_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: model
        type: PreTrainedModel
        default: null
      - name: tokenizer
        type: PreTrainedTokenizer
        default: null
      outputs:
      - default: ''
      lineno: 190
    on_evaluate:
      name: on_evaluate
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 203
    log_metrics:
      name: log_metrics
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 217
    log_metric_plot:
      name: log_metric_plot
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: name
        type: str
        default: ''
      - name: scores
        type: List[float]
        default: ''
      outputs:
      - default: ''
      lineno: 224
    apply_mlrun:
      name: apply_mlrun
      doc: This is temporary and will be built in mlrun 1.5.0
      parameters:
      - name: trainer
        type: DPOTrainer
        default: ''
      - name: model_name
        type: str
        default: null
      - name: tag
        type: str
        default: ''
      - name: context
        type: MLClientCtx
        default: null
      - name: auto_log
        type: bool
        default: true
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs:
      - default: ''
      lineno: 246
    dpo_train:
      name: dpo_train
      doc: "Fine-tunes a Language Model (LLM) on a specific task using the provided\
        \ dataset.\n The function takes various configuration parameters to customize\
        \ the training process\n and adapt the model to specific tasks using a provided\
        \ dataset."
      parameters:
      - name: context
        type: MLClientCtx
        doc: mlrun context in order to log trained model
        default: ''
      - name: train_dataset
        type: Union[str, mlrun.datastore.DataItem]
        doc: The train dataset used for fine-tuning the language model.
        default: ''
      - name: eval_dataset
        type: str
        doc: The eval dataset used for evaluate the language model during training.
        default: null
      - name: train_load_dataset_kwargs
        type: dict
        doc: kwargs for dataset loading
        default: {}
      - name: eval_load_dataset_kwargs
        type: dict
        doc: kwargs for dataset loading
        default: {}
      - name: dataset_columns_to_train
        type: Union[str, list]
        doc: which columns to pass to the model as inputs
        default: text
      - name: model
        type: Union[str, List[str]]
        doc: a tuple containing model name and class, or str with model name or path
        default: huggingface-model
      - name: tokenizer
        type: Union[str, List[str]]
        doc: a tuple containing tokenizer name and class, or str with tokenizer name
          or path
        default: null
      - name: deepspeed_config
        type: Union[dict, bool]
        doc: Configuration options for DeepSpeed (optional).
        default: false
      - name: quantization_config
        type: Union[dict, bool]
        doc: Configuration options for model quantization (optional).
        default: false
      - name: peft_config
        type: Union[dict, bool]
        default: false
      - name: beta
        type: Union[float, bool]
        default: false
      - name: training_config
        type: dict
        doc: Configuration options specific to the fine-tuning training process (optional).
        default: {}
      - name: model_pretrained_config
        type: dict
        doc: config to load the pretrained model
        default: {}
      - name: tokenizer_pretrained_config
        type: dict
        doc: config to load the pretrained tokenizer
        default: {}
      - name: data_collator_config
        type: dict
        doc: Configuration options for data collation during training (optional).
        default: {}
      - name: task
        type: str
        doc: A description of the specific task the model is being fine-tuned for.
        default: text-generation
      - name: use_cuda
        type: bool
        doc: use gpu or not
        default: true
      - name: framework
        type: str
        doc: pt ot tf
        default: pt
      - name: device_map
        type: str
        default: auto
      outputs:
      - default: ''
      lineno: 627
    evaluate:
      name: evaluate
      doc: 'Evaluating the model using perplexity, for more information visit:

        https://huggingface.co/docs/transformers/perplexity'
      parameters:
      - name: context
        doc: mlrun context
        default: ''
      - name: model_path
        doc: path to the model directory
        default: ''
      - name: data
        type: DataFrame
        doc: the data to evaluate the model
        default: ''
      - name: model_name
        type: str
        doc: name of base model
        default: null
      - name: tokenizer_name
        type: str
        doc: name of base tokenizer
        default: null
      outputs:
      - default: ''
      lineno: 785
  description: doing the alignment with dpo trainer
  default_handler: dpo_train
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
