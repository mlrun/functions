kind: job
metadata:
  name: llm-judge
  tag: ''
  hash: 1a07676f0b3c61b661d0787f9d447ccb78cebcf7
  project: ''
  labels:
    author: pgw
  categories:
  - machine-learning
  - monitoring
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - pytest==5.2.0
    - pandas
    - openai
    - mlrun==1.4.0
    - auto-gptq
    - openmpi
    - mpi4py
    - transformers
    - torch=2.0.0
    - accelerate
    - einops
    - optimum
  entry_points:
    open_mpi_handler:
      name: open_mpi_handler
      doc: ''
      parameters:
      - name: worker_inputs
        type: str
      outputs:
      - default: ''
      lineno: 144
    decorator:
      name: decorator
      doc: ''
      parameters:
      - name: handler
      outputs:
      - default: ''
      lineno: 150
    wrapper:
      name: wrapper
      doc: ''
      parameters: []
      outputs:
      - default: ''
      lineno: 155
    fill_prompt:
      name: fill_prompt
      doc: Fill the prompt template with the prompt config
      parameters:
      - name: self
      outputs:
      - doc: the filled prompt
        type: str
        default: ''
      lineno: 238
    prepare_judge:
      name: prepare_judge
      doc: Prepare the judge model
      parameters:
      - name: self
      outputs:
      - default: ''
      lineno: 888
    compute_over_one_data:
      name: compute_over_one_data
      doc: Compute the metrics over one data point
      parameters:
      - name: self
      - name: question
      - name: response
      - name: reference
      outputs:
      - doc: the metrics score and the explanation
        default: ''
      lineno: 1014
    compute_over_data:
      name: compute_over_data
      doc: Compute the metrics over a dataset
      parameters:
      - name: self
      - name: sample_df
        type: DataFrame
        doc: the data to compute the metrics over
      - name: train_df
        type: DataFrame
        default: null
      outputs:
      - doc: the metrics score and the explanation
        default: ''
      lineno: 1025
    extract_score_explanation:
      name: extract_score_explanation
      doc: Extract the score and the explanation from the response
      parameters:
      - name: self
      - name: response
        doc: the response to extract the score and the explanation from
      outputs:
      - doc: the score and the explanation
        default: ''
      lineno: 916
    prepare_bench_mark_model:
      name: prepare_bench_mark_model
      doc: Prepare the model that used for bench marking
      parameters:
      - name: self
      outputs:
      - default: ''
      lineno: 493
    compute_bench_mark_response:
      name: compute_bench_mark_response
      doc: Compute the response of the bench mark model
      parameters:
      - name: self
      - name: question
        doc: the question to ask the model
      outputs:
      - doc: the response
        type: str
        default: ''
      lineno: 505
    llm_judge:
      name: llm_judge
      doc: Compute the metrics over a dataset
      parameters:
      - name: input_path
        type: Union[str, Path]
        doc: the path to the input data
      outputs:
      - doc: the metrics score and the explanation
        default: ''
      lineno: 1084
  description: This function is used to compute the metrics using llm as a judge
  default_handler: llm_judge
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
