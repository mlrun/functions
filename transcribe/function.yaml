kind: job
metadata:
  name: transcribe
  tag: ''
  hash: e7f85ec6e204a54069b4e264003cf59d0cb27bfe
  project: ''
  labels:
    author: yonatans
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - openai-whisper
    - tqdm
  entry_points:
    open_mpi_handler:
      name: open_mpi_handler
      doc: ''
      parameters:
      - name: worker_inputs
        type: List[str]
      - name: root_worker_inputs
        type: Dict[str, Any]
        default: null
      outputs:
      - default: ''
      lineno: 29
    decorator:
      name: decorator
      doc: ''
      parameters:
      - name: handler
      outputs:
      - default: ''
      lineno: 41
    wrapper:
      name: wrapper
      doc: ''
      parameters: []
      outputs:
      - default: ''
      lineno: 46
    transcribe:
      name: transcribe
      doc: 'Transcribe audio files into text files and collect additional data. The
        end result is a directory of transcribed

        text files and a dataframe containing the following columns:


        * audio_file - The audio file path.

        * transcription_file - The transcribed text file name in the output directory.

        * language - The detected language in the audio file.

        * language_probability - The detected language probability.

        * duration - The duration (in seconds) of the audio file (only if `audio_duration`
        is set to True).'
      parameters:
      - name: data_path
        type: Union[str, List[str]]
        doc: A directory of audio files or a single file or a list of files to transcribe.
      - name: output_directory
        type: str
        doc: Path to a directory to save all transcribed audio files.
      - name: model_name
        type: str
        doc: 'One of the official model names of Whisper: {''tiny.en'', ''tiny'',
          ''base.en'', ''base'', ''small.en'', ''small'', ''medium.en'', ''medium'',
          ''large-v1'', ''large-v2'', ''large''} or a full name of a fine-tuned whisper
          model from the huggingface hub.'
        default: base
      - name: device
        type: Literal[, , ]
        doc: Device to load the model. Can be one of {"cuda", "cpu"}. Default will
          prefer "cuda" if available. To use a specific GPU or more than one GPU,
          pass the `device_index` argument via the `init_kwargs`.
        default: auto
      - name: compute_type
        type: str
        doc: 'The data type to use for computation. For more information, check https://opennmt.net/CTranslate2/quantization.html.
          Default: "default" - will use the default type depending on the device used.'
        default: default
      - name: language
        type: str
        doc: 'The spoken language to force Whisper the output language. If None, the
          Whisper model will automatically predict the output langauge. Default: None.'
        default: null
      - name: translate_to_english
        type: bool
        doc: 'Whether to translate the English post transcription. Default: False.'
        default: false
      - name: speech_diarization
        type: Dict[str, List[Tuple[float, float, str]]]
        doc: 'A speech diarization dictionary with the file names to transcribe as
          keys and their diarization as value. The diarization is a list of tuples:
          (start, end, speaker). The transcription result will be in the following
          format: "{speaker}: text text text.". Files with missing diarizations will
          print a warning. Pay attention the diarization must be for the entire duration
          of the audio file (as long as Whisper is predicting words up until then).'
        default: null
      - name: audio_duration
        type: bool
        doc: 'Whether to include the audio files duration (in seconds). The estimated
          duration is from bitrate and may be inaccurate. Default: False.'
        default: false
      - name: init_kwargs
        type: dict
        doc: Additional `WhisperModel.__init__` keyword arguments to use.
        default: null
      - name: transcribe_kwargs
        type: dict
        doc: Additional `WhisperModel.transcribe` keyword arguments to use.
        default: null
      - name: verbose
        type: bool
        doc: 'Whether to present logs of a progress bar and errors. Default: False.'
        default: false
      outputs:
      - doc: 'A tuple of:'
        default: ''
      lineno: 135
  description: Transcribe audio files into text files
  default_handler: transcribe
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
