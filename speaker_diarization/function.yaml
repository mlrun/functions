kind: job
metadata:
  name: speaker-diarization
  tag: ''
  hash: 57758dcbfe34df6d96d4f6a70f1310658867a51d
  project: ''
  labels:
    author: pgw
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: git@github.com:pengwei715/functions.git#d7d1a5e366066d1e982eef8086293780d8da6831:/User/functions/speaker_diarization/speaker_diarization.py
    origin_filename: /User/functions/speaker_diarization/speaker_diarization.py
    requirements:
    - ffmpeg
    - ffprobe
    - tqdm
    - Cython
    - Cmake
    - pyannote.core
    - torch
    - torchaudio
    - pydub
    - nemo_toolkit[all]
  entry_points:
    diarize:
      name: diarize
      doc: 'Diarize audio files into speaker segments

        The final result is a directory containing the Nemo diarization results, a
        dataframe that has the mapping with the audio file to the result

        and a plot of the diarization results if condition_show_plot is set to True.
        The dataframe (csv) will have the following columns:


        * start: Start time of the speaker segment

        * end: End time of the speaker segment

        * speaker: Speaker label


        The pandas dataframe will have the following format:


        * original_audio_file: Path to the original audio file

        * result of model: directory of the diarization results

        * converted_audio_file: Path to the converted audio file

        * speaker_segments: Path to the dataitem that has the speaker labels, start,
        end'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
        default: ''
      - name: input_path
        type: str
        doc: A directory of the audio files or a single file to diarize
        default: ''
      - name: output_directory
        type: str
        doc: Path to the output directory this is where nemo will store the diarization
          results
        default: ''
      - name: condition_show_plot
        type: bool
        doc: If set to True, the diarization results will be plotted
        default: false
      - name: num_speakers
        type: int
        doc: Number of speakers in the audio file
        default: 2
      - name: vad_model
        type: str
        doc: Name of the VAD model to use
        default: vad_multilingual_marblenet
      - name: speaker_embeddings_model
        type: str
        doc: Name of the speaker embeddings model to use
        default: titanet_large
      - name: msdd_model
        type: str
        doc: Name of the msdd model to use
        default: diar_msdd_telephonic
      - name: device
        type: Optional[str]
        doc: Device to use for diarization (default cuda if cuda available, else cpu)
        default: null
      outputs:
      - default: ''
        doc: 'A tuple of: * Path to the diarization results * Pandas dataframe that
          have the mapping between audio_file, converted_audio_file, dirarization_result.
          * A dictionary of errored files that were not diarized'
      lineno: 453
  description: speaker diarization on the audio file
  default_handler: diarize
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
