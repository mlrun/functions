verbose: false
kind: job
spec:
  entry_points:
    analyze:
      parameters:
      - name: context
        type: MLClientCtx
        doc: The function context
      - name: name
        type: str
        doc: Key of dataset to database ("dataset" for default)
        default: dataset
      - name: table
        type: Union[FeatureSet, DataItem]
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path) or FeatureSet
          as param
        default: null
      - name: label_column
        type: str
        doc: Ground truth column label
        default: null
      - name: plots_dest
        type: str
        doc: Destination folder of summary plots (relative to artifact_path) ("plots"
          for default)
        default: plots
      - name: random_state
        type: int
        doc: When the table has more than 500,000 samples, we sample randomly 500,000
          samples
        default: 1
      - name: problem_type
        type: str
        default: classification
      - name: dask_key
        type: str
        doc: Key of dataframe in dask client "datasets" attribute
        default: dask_key
      - name: dask_function
        type: str
        doc: Dask function url (db://..)
        default: null
      - name: dask_client
        doc: Dask client object
        default: null
      has_varargs: false
      lineno: 46
      outputs:
      - type: None
      name: analyze
      has_kwargs: false
      doc: 'The function will output the following artifacts per

        column within the data frame (based on data types)

        If the data has more than 500,000 sample we

        sample randomly 500,000 samples:


        describe csv

        histograms

        scatter-2d

        violin chart

        correlation-matrix chart

        correlation-matrix csv

        imbalance pie chart

        imbalance-weights-vec csv'
  disable_auto_mount: false
  default_handler: analyze
  description: describe and visualizes dataset stats
  build:
    functionSourceCode: 
    origin_filename: ''
    code_origin: ''
  image: mlrun/mlrun
  command: ''
metadata:
  tag: ''
  name: describe
  categories:
  - data-analysis
