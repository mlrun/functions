kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: c61b4b98298143c71495d870a78d652d0c4075bf
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#3e34c25f746a7e80c66d065dace3019c02cac8f6:sklearn_classifier/sklearn_classifier.py
