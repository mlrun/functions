# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

import re
import sys
import os

sys.path.insert(0, "{{sphinx_docs_target}}")
sys.path.insert(0, os.path.abspath(os.path.join("{{sphinx_docs_target}}", "../functions")))


# -- Project information -----------------------------------------------------

project = "{{project_name}}"
copyright = "{{copyright}}"
author = "{{author}}"

master_doc = "index"

# The short X.Y version
version = "{{version}}"
release = "{{release}}"
master_doc = "index"

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "myst_nb",
    "sphinx.ext.napoleon",
    "sphinx.ext.autodoc",
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
    "sphinx_togglebutton",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store",
    ".github",
    "**.ipynb_checkpoints"
]

source_suffix = {
    ".rst": "restructuredtext",
    ".ipynb": "myst-nb",
    ".myst": "myst-nb",
    ".md": "myst-nb",
}

myst_heading_anchors = 6

# If you want to mock imports during autodoc
autodoc_mock_imports = [{{mock_imports}}]

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

html_theme = "sphinx_book_theme"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_css_files = ["css/custom.css"]

# conf.py

html_context = {
    "default_mode": "light",  # Enforces light mode on page load
}

html_theme_options = {
    "repository_url": "{{repository_url}}",
    "repository_branch": "{{repository_branch}}",
    "path_to_docs": "docs",
    "use_repository_button": False,
    "use_issues_button": False,
    "use_edit_page_button": False,
    "home_page_in_toc": False,
    "navigation_with_keys": False,
    "use_fullscreen_button": False,
    "show_navbar_depth": 1,
    "theme_dev_mode": False,
    "launch_buttons": {},
    "switcher": False,
    "search_bar_text": "",
    "search_bar_position": "none",
}

# Prevents generation of searchindex.js
html_search = False

html_title = "{{html_title}}"
html_logo = "{{html_logo}}"
html_favicon = "{{html_favicon}}"

jupyter_execute_notebooks = "off"

autodoc_mock_imports = [{{mock_imports}}]

html_sourcelink_suffix = ''

# -- Extension configuration -------------------------------------------------
{% raw %}
def copy_doc(src, dest, title=""):
    with open(dest, "w") as out:
        with open(src) as fp:
            changed = False
            for line in fp:
                if title and re.match("^# .*", line) and not changed:
                    line = f"# {{title}}"
                    changed = True
                out.write(line)
{% endraw %}

# -- Post-build cleanup ------------------------------------------------------
def remove_searchtools(app, exception):
    searchtools_path = os.path.join(app.outdir, '_static', 'searchtools.js')
    if os.path.exists(searchtools_path):
        os.remove(searchtools_path)

def setup(app):
    app.connect("build-finished", remove_searchtools)
