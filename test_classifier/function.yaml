kind: job
metadata:
  name: test-classifier
  tag: ''
  hash: c4f402bb84862109aaa30d34490547be84ba8cba
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - test
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.6
  env: []
  default_handler: test_classifier
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: /User/functions/test_classifier/function.yaml
