kind: job
metadata:
  name: test-classifier
  tag: latest
  hash: 59a3f85287e230287c6eb813e7f3c565400f473c
  project: ''
  labels:
    author: yjb
  categories:
  - models
  - testing
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: test_classifier
  entry_points:
    _gcf_clear:
      name: _gcf_clear
      doc: ''
      parameters:
      - name: plt
      outputs: []
      lineno: 26
    test_classifier:
      name: test_classifier
      doc: "Test one or more classifier models against held-out dataset\n\nUsing held-out\
        \ test features, evaluates the peformance of the estimated model\n\nCan be\
        \ part of a kubeflow pipeline as a test step that is run post EDA and \ntraining/validation\
        \ cycles"
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: models_dir
        type: str
        doc: artifact models representing a folder or a folder
      - name: test_set
        type: str
        doc: test features and labels
      - name: label_column
        type: str
        doc: column name for ground truth labels
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: key
        type: str
        doc: key for results artifact (maybe just a dir of artifacts for test like
          plots_dest)
      - name: plots_dest
        type: str
        doc: dir for test plots
        default: plots
      outputs: []
      lineno: 31
    _eval_model:
      name: _eval_model
      doc: ''
      parameters:
      - name: model
      outputs: []
      lineno: 60
  description: test a classifier using held-out or new data
  image_pull_policy: Always
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlciBvbiAyMDIwLTAzLTI2IDE1OjI0CgppbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IGltcG9ydGxpYgpmcm9tIGNsb3VkcGlja2xlIGltcG9ydCBsb2FkCgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBhbmRhcyBhcyBwZAoKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdApmcm9tIHNrbGVhcm4gaW1wb3J0IG1ldHJpY3MKZnJvbSBza2xlYXJuLnByZXByb2Nlc3NpbmcgaW1wb3J0IGxhYmVsX2JpbmFyaXplCmZyb20gc2tsZWFybi51dGlscy5tdWx0aWNsYXNzIGltcG9ydCB1bmlxdWVfbGFiZWxzCgpmcm9tIG1scnVuLmV4ZWN1dGlvbiBpbXBvcnQgTUxDbGllbnRDdHgKZnJvbSBtbHJ1bi5kYXRhc3RvcmUgaW1wb3J0IERhdGFJdGVtCmZyb20gbWxydW4uYXJ0aWZhY3RzIGltcG9ydCBUYWJsZUFydGlmYWN0LCBQbG90QXJ0aWZhY3QKCmZyb20gbWx1dGlscy5tb2RlbHMgaW1wb3J0IGdldF9tb2RlbF9jb25maWdzCmZyb20gbWx1dGlscy5wbG90cyBpbXBvcnQgcGxvdF9yb2MsIHBsb3RfaW1wb3J0YW5jZSwgZ2NmX2NsZWFyCgppbXBvcnQgd2FybmluZ3MKd2FybmluZ3Muc2ltcGxlZmlsdGVyKGFjdGlvbj0iaWdub3JlIiwgY2F0ZWdvcnk9RnV0dXJlV2FybmluZykKCmRlZiBfZ2NmX2NsZWFyKHBsdCk6CiAgICBwbHQuY2xhKCkKICAgIHBsdC5jbGYoKQogICAgcGx0LmNsb3NlKCkgICAgICAgIAoKZGVmIHRlc3RfY2xhc3NpZmllcigKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgbW9kZWxzX2Rpcjogc3RyLCAKICAgIHRlc3Rfc2V0OiBzdHIsCiAgICBsYWJlbF9jb2x1bW46IHN0ciwKICAgIHNjb3JlX21ldGhvZDogc3RyID0gJ21pY3JvJywKICAgIGtleTogc3RyID0gIiIsCiAgICBwbG90c19kZXN0OiBzdHIgPSAicGxvdHMiCikgLT4gTm9uZToKICAgICIiIlRlc3Qgb25lIG9yIG1vcmUgY2xhc3NpZmllciBtb2RlbHMgYWdhaW5zdCBoZWxkLW91dCBkYXRhc2V0CiAgICAKICAgIFVzaW5nIGhlbGQtb3V0IHRlc3QgZmVhdHVyZXMsIGV2YWx1YXRlcyB0aGUgcGVmb3JtYW5jZSBvZiB0aGUgZXN0aW1hdGVkIG1vZGVsCiAgICAKICAgIENhbiBiZSBwYXJ0IG9mIGEga3ViZWZsb3cgcGlwZWxpbmUgYXMgYSB0ZXN0IHN0ZXAgdGhhdCBpcyBydW4gcG9zdCBFREEgYW5kIAogICAgdHJhaW5pbmcvdmFsaWRhdGlvbiBjeWNsZXMKICAgIAogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgdGhlIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBtb2RlbHNfZGlyOiAgICAgIGFydGlmYWN0IG1vZGVscyByZXByZXNlbnRpbmcgYSBmb2xkZXIgb3IgYSBmb2xkZXIKICAgIDpwYXJhbSB0ZXN0X3NldDogICAgICAgIHRlc3QgZmVhdHVyZXMgYW5kIGxhYmVscwogICAgOnBhcmFtIGxhYmVsX2NvbHVtbjogICAgY29sdW1uIG5hbWUgZm9yIGdyb3VuZCB0cnV0aCBsYWJlbHMKICAgIDpwYXJhbSBzY29yZV9tZXRob2Q6ICAgIGZvciBtdWx0aWNsYXNzIGNsYXNzaWZpY2F0aW9uCiAgICA6cGFyYW0ga2V5OiAgICAgICAgICAgICBrZXkgZm9yIHJlc3VsdHMgYXJ0aWZhY3QgKG1heWJlIGp1c3QgYSBkaXIgb2YgYXJ0aWZhY3RzIGZvciB0ZXN0IGxpa2UgcGxvdHNfZGVzdCkKICAgIDpwYXJhbSBwbG90c19kZXN0OiAgICAgICBkaXIgZm9yIHRlc3QgcGxvdHMKICAgICIiIgogICAgeHRlc3QgPSBwZC5yZWFkX3BhcnF1ZXQoc3RyKHRlc3Rfc2V0KSkKICAgIHl0ZXN0ID0geHRlc3QucG9wKGxhYmVsX2NvbHVtbikKICAgIAogICAgY29udGV4dC5oZWFkZXIgPSBsaXN0KHh0ZXN0LmNvbHVtbnMudmFsdWVzKQogICAgCiAgICBkZWYgX2V2YWxfbW9kZWwobW9kZWwpOgogICAgICAgIHl0ZXN0YiA9IGxhYmVsX2JpbmFyaXplKHl0ZXN0LCBjbGFzc2VzPXl0ZXN0LnVuaXF1ZSgpKQogICAgICAgIGNsZiA9IGxvYWQob3Blbihvcy5wYXRoLmpvaW4oc3RyKG1vZGVsc19kaXIpLCAibW9kZWwiKSsiLnBrbCIsICJyYiIpKQogICAgICAgIGlmIGNhbGxhYmxlKGdldGF0dHIoY2xmLCAicHJlZGljdF9wcm9iYSIpKToKICAgICAgICAgICAgeV9zY29yZSA9IGNsZi5wcmVkaWN0X3Byb2JhKHh0ZXN0LnZhbHVlcykKICAgICAgICAgICAgeXByZWQgPSBjbGYucHJlZGljdCh4dGVzdC52YWx1ZXMpCiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZiJ5X3Njb3JlLnNoYXBlIHt5X3Njb3JlLnNoYXBlfSIpCiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZiJ5dGVzdGIuc2hhcGUge3l0ZXN0Yi5zaGFwZX0iKQogICAgICAgICAgICBwbG90X3JvYyhjb250ZXh0LCB5dGVzdGIsIHlfc2NvcmUsIGtleT1mInJvYyIsIHBsb3RzX2Rpcj1wbG90c19kZXN0KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHlwcmVkID0gY2xmLnByZWRpY3QoeHRlc3QudmFsdWVzKSAjIHJlZmFjdG9yCiAgICAgICAgICAgIHlfc2NvcmUgPSBOb25lCiAgICAgICAgICAgIAogICAgICAgIGdjZl9jbGVhcihwbHQpCiAgICAgICAKICAgICAgICBtZXRyaWNzLnBsb3RfY29uZnVzaW9uX21hdHJpeChjbGYsIHh0ZXN0LCB5dGVzdCwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxzPXl0ZXN0LnVuaXF1ZSgpLCBub3JtYWxpemU9J3RydWUnKSAKICAgICAgICAKICAgICAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChQbG90QXJ0aWZhY3QoImNvbmZ1c2lvbiIsIGJvZHk9cGx0LmdjZigpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxfcGF0aD1mIntwbG90c19kZXN0fS9jb25mdXNpb24uaHRtbCIpICAgICAgICAKICAgIAogICAgICAgIGlmIGhhc2F0dHIoY2xmLCAiZmVhdHVyZV9pbXBvcnRhbmNlc18iKToKICAgICAgICAgICAgcGxvdF9pbXBvcnRhbmNlKGNvbnRleHQsIGNsZiwga2V5PWYiZmVhdGltcCIpCgogICAgICAgIHl0ZXN0YiA9IGxhYmVsX2JpbmFyaXplKHl0ZXN0LCBjbGFzc2VzPXl0ZXN0LnVuaXF1ZSgpKSAjIGlmIGJpbmFyeSAwLzEgbGFiZWxzLCB3aWxsIHJldHVybiBsYWJlbHMgYXMgaXMKICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYieV9zY29yZS5zaGFwZSB7eV9zY29yZS5zaGFwZX0iKQogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZiJ5dmFsaWRiLnNoYXBlIHt5dGVzdGIuc2hhcGV9IikKICAgICAgICBpZiB5dGVzdGIuc2hhcGVbMV0gPiAxOgogICAgICAgICAgICBhdmVyYWdlX3ByZWNpc2lvbiA9IG1ldHJpY3MuYXZlcmFnZV9wcmVjaXNpb25fc2NvcmUoeXRlc3RiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeV9zY29yZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKQogICAgICAgICAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJyb2NhdWMiLCBtZXRyaWNzLnJvY19hdWNfc2NvcmUoeXRlc3RiLCB5X3Njb3JlKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBhdmVyYWdlX3ByZWNpc2lvbiA9IG1ldHJpY3MuYXZlcmFnZV9wcmVjaXNpb25fc2NvcmUoeXRlc3RiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeV9zY29yZVs6LCAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKQogICAgICAgICAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJyb2NhdWMiLCBtZXRyaWNzLnJvY19hdWNfc2NvcmUoeXRlc3RiLCB5X3Njb3JlWzosIDFdKSkKCiAgICAgICAgY29udGV4dC5sb2dfcmVzdWx0KGYiYXZnX3ByZWNzY29yZSIsIGF2ZXJhZ2VfcHJlY2lzaW9uKQogICAgICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImFjY3VyYWN5IiwgZmxvYXQoY2xmLnNjb3JlKHh0ZXN0LCB5dGVzdCkpKQogICAgICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImYxX3Njb3JlIiwgbWV0cmljcy5mMV9zY29yZSh5dGVzdCwgeXByZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKSkKCiAgICBmb3IgbW9kZWwgaW4gb3MubGlzdGRpcihzdHIobW9kZWxzX2RpcikpOgogICAgICAgIGlmIG1vZGVsLmVuZHN3aXRoKCcucGtsJyk6CiAgICAgICAgICAgIF9ldmFsX21vZGVsKG1vZGVsKQogICAgICAgICAgICBiZXN0X21vZGVsID0gbW9kZWwKCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdCgnVE9EQVlTLU1PREVMUy1URVNULVJFUE9SVCcsIGxvY2FsX3BhdGg9YmVzdF9tb2RlbCkKICAgIGNvbnRleHQubG9nX2FydGlmYWN0KCdERVBMT1knLCBib2R5PWIndHJ1ZScsIGxvY2FsX3BhdGg9J0RFUExPWScpCgo=
    commands: []
    code_origin: https://github.com/mlrun/functions.git#379e787869c41f7187d14a68d572bc660316b99c:test_classifier.ipynb
