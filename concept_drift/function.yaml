kind: job
metadata:
  name: concept-drift
  tag: ''
  hash: b595277b1164ecb097fefbac24d362a19de0de77
  project: default
  labels:
    author: orz
    framework: sklearn
  categories:
  - ml
  - serve
spec:
  command: ''
  args: []
  env: []
  default_handler: concept_drift_deployer
  entry_points:
    concept_drift_deployer:
      name: concept_drift_deployer
      doc: "Deploy a streaming Concept Drift detector on a labeled stream\n   This\
        \ function is the Deployment step for the Streaming Concept Drift Detector.\n\
        \   It will load the selected drift detectors and initialize them with the\
        \ \n   base_dataset's statistics.  Then it will deploy the concept_drift_streaming\
        \ \n   function and pass the models to it for streaming concept-drift detection\
        \ on top\n   of a labeled stream."
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
        default: ''
      - name: base_dataset
        type: DataItem
        doc: Dataset containing label_col and prediction_col to initialize the detectors
        default: ''
      - name: input_stream
        type: str
        doc: labeled stream to track. Should contain label_col and prediction_col
        default: ''
      - name: output_stream
        type: str
        doc: Output stream to push the detector's alerts
        default: ''
      - name: output_tsdb
        type: str
        doc: Output TSDB table to allow analysis and display
        default: ''
      - name: tsdb_batch_size
        type: int
        doc: Batch size of alerts to buffer before pushing to the TSDB
        default: ''
      - name: callbacks
        type: list
        doc: Additional rest endpoints to send the alert data to
        default: ''
      - name: models
        type: list
        doc: List of the detectors to deploy  Defaults to ['ddm', 'eddm', 'pagehinkley'].
        default:
        - ddm
        - eddm
        - pagehinkley
      - name: models_dest
        doc: Location for saving the detectors  Defaults to 'models' (in relation
          to artifact_path).
        default: models
      - name: pagehinkley_threshold
        type: float
        doc: Drift level threshold for PH detector Defaults to 10.
        default: 10
      - name: ddm_warning_level
        type: float
        doc: Warning level alert for DDM detector Defaults to 2.
        default: 2
      - name: ddm_out_control_level
        type: float
        doc: Drift level alert for DDM detector Defaults to 3.
        default: 3
      - name: label_col
        doc: Label column to be used on base_dataset and input_stream  Defaults to
          'label'.
        default: label
      - name: prediction_col
        doc: Prediction column to be used on base_dataset and input_stream  Defaults
          to 'prediction'.
        default: prediction
      - name: hub_url
        type: str
        doc: hub_url in case the default is not used, concept_drift_streaming will
          be loaded  by this url  Defaults to mlconf.hub_url.
        default: <_ast.Name object at 0x7f94677d54e0>
      - name: fn_tag
        type: str
        doc: hub tag to use Defaults to 'master'
        default: master
      outputs:
      - default: ''
      lineno: 39
  description: Deploy a streaming Concept Drift detector on a labeled stream
  build:
    functionSourceCode: 
    base_image: mlrun/ml-models
    commands:
    - python -m pip install scikit-multiflow==0.4.1
    - python -m pip install v3io_frames
    code_origin: https://github.com/mlrun/functions#651dcf94718a1a5a4ca7c3d5dcf1fb19607ba3f6:concept_drift.ipynb
