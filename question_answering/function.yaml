kind: job
metadata:
  name: question-answering
  tag: ''
  hash: d6d333441278ae474cf2b79b90d74cb78f120a2f
  project: ''
  labels:
    author: yonish
  categories:
  - machine-learning
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: https://github.com/yonishelach/functions.git#da90a20560ddedaebcfdd900a43c76d070041a61:/Users/Yonatan_Shelach/projects/functions/question_answering/question_answering.py
    origin_filename: /Users/Yonatan_Shelach/projects/functions/question_answering/question_answering.py
    requirements:
    - transformers torch tqdm
  entry_points:
    answer_questions:
      name: answer_questions
      doc: Answer questions with context to the given text files by a pretrained LLM
        model.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: input_path
        type: str
        doc: A path to a directory of text files or a path to a text file to ask questions
          about.
        default: ''
      - name: model
        type: str
        doc: The pre-trained model to use for asking questions.
        default: ''
      - name: questions
        type: List[str]
        doc: The questions to ask.
        default: ''
      - name: tokenizer
        type: str
        doc: The pre-trained tokenizer to use. Defaulted to the model given.
        default: null
      - name: model_kwargs
        type: dict
        doc: Keyword arguments to pass regarding the loading of the model in HuggingFace's
          `pipeline` function.
        default: null
      - name: text_wrapper
        type: str
        doc: A wrapper for the text part. Will be added at the start of the prompt.
          Must have a placeholder ('{}') for the questions.
        default: ''
      - name: questions_wrapper
        type: str
        doc: A wrapper for the questions received. Will be added after the text placeholder
          in the prompt template. Must have a placeholder ('{}') for the questions.
        default: ''
      - name: answer_preamble
        type: str
        doc: A prefix for the answer part. Will be added at the end of the prompt
          template.
        default: ''
      - name: generation_config
        type: dict
        doc: HuggingFace's `GenerationConfig` keyword arguments to pass to the `generate`
          method.
        default: null
      - name: questions_columns
        type: List[str]
        doc: Columns to use for the dataframe returned.
        default: null
      - name: model_answering_tryouts
        type: int
        doc: Amount of inferring to do per text before raising an error due to missing
          or empty answers.
        default: 2
      - name: llm_source
        type: str
        doc: Indicates which model to use
        default: local
      - name: with_indexed_list_start
        type: bool
        doc: Whether to add a '1. ' in the end of the prompt.
        default: true
      outputs:
      - default: ''
        doc: 'A tuple of:'
      lineno: 27
  description: GenAI approach of question answering on a given data
  default_handler: answer_questions
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
