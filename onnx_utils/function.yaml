kind: job
metadata:
  name: onnx-utils
  tag: ''
  hash: 0c4a6491b976d5220d3ebfb83a3905dd47e86be2
  project: ''
  labels:
    author: guyl
  categories:
  - utils
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: https://github.com/yonishelach/functions.git#f84b9565a33d8159315992ebba5838d41f6cc112:/Users/Yonatan_Shelach/projects/functions/onnx_utils/onnx_utils.py
    origin_filename: /Users/Yonatan_Shelach/projects/functions/onnx_utils/onnx_utils.py
    with_mlrun: false
    auto_build: true
    requirements:
    - onnx~=1.13.0
    - onnxruntime~=1.14.0
    - onnxoptimizer~=0.3.0
    - onnxmltools~=1.11.0
    - tf2onnx~=1.13.0
  entry_points:
    tf_keras_to_onnx:
      name: tf_keras_to_onnx
      doc: Convert a TF.Keras model to an ONNX model and log it back to MLRun as a
        new model object.
      parameters:
      - name: model_handler
        doc: An initialized TFKerasModelHandler with a loaded model to convert to
          ONNX.
        default: ''
      - name: onnx_model_name
        type: str
        doc: The name to use to log the converted ONNX model. If not given, the given
          `model_name` will be used with an additional suffix `_onnx`. Defaulted to
          None.
        default: null
      - name: optimize_model
        type: bool
        doc: Whether or not to optimize the ONNX model using 'onnxoptimizer' before
          saving the model. Defaulted to True.
        default: true
      - name: input_signature
        type: List[Tuple[Tuple[int], str]]
        doc: 'A list of the input layers shape and data type properties. Expected
          to receive a list where each element is an input layer tuple. An input layer
          tuple is a tuple of: [0] = Layer''s shape, a tuple of integers. [1] = Layer''s
          data type, a mlrun.data_types.ValueType string. If None, the input signature
          will be tried to be read from the model artifact. Defaulted to None.'
        default: null
      outputs:
      - default: ''
      lineno: 26
    pytorch_to_onnx:
      name: pytorch_to_onnx
      doc: Convert a PyTorch model to an ONNX model and log it back to MLRun as a
        new model object.
      parameters:
      - name: model_handler
        doc: An initialized PyTorchModelHandler with a loaded model to convert to
          ONNX.
        default: ''
      - name: onnx_model_name
        type: str
        doc: The name to use to log the converted ONNX model. If not given, the given
          `model_name` will be used with an additional suffix `_onnx`. Defaulted to
          None.
        default: null
      - name: optimize_model
        type: bool
        doc: Whether or not to optimize the ONNX model using 'onnxoptimizer' before
          saving the model. Defaulted to True.
        default: true
      - name: input_signature
        type: List[Tuple[Tuple[int, ], str]]
        doc: 'A list of the input layers shape and data type properties. Expected
          to receive a list where each element is an input layer tuple. An input layer
          tuple is a tuple of: [0] = Layer''s shape, a tuple of integers. [1] = Layer''s
          data type, a mlrun.data_types.ValueType string. If None, the input signature
          will be tried to be read from the model artifact. Defaulted to None.'
        default: null
      - name: input_layers_names
        type: List[str]
        doc: 'List of names to assign to the input nodes of the graph in order. All
          of the other parameters (inner layers) can be set as well by passing additional
          names in the list. The order is by the order of the parameters in the model.
          If None, the inputs will be read from the handler''s inputs. If its also
          None, it is defaulted to: "input_0", "input_1", ...'
        default: null
      - name: output_layers_names
        type: List[str]
        doc: 'List of names to assign to the output nodes of the graph in order. If
          None, the outputs will be read from the handler''s outputs. If its also
          None, it is defaulted to: "output_0" (for multiple outputs, this parameter
          must be provided).'
        default: null
      - name: dynamic_axes
        type: Dict[str, Dict[int, str]]
        doc: 'If part of the input / output shape is dynamic, like (batch_size, 3,
          32, 32) you can specify it by giving a dynamic axis to the input / output
          layer by its name as follows: { "input layer name": {0: "batch_size"}, "output
          layer name": {0: "batch_size"}, } If provided, the ''is_batched'' flag will
          be ignored. Defaulted to None.'
        default: null
      - name: is_batched
        type: bool
        doc: Whether to include a batch size as the first axis in every input and
          output layer. Defaulted to True. Will be ignored if 'dynamic_axes' is provided.
        default: true
      outputs:
      - default: ''
      lineno: 81
    to_onnx:
      name: to_onnx
      doc: Convert the given model to an ONNX model.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun function execution context
        default: ''
      - name: model_path
        type: str
        doc: The model path store object.
        default: ''
      - name: onnx_model_name
        type: str
        doc: The name to use to log the converted ONNX model. If not given, the given
          `model_name` will be used with an additional suffix `_onnx`. Defaulted to
          None.
        default: null
      - name: optimize_model
        type: bool
        doc: Whether to optimize the ONNX model using 'onnxoptimizer' before saving
          the model. Defaulted to True.
        default: true
      - name: framework_kwargs
        type: Dict[str, Any]
        doc: Additional arguments each framework may require in order to convert to
          ONNX. To get the doc string of the desired framework onnx conversion function,
          pass "help".
        default: null
      outputs:
      - default: ''
      lineno: 160
    optimize:
      name: optimize
      doc: Optimize the given ONNX model.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun function execution context.
        default: ''
      - name: model_path
        type: str
        doc: Path to the ONNX model object.
        default: ''
      - name: optimizations
        type: List[str]
        doc: List of possible optimizations. To see what optimizations are available,
          pass "help". If None, all of the optimizations will be used. Defaulted to
          None.
        default: null
      - name: fixed_point
        type: bool
        doc: Optimize the weights using fixed point. Defaulted to False.
        default: false
      - name: optimized_model_name
        type: str
        doc: The name of the optimized model. If None, the original model will be
          overridden. Defaulted to None.
        default: null
      outputs:
      - default: ''
      lineno: 219
  description: ONNX intigration in MLRun, some utils functions for the ONNX framework,
    optimizing and converting models from different framework to ONNX using MLRun.
  default_handler: to_onnx
  disable_auto_mount: false
  allow_empty_resources: true
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
