kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: bd06f402df792a4c25205060adb4b813101db980
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#62abab3deb63f23fcf0bcf93abc5e743f8f483d5:sklearn_classifier/sklearn_classifier.py
