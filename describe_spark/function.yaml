kind: job
metadata:
  name: describe-spark
  tag: ''
  hash: 242cd594bd1c4be61f4fe6a2ff5a8d2902d5b8ca
  project: default
spec:
  command: ''
  args: []
  image: iguazio/shell:3.0_b5565_20201026062233_wsdf
  env:
  - name: V3IO_API
    value: ''
  - name: V3IO_USERNAME
    value: ''
  - name: V3IO_ACCESS_KEY
    value: ''
  - name: CURRENT_NODE_IP
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.hostIP
  - name: IGZ_DATA_CONFIG_FILE
    value: /igz/java/conf/v3io.conf
  default_handler: describe_spark
  entry_points:
    describe:
      name: describe
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: bins
        default: ''
      - name: corr_reject
        default: ''
      - name: config
        default: ''
      outputs:
      - default: ''
      lineno: 38
    pretty_name:
      name: pretty_name
      doc: ''
      parameters:
      - name: x
        default: ''
      outputs:
      - default: ''
      lineno: 51
    corr_matrix:
      name: corr_matrix
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: columns
        default: null
      outputs:
      - default: ''
      lineno: 58
    separate:
      name: separate
      doc: ''
      parameters:
      - name: l
        default: ''
      - name: n
        default: ''
      outputs:
      - default: ''
      lineno: 63
    create_hist_data:
      name: create_hist_data
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: column
        default: ''
      - name: minim
        default: ''
      - name: maxim
        default: ''
      - name: bins
        default: 10
      outputs:
      - default: ''
      lineno: 80
    create_all_conditions:
      name: create_all_conditions
      doc: 'Recursive function that exploits the

        ability to call the Spark SQL Column method

        .when() in a recursive way.'
      parameters:
      - name: current_col
        default: ''
      - name: column
        default: ''
      - name: left_edges
        default: ''
      - name: count
        default: 1
      outputs:
      - default: ''
      lineno: 82
    describe_integer_1d:
      name: describe_integer_1d
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: column
        default: ''
      - name: current_result
        default: ''
      - name: nrows
        default: ''
      outputs:
      - default: ''
      lineno: 134
    describe_float_1d:
      name: describe_float_1d
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: column
        default: ''
      - name: current_result
        default: ''
      - name: nrows
        default: ''
      outputs:
      - default: ''
      lineno: 170
    describe_date_1d:
      name: describe_date_1d
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: column
        default: ''
      outputs:
      - default: ''
      lineno: 204
    guess_json_type:
      name: guess_json_type
      doc: ''
      parameters:
      - name: string_value
        default: ''
      outputs:
      - default: ''
      lineno: 221
    describe_categorical_1d:
      name: describe_categorical_1d
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: column
        default: ''
      outputs:
      - default: ''
      lineno: 229
    describe_constant_1d:
      name: describe_constant_1d
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: column
        default: ''
      outputs:
      - default: ''
      lineno: 267
    describe_unique_1d:
      name: describe_unique_1d
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: column
        default: ''
      outputs:
      - default: ''
      lineno: 274
    describe_1d:
      name: describe_1d
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: column
        default: ''
      - name: nrows
        default: ''
      - name: lookup_config
        default: null
      outputs:
      - default: ''
      lineno: 281
    gradient_format:
      name: gradient_format
      doc: ''
      parameters:
      - name: value
        default: ''
      - name: limit1
        default: ''
      - name: limit2
        default: ''
      - name: c1
        default: ''
      - name: c2
        default: ''
      outputs:
      - default: ''
      lineno: 396
    LerpColour:
      name: LerpColour
      doc: ''
      parameters:
      - name: c1
        default: ''
      - name: c2
        default: ''
      - name: t
        default: ''
      outputs:
      - default: ''
      lineno: 397
    fmt_color:
      name: fmt_color
      doc: ''
      parameters:
      - name: text
        default: ''
      - name: color
        default: ''
      outputs:
      - default: ''
      lineno: 403
    fmt_class:
      name: fmt_class
      doc: ''
      parameters:
      - name: text
        default: ''
      - name: cls
        default: ''
      outputs:
      - default: ''
      lineno: 407
    fmt_bytesize:
      name: fmt_bytesize
      doc: ''
      parameters:
      - name: num
        default: ''
      - name: suffix
        default: B
      outputs:
      - default: ''
      lineno: 411
    fmt_percent:
      name: fmt_percent
      doc: ''
      parameters:
      - name: v
        default: ''
      outputs:
      - default: ''
      lineno: 421
    fmt_varname:
      name: fmt_varname
      doc: ''
      parameters:
      - name: v
        default: ''
      outputs:
      - default: ''
      lineno: 424
    fmt_row_severity:
      name: fmt_row_severity
      doc: ''
      parameters:
      - name: v
        default: ''
      outputs:
      - default: ''
      lineno: 441
    fmt_skewness:
      name: fmt_skewness
      doc: ''
      parameters:
      - name: v
        default: ''
      outputs:
      - default: ''
      lineno: 447
    describe_spark:
      name: describe_spark
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: dataset
        type: DataItem
        default: ''
      - name: artifact_path
        default: ''
      - name: bins
        type: int
        default: 30
      - name: describe_extended
        type: bool
        default: true
      outputs:
      - default: ''
      lineno: 463
  description: ''
  image_pull_policy: IfNotPresent
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/Idan707/functions.git#a68e6f7607e56573f329abc5b510bb24612d886e:.ipynb
