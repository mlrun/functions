kind: job
metadata:
  name: transcribe
  tag: ''
  hash: 1b909c770d84cd55b315d276f9b1380d96c51445
  project: ''
  labels:
    author: yonatans
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: git@github.com:pengwei715/functions.git#3931185061f7057f9b0e585dc7aca5355812da64:/User/functions/transcribe/transcribe.py
    origin_filename: /User/functions/transcribe/transcribe.py
    requirements:
    - openai-whisper
    - tqdm
    - ffmpeg
    - ffprobe
    - librosa
    - pyannote.core
    - torch
    - torchaudio
    - pydub
  entry_points:
    transcribe:
      name: transcribe
      doc: "Transcribe audio files into text files and collect additional data.\n\
        The end result is a directory of transcribed text files\n and a dataframe\
        \ containing the following columns:\n\n* audio_file - The original audio file\
        \ name.\n* transcription_file - The transcribed text file name in the output\
        \ directory.\n* language - The detected language in the audio file.\n* length\
        \ - The length of the audio file.\n* rate_of_speech - The number of words\
        \ divided by the audio file length."
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: input_path
        type: str
        doc: A directory of the audio files or a single file to transcribe.
        default: ''
      - name: model_name
        type: str
        doc: One of the official model names listed by `whisper.available_models()`.
        default: base
      - name: device
        type: Literal[, ]
        doc: Device to load the model. Can be one of {"cuda", "cpu"}. Default will
          prefer "cuda" if available.
        default: null
      - name: decoding_options
        type: dict
        doc: A dictionary of options to construct a `whisper.DecodingOptions`.
        default: null
      - name: output_directory
        type: str
        doc: Path to a directory to save all transcribed audio files.
        default: null
      - name: url_path
        type: str
        doc: Path to the dataframe that contains the result of the speaker diarization.
        default: null
      outputs:
      - default: ''
        doc: 'A tuple of:'
      lineno: 31
  description: Transcribe audio files into text files
  default_handler: transcribe
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
