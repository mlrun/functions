name: System Tests Open Source

on:
  push:
    branches:
      - '.+-system-tests'

#  schedule:
#
#    # * is a special character in YAML so you have to quote this string
#    # Run the system tests every 3 hours
#    - cron:  '0 */3 * * *'

  workflow_dispatch:
    inputs:
      mlrun_version:
        description: 'mlrun version'
        required: true
        default: '0.7.1'

env:
  NAMESPACE: mlrun
  MLRUN_API_NODE_PORT: 30070

jobs:
  run-system-tests-opensource-ci:
    timeout-minutes: 60
    name: Run System Tests Open Source
    runs-on: ubuntu-latest

    # let's not run this on every fork, change to your fork when developing
    if: github.repository == 'mlrun/functions' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v2
    - name: Set up python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - uses: azure/setup-helm@v1
      with:
        version: "v3.3.4"

    - uses: manusa/actions-setup-minikube@v2.4.2
      with:
        minikube version: "v1.22.0"
        kubernetes version: "v1.19.13"
        driver: docker
        github token: ${{ github.token }}
        start args: '--addons registry'

    - name: Get mlrun kit charts and create namespace
      run: |
        helm repo add v3io-stable https://v3io.github.io/helm-charts/stable
        helm repo update
        minikube kubectl -- create namespace ${NAMESPACE}
    - name: Install MLRun Kit helm chart
      run: |
        helm --namespace ${NAMESPACE} \
            install mlrun-kit \
            --debug \
            --wait \
            --set global.registry.url=localhost:5000 \
            --set global.externalHostAddress=$(minikube ip) \
            --set mlrun.api.image.tag=0.7.1 \
            --set mlrun.ui.image.tag=0.7.1 \
            v3io-stable/mlrun-kit
#    - name: Prepare system tests env
#      run: |
#        echo "MLRUN_DBPATH: http://$(minikube ip):${MLRUN_API_NODE_PORT}" > tests/system/env.yml
#    - name: Run system tests
#      timeout-minutes: 15
#      run: |
#        MLRUN_SYSTEM_TESTS_CLEAN_RESOURCES="${{ steps.computed_params.outputs.mlrun_system_tests_clean_resources }}" \
#          make test-system-open-source
    - name: Output some logs in case of failure
      if: ${{ failure() }}
      # add set -x to print commands before executing to make logs reading easier
      run: |
        set -x
        minikube logs
        minikube kubectl -- --namespace ${NAMESPACE} get pvc
        minikube kubectl -- --namespace ${NAMESPACE} get pv
        minikube kubectl -- --namespace ${NAMESPACE} get cm
        minikube kubectl -- --namespace ${NAMESPACE} get secrets
        minikube kubectl -- --namespace ${NAMESPACE} get pods
        minikube kubectl -- --namespace ${NAMESPACE} get pods -o yaml
        minikube kubectl -- --namespace ${NAMESPACE} describe pods
        minikube kubectl -- --namespace ${NAMESPACE} get cm -o yaml
        minikube kubectl -- --namespace ${NAMESPACE} get secrets -o yaml
        minikube kubectl -- --namespace ${NAMESPACE} get all
        minikube kubectl -- --namespace ${NAMESPACE} get all -o yaml
        set +x
#  build_stategy_matrix:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get the current branch name
#        shell: bash
#        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
#        id: myref
#
#      - uses: actions/checkout@v2
#      - id: set-matrix
#        # This is very hacky, but it goes like that:
#        # 1) Associate base_ref with origin/base_ref since actions/checkout doesn't do it, if we don't do that we won't be able to check the actual diff
#        # 2) Build JSON string
#        #  2.1) Add beginning of JSON
#        #  2.2) Get diff between origin/base_ref and the checked-out repo => git diff ${{ github.base_ref }} --name-only
#        #  2.3) Clean the file name and leave us only with directories => sed 's,/*[^/]\+/*$,,'
#        #  2.4) Sort and keep only unique directories => sort | uniq
#        #  2.5) Remove directories starting with '.' => grep -v '^\.'
#        #  2.6) Add quotation marks to all strings => sed 's/.*/"&"/'
#        #  2.7) Add comma suffix to all strings excluding the last one => sed '$!s/.*/&,/'
#        #  2.8) Close JSON
#        # 3) Save matrix JSON to output
#        # This is old fetch command it cant work cause base_ref is only avaliable on pull request actions: git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
#        run: |
#          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ steps.myref.outputs.branch }}:refs/remotes/origin/${{ steps.myref.outputs.branch }}
#          matrix=$((
#            echo '{ "package" : ['
#            git ls-files *[^cli] | grep '/' | sort | uniq| sed 's,/*[^/]\+/*$,,' | sort | uniq | grep -v '^\.' | sed 's/.*/"&"/' | sed '$!s/.*/&,/'
#            echo " ]}"
#          ) | jq -c .)
#          echo "::set-output name=matrix::$matrix"
#    outputs:
#      matrix: ${{ steps.set-matrix.outputs.matrix }}
#
#  check_matrix:
#    runs-on: ubuntu-latest
#    needs: build_stategy_matrix
#    steps:
#      - name: Install json2yaml
#        run: |
#          sudo npm install -g json2yaml
#      - name: Check matrix definition
#        run: |
#          matrix='${{ needs.build_stategy_matrix.outputs.matrix }}'
#          echo $matrix
#          echo $matrix | jq .
#          echo $matrix | json2yaml
#  run_monorepo_tests:
#    needs: build_stategy_matrix
#    runs-on: ubuntu-latest
#    strategy:
#      # matrix: [{"package": some package that changed}, {...}, ...]
#      matrix: ${{fromJson(needs.build_stategy_matrix.outputs.matrix)}}
#    steps:
#      # Source
#      - name: Checkout current repo
#        uses: actions/checkout@v2
#        with:
#          path: functions
#      # Install python
#      - name: Install python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.7
#      # Install dependencies
#      - uses: actions/cache@v1
#        id: cache
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('functions/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#      - name: Install requirements
#        run: |
#          pip install --upgrade pip
#          pip install -r functions/requirements.txt
##      - name: Run item validation
#        # add functionality for test single item
##        run: python functions/functions.py  run-tests -r functions -s items
#      - name: Run py tests
#        run: python functions/functions.py  run-tests -r functions -s py -fn ${{ matrix.package }}
##      - name: Run ipynb tests
##        run: python functions/functions.py  run-tests -r functions -s ipynb
#      - name: Clean
#        run: |
#          rm -rf functions