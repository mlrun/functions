kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: be9e566b0f5bd148946399ec2ae927475418c815
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#5c95d4ce87da0415de95bf702e4a6f18467bd105:sklearn_classifier/sklearn_classifier.py
