kind: job
metadata:
  name: pyannote-audio
  tag: ''
  hash: 335752327ddd14b62222bd45faa3a88704505b66
  project: ''
  labels:
    author: guyl
  categories:
  - Deep Learning
  - Huggingface
  - Audio
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun-gpu
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - pyannote.audio
    - pyannote.core
    - torchaudio
    - tqdm
  entry_points:
    open_mpi_handler:
      name: open_mpi_handler
      doc: ''
      parameters:
      - name: worker_inputs
        type: List[str]
      - name: root_worker_inputs
        type: Dict[str, Any]
        default: null
      outputs:
      - default: ''
      lineno: 61
    decorator:
      name: decorator
      doc: ''
      parameters:
      - name: handler
      outputs:
      - default: ''
      lineno: 73
    wrapper:
      name: wrapper
      doc: ''
      parameters: []
      outputs:
      - default: ''
      lineno: 78
    diarize:
      name: diarize
      doc: "Perform speech diarization on given audio files using pyannote-audio (https://github.com/pyannote/pyannote-audio).\n\
        The end result is a dictionary with the file names as keys and their diarization\
        \ as value. A diarization is a list\nof tuples: (start, end, speaker_label).\n\
        \nTo use the `pyannote.audio` models you must pass a Huggingface token and\
        \ get access to the required models. The\ntoken can be passed in one of the\
        \ following options:\n\n* Use the parameter `access_token`.\n* Set an environment\
        \ variable named \"HUGGING_FACE_HUB_TOKEN\".\n* If using MLRun, you can pass\
        \ it as a secret named \"HUGGING_FACE_HUB_TOKEN\".\n\nTo get access to the\
        \ models on Huggingface, visit their page. For example, to use the default\
        \ diarization model set\nin this function (\"pyannote/speaker-diarization-3.0\"\
        ), you need access for these two models:\n\n* https://huggingface.co/pyannote/segmentation-3.0\n\
        * https://huggingface.co/pyannote/speaker-diarization-3.0\n\nNote: To control\
        \ the recognized speakers in the diarization output you can choose one of\
        \ the following methods:\n\n* For a known speakers amount, you may set speaker\
        \ labels via the `speakers_labels` parameter that will be used in\n  the order\
        \ of speaking in the audio (first person speaking be the first label in the\
        \ list). In addition, you can do\n  diarization per channel (setting the parameter\
        \ `separate_by_channels` to True). Each label will be assigned to a\n  specific\
        \ channel by order (first label to channel 0, second label to channel 1 and\
        \ so on). Notice, this will\n  increase runtime.\n* For unknown speakers amount,\
        \ you can set the `speaker_prefix` parameter to add a prefix for each speaker\
        \ number.\n  You can also help the diarization by setting the speakers range\
        \ via the `speakers_amount_range` parameter."
      parameters:
      - name: data_path
        type: Union[str, List[str]]
        doc: A directory of the audio files, a single file or a list of files to transcribe.
      - name: model_name
        type: str
        doc: 'One of the official diarization model names (referred as diarization
          pipelines) of `pyannote.audio` Huggingface page. Default: "pyannote/speaker-diarization-3.0".'
        default: pyannote/speaker-diarization-3.0
      - name: access_token
        type: str
        doc: An access token to pass for using the `pyannote.audio` models. If not
          provided, it will be looking for the environment variable "HUGGING_FACE_HUB_TOKEN".
          If MLRun is available, it will look for a secret "HUGGING_FACE_HUB_TOKEN".
        default: null
      - name: device
        type: str
        doc: Device to load the model. Can be one of {"cuda", "cpu"}. Default will
          prefer "cuda" if available.
        default: null
      - name: speakers_labels
        type: List[str]
        doc: 'Labels to use for the recognized speakers. Default: numeric labels (0,
          1, ...).'
        default: null
      - name: speaker_prefix
        type: str
        doc: 'A prefix to add for the speakers labels. This parameter is ignored if
          `speakers_labels` is not None. Default: "speaker".'
        default: speaker_
      - name: separate_by_channels
        type: bool
        doc: If each speaker is speaking in a separate channel, you can diarize each
          channel and combine the result into a single diarization. Each label set
          in the `speakers_labels` parameter will be assigned to a specific channel
          by order.
        default: false
      - name: minimum_speakers
        type: int
        doc: Set the minimum expected amount of speakers to be in the audio files.
          This parameter is ignored if `speakers_labels` is not None.
        default: null
      - name: maximum_speakers
        type: int
        doc: Set the maximum expected amount of speakers to be in the audio files.
          This parameter is ignored if `speakers_labels` is not None.
        default: null
      - name: verbose
        type: bool
        doc: 'Whether to present logs of a progress bar and errors. Default: True.'
        default: false
      outputs:
      - doc: 'A tuple of:'
        default: ''
      lineno: 139
  description: pyannote's speech diarization of audio files
  default_handler: diarize
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
