metadata:
  name: text-to-audio-generator
  categories:
  - data-preparation
  - machine-learning
  - pytorch
  tag: ''
spec:
  command: ''
  build:
    functionSourceCode: 
    code_origin: ''
    base_image: mlrun/mlrun
    requirements:
    - torchaudio
    - pydub
    origin_filename: ''
  image: ''
  disable_auto_mount: false
  entry_points:
    generate_multi_speakers_audio:
      has_kwargs: false
      name: generate_multi_speakers_audio
      doc: Generate audio files from text files.
      has_varargs: false
      lineno: 38
      parameters:
      - name: data_path
        type: str
        doc: Path to the text file or directory containing the text files to generate
          audio from.
      - name: speakers
        type: Union[List[str], Dict[str, int]]
        doc: List / Dict of speakers to generate audio for. If a list is given, the
          speakers will be assigned to channels in the order given. If dictionary,
          the keys will be the speakers and the values will be the channels.
      - name: available_voices
        type: List[str]
        doc: 'List of available voices to use for the generation. See here for the
          available voices for bark engine: https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c
          See here for the available voices for openai engine: https://beta.openai.com/docs/api-reference/speech'
      - name: engine
        type: str
        doc: The engine to use for the generation. Select either "bark" or "openai".
          Default is "openai".
        default: openai
      - name: output_directory
        type: str
        doc: Path to the directory to save the generated audio files to.
        default: null
      - name: use_gpu
        type: Optional[bool]
        doc: Whether to use the GPU for the generation. Supported only in "bark" engine.
        default: null
      - name: use_small_models
        type: Optional[bool]
        doc: Whether to use the small models for the generation. Supported only in
          "bark" engine.
        default: null
      - name: offload_cpu
        type: Optional[bool]
        doc: To reduce the memory footprint, the models can be offloaded to the CPU
          after loading. Supported only in "bark" engine.
        default: null
      - name: model
        type: Optional[str]
        doc: Which model to use for the generation. Supported only in "openai" engine.
          Default is "tts-1".
        default: null
      - name: speed
        type: Optional[float]
        doc: The speed of the generated audio. Select a value from `0.25` to `4.0`.
          `1.0` is the default.
        default: null
      - name: sample_rate
        type: int
        doc: The sampling rate of the generated audio.
        default: 16000
      - name: file_format
        type: str
        doc: The format of the generated audio files.
        default: wav
      - name: verbose
        type: bool
        doc: Whether to print the progress of the generation.
        default: true
      - name: bits_per_sample
        type: Optional[int]
        doc: Changes the bit depth for the supported formats. Supported only in "wav"
          or "flac" formats.
        default: null
      outputs:
      - doc: 'A tuple of: - The output directory path. - The generated audio files
          dataframe. - The errors'' dictionary.'
        type: Tuple[str, pd.DataFrame, dict]
  default_handler: generate_multi_speakers_audio
  description: Generate audio file from text using different speakers
verbose: false
kind: job
