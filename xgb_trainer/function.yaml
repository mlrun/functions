kind: job
metadata:
  name: xgb-trainer
  tag: latest
  hash: 475fd75c37af693b6a074f626cdf442c3b25675f
  project: ''
  labels:
    author: yjb
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.6-py37
  env: []
  default_handler: train_model
  entry_points:
    gen_xgb_model:
      name: gen_xgb_model
      doc: 'generate an xgboost model


        Multiple model types that can be estimated using

        the XGBoost Scikit-Learn API'
      parameters:
      - name: model_type
        type: str
        doc: one of "classifier", "regressor", "ranker", "rf_classifier", or "rf_regressor"
      - name: xgb_params
        type: dict
        doc: parameters passed through the  function execution context
      outputs: []
      lineno: 6
    get_sample:
      name: get_sample
      doc: "generate data sample to be split (candidate for mlrun)\n \nReturns features\
        \ matrix and header (x), and labels (y)"
      parameters:
      - name: src
        type: str
        doc: full path and filename of data artifact
      - name: sample
        type: int
        doc: sample size from data source, use negative  integers to sample randomly,
          positive to sample consecutively from the first row
      - name: label
        type: str
        doc: label column title
      - name: reader
        doc: pandas type reader (read_csv, read_parquet, ...) returning a pandas dataframe,
          and with a `dropna` attribute
      outputs: []
      lineno: 44
    get_splits:
      name: get_splits
      doc: 'generate train and test sets (candidate for mlrun)


        cross validation:

        1. cut out a test set

        2a. use the training set in a cross validation scheme, or

        2b. make another split to generate a validation set


        2 parts (n_ways=2): train and test set only

        3 parts (n_ways=3): train, validation and test set

        4 parts (n_ways=4): n_ways=3 + a held-out probability calibration set'
      parameters:
      - name: raw
        doc: dataframe or numpy array of raw features
      - name: labels
        doc: dataframe or numpy array of raw labels
      - name: n_ways
        type: int
        doc: (3) split data into 2, 3, or 4 parts
        default: 3
      - name: test_size
        type: float
        doc: proportion of raw data to set asid as test data
        default: 0.15
      - name: valid_size
        type: float
        doc: proportion of remaining data to be set as validation
        default: 0.3
      - name: label_names
        type: list
        doc: label names
        default:
        - labels
      - name: random_state
        type: int
        doc: (1) random number seed
        default: 1
      outputs: []
      lineno: 77
    save_test_set:
      name: save_test_set
      doc: log a held out test set
      parameters:
      - name: context
        doc: the function execution context
      - name: xtest
        doc: test features, as np.ndarray output from `get_splits`
      - name: ytest
        doc: test labels, as np.ndarray output from `get_splits`
      - name: header
        type: list
        doc: ([])features header if required
      - name: label
        type: str
        doc: ("labels") name of label column
        default: labels
      - name: file_ext
        type: str
        doc: format of test set file
        default: parquet
      - name: index
        type: bool
        doc: preserve index column
      - name: debug
        type: bool
        doc: (False)
      outputs: []
      lineno: 135
    dump_xgb_model:
      name: dump_xgb_model
      doc: 'serialize/log model


        XGBoost model can be save in 3 different ways:

        1. pickle the internal _booster object, inside the model

        2. using model.save_model("fn.bin") using a legacy binary xgb format

        2. using model.save_model("fn.json") using a portable json format'
      parameters:
      - name: context
        doc: the function"s execution context
      - name: model
        doc: the fitted xgboost model
      - name: dump_type
        type: str
        doc: '"pickle" legacy", or "json", '
      - name: dest_folder
        type: str
        doc: 'path for serialized model '
      - name: dest_name
        type: str
        doc: name for serialized model file
      outputs: []
      lineno: 169
    plot_confusion_matrix:
      name: plot_confusion_matrix
      doc: prints and plots the confusion matrix.
      parameters:
      - name: labels
      - name: predictions
      - name: classes
      - name: normalize
        default: all
      - name: title
        default: Confusion matrix
      - name: cmap
      outputs: []
      lineno: 204
    plot_roc:
      name: plot_roc
      doc: "plot roc curves\n\nTODO:  add averaging method (as string) that was used\
        \ to create probs, \ndisplay in legend"
      parameters:
      - name: context
        doc: the function context
      - name: y_labels
        doc: 'ground truth labels, hot encoded for multiclass  '
      - name: y_probs
        doc: model prediction probabilities
      - name: fpr_label
        type: str
        doc: ("false positive rate") x-axis labels
        default: false positive rate
      - name: tpr_label
        type: str
        doc: ("true positive rate") y-axis labels
        default: true positive rate
      - name: title
        type: str
        doc: ("roc curve") title of plot
        default: roc curve
      - name: legend_loc
        type: str
        doc: ("best") location of plot legend
        default: best
      outputs: []
      lineno: 242
    gen_proba:
      name: gen_proba
      doc: generate predictions and validation stats
      parameters:
      - name: context
        doc: the function execution context
      - name: feats
        doc: 'validation features array '
      - name: labels
        doc: validation ground-truth labels
      - name: model
        doc: estimated model
      - name: score_method
      - name: plots_dest
        doc: destination folder for plot artifacts
      - name: ntree_limit
        doc: (None) limit no. trees used in prediction
      - name: validate_features
        doc: (True) ensure consistent feature names  between model and input data
        default: true
      - name: base_margin
        doc: (None) undefined
      outputs: []
      lineno: 296
    proba_calibration:
      name: proba_calibration
      doc: calibrate output probabilities
      parameters:
      - name: model
      - name: xcal
      - name: ycal
      outputs: []
      lineno: 348
    train_model:
      name: train_model
      doc: train an xgboost model.
      parameters:
      - name: context
        doc: the function context
      - name: model_type
        type: str
        doc: the model type to train, 'classifier', 'regressor'...
      - name: dataset
        doc: ("data") name of raw data file
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: labels
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7fc469966eb8>
      - name: test_size
        type: float
        doc: (0.05) test set size
        default: 0.05
      - name: valid_size
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: random_state
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: model_filename
        type: str
        doc: model file filename, points to a directory
        default: xgb-model
      - name: models_dest
        type: str
        doc: models subfolder on artifact path
      - name: plots_dest
        type: str
        doc: plot subfolder on artifact path
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: parquet
      - name: model_pkg_file
        type: str
        doc: json model config file
      outputs: []
      lineno: 371
  description: train any classifier using scikit-learn's API
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/yjb-ds/functions.git#2decd6b1782d68d3a0e01ae6243b6beb811730fd:xgb_trainer.ipynb
