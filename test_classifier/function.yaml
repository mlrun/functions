kind: job
metadata:
  name: test-classifier
  tag: latest
  hash: 7808f5ee00c941afb5060e1f1d4be59f73a68f29
  project: ''
  labels:
    author: yjb
  categories:
  - models
  - testing
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.6-py37
  env: []
  default_handler: test_classifier
  entry_points:
    _eval_model:
      name: _eval_model
      doc: internal evaluate one model
      parameters:
      - name: context
      - name: xtest
      - name: ytest
      - name: model
      - name: score_method
        default: micro
      - name: plots_dest
      outputs: []
      lineno: 6
    test_classifier:
      name: test_classifier
      doc: "Test one or more classifier models against held-out dataset\n\nUsing held-out\
        \ test features, evaluates the peformance of the estimated model\n\nCan be\
        \ part of a kubeflow pipeline as a test step that is run post EDA and \ntraining/validation\
        \ cycles"
      parameters:
      - name: context
        doc: the function context
      - name: models_path
        type: str
        doc: artifact models representing a file or a folder
      - name: test_set
        type: str
        doc: test features and labels
      - name: label_column
        type: str
        doc: column name for ground truth labels
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: plots_dest
        type: str
        doc: dir for test plots
      - name: model_evaluator
        doc: 'NOT IMPLEMENTED: specific method to generate eval, passed in as string
          or available in this folder'
      outputs: []
      lineno: 65
  description: test a classifier using held-out or new data
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlciBvbiAyMDIwLTA0LTI4IDIwOjU1CgppbXBvcnQgd2FybmluZ3MKd2FybmluZ3Muc2ltcGxlZmlsdGVyKGFjdGlvbj0iaWdub3JlIiwgY2F0ZWdvcnk9RnV0dXJlV2FybmluZykKCmRlZiBfZXZhbF9tb2RlbChjb250ZXh0LCB4dGVzdCwgeXRlc3QsIG1vZGVsLCBzY29yZV9tZXRob2Q9Im1pY3JvIiwgcGxvdHNfZGVzdD0iIik6CiAgICAiIiJpbnRlcm5hbCBldmFsdWF0ZSBvbmUgbW9kZWwKICAgICIiIgogICAgZnJvbSBza2xlYXJuIGltcG9ydCBtZXRyaWNzCiAgICBmcm9tIGNsb3VkcGlja2xlIGltcG9ydCBsb2FkCiAgICBpbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CiAgICBmcm9tIHNrbGVhcm4ucHJlcHJvY2Vzc2luZyBpbXBvcnQgbGFiZWxfYmluYXJpemUKICAgIGZyb20gc2tsZWFybi51dGlscy5tdWx0aWNsYXNzIGltcG9ydCB1bmlxdWVfbGFiZWxzCiAgICBmcm9tIG1scnVuLmFydGlmYWN0cyBpbXBvcnQgUGxvdEFydGlmYWN0CiAgICBmcm9tIG1scnVuLm1sdXRpbHMgaW1wb3J0IHBsb3Rfcm9jLCBwbG90X2ltcG9ydGFuY2UsIGdjZl9jbGVhcgoKICAgIHl0ZXN0YiA9IGxhYmVsX2JpbmFyaXplKHl0ZXN0LCBjbGFzc2VzPXl0ZXN0LnVuaXF1ZSgpKQogICAgCiAgICBjb250ZXh0LmhlYWRlciA9IHh0ZXN0LmNvbHVtbnMubmFtZXMKICAgIAogICAgY2xmID0gbG9hZChvcGVuKG1vZGVsLCAicmIiKSkKICAgIGlmIGNhbGxhYmxlKGdldGF0dHIoY2xmLCAicHJlZGljdF9wcm9iYSIpKToKICAgICAgICB5X3Njb3JlID0gY2xmLnByZWRpY3RfcHJvYmEoeHRlc3QudmFsdWVzKQogICAgICAgIHlwcmVkID0gY2xmLnByZWRpY3QoeHRlc3QudmFsdWVzKQogICAgICAgIHBsb3Rfcm9jKGNvbnRleHQsIHl0ZXN0YiwgeV9zY29yZSwga2V5PSdyb2MnLCBwbG90c19kaXI9cGxvdHNfZGVzdCkKICAgIGVsc2U6CiAgICAgICAgeXByZWQgPSBjbGYucHJlZGljdCh4dGVzdC52YWx1ZXMpICMgcmVmYWN0b3IKICAgICAgICB5X3Njb3JlID0gTm9uZQoKICAgIGdjZl9jbGVhcihwbHQpCiAgICBtZXRyaWNzLnBsb3RfY29uZnVzaW9uX21hdHJpeChjbGYsIHh0ZXN0LnZhbHVlcywgeXRlc3QsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxzPXl0ZXN0LnVuaXF1ZSgpLCBub3JtYWxpemU9J3RydWUnKSAKCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChQbG90QXJ0aWZhY3QoImNvbmZ1c2lvbiIsIGJvZHk9cGx0LmdjZigpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbF9wYXRoPWYie3Bsb3RzX2Rlc3R9L3ttb2RlbC5zcGxpdCgnLicpWy0yXX0tY29uZnVzaW9uLmh0bWwiKSAgICAgICAgCgogICAgaWYgaGFzYXR0cihjbGYsICJmZWF0dXJlX2ltcG9ydGFuY2VzXyIpOgogICAgICAgIHBsb3RfaW1wb3J0YW5jZShjb250ZXh0LCBjbGYsIGtleT1mImZlYXRpbXAiKQoKICAgIHl0ZXN0YiA9IGxhYmVsX2JpbmFyaXplKHl0ZXN0LCBjbGFzc2VzPXl0ZXN0LnVuaXF1ZSgpKQoKICAgIGlmIHl0ZXN0Yi5zaGFwZVsxXSA+IDE6CiAgICAgICAgYXZlcmFnZV9wcmVjaXNpb24gPSBtZXRyaWNzLmF2ZXJhZ2VfcHJlY2lzaW9uX3Njb3JlKHl0ZXN0YiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeV9zY29yZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpCiAgICAgICAgY29udGV4dC5sb2dfcmVzdWx0KGYicm9jYXVjIiwgbWV0cmljcy5yb2NfYXVjX3Njb3JlKHl0ZXN0YiwgeV9zY29yZSkpCiAgICBlbHNlOgogICAgICAgIGF2ZXJhZ2VfcHJlY2lzaW9uID0gbWV0cmljcy5hdmVyYWdlX3ByZWNpc2lvbl9zY29yZSh5dGVzdGIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlfc2NvcmVbOiwgMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKQogICAgICAgIGNvbnRleHQubG9nX3Jlc3VsdChmInJvY2F1YyIsIG1ldHJpY3Mucm9jX2F1Y19zY29yZSh5dGVzdGIsIHlfc2NvcmVbOiwgMV0pKQoKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImF2Z19wcmVjc2NvcmUiLCBhdmVyYWdlX3ByZWNpc2lvbikKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImFjY3VyYWN5IiwgZmxvYXQoY2xmLnNjb3JlKHh0ZXN0LnZhbHVlcywgeXRlc3QpKSkKICAgIGNvbnRleHQubG9nX3Jlc3VsdChmImYxX3Njb3JlIiwgbWV0cmljcy5mMV9zY29yZSh5dGVzdCwgeXByZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpKQogICAgaWYgeV9zY29yZSBpcyBOb25lOgogICAgICAgIHJldHVybiB5X3Njb3JlCiAgICBlbHNlOgogICAgICAgIHJldHVybiB5cHJlZAoKaW1wb3J0IG9zCmltcG9ydCBwYW5kYXMgYXMgcGQKCmRlZiB0ZXN0X2NsYXNzaWZpZXIoCiAgICBjb250ZXh0LAogICAgbW9kZWxzX3BhdGg6IHN0ciwgCiAgICB0ZXN0X3NldDogc3RyLAogICAgbGFiZWxfY29sdW1uOiBzdHIsCiAgICBzY29yZV9tZXRob2Q6IHN0ciA9ICdtaWNybycsCiAgICBwbG90c19kZXN0OiBzdHIgPSAiIiwKICAgIG1vZGVsX2V2YWx1YXRvciA9IE5vbmUKKSAtPiBOb25lOgogICAgIiIiVGVzdCBvbmUgb3IgbW9yZSBjbGFzc2lmaWVyIG1vZGVscyBhZ2FpbnN0IGhlbGQtb3V0IGRhdGFzZXQKICAgIAogICAgVXNpbmcgaGVsZC1vdXQgdGVzdCBmZWF0dXJlcywgZXZhbHVhdGVzIHRoZSBwZWZvcm1hbmNlIG9mIHRoZSBlc3RpbWF0ZWQgbW9kZWwKICAgIAogICAgQ2FuIGJlIHBhcnQgb2YgYSBrdWJlZmxvdyBwaXBlbGluZSBhcyBhIHRlc3Qgc3RlcCB0aGF0IGlzIHJ1biBwb3N0IEVEQSBhbmQgCiAgICB0cmFpbmluZy92YWxpZGF0aW9uIGN5Y2xlcwogICAgCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICB0aGUgZnVuY3Rpb24gY29udGV4dAogICAgOnBhcmFtIG1vZGVsc19wYXRoOiAgICAgYXJ0aWZhY3QgbW9kZWxzIHJlcHJlc2VudGluZyBhIGZpbGUgb3IgYSBmb2xkZXIKICAgIDpwYXJhbSB0ZXN0X3NldDogICAgICAgIHRlc3QgZmVhdHVyZXMgYW5kIGxhYmVscwogICAgOnBhcmFtIGxhYmVsX2NvbHVtbjogICAgY29sdW1uIG5hbWUgZm9yIGdyb3VuZCB0cnV0aCBsYWJlbHMKICAgIDpwYXJhbSBzY29yZV9tZXRob2Q6ICAgIGZvciBtdWx0aWNsYXNzIGNsYXNzaWZpY2F0aW9uCiAgICA6cGFyYW0gcGxvdHNfZGVzdDogICAgICBkaXIgZm9yIHRlc3QgcGxvdHMKICAgIDpwYXJhbSBtb2RlbF9ldmFsdWF0b3I6IE5PVCBJTVBMRU1FTlRFRDogc3BlY2lmaWMgbWV0aG9kIHRvIGdlbmVyYXRlIGV2YWwsIHBhc3NlZCBpbiBhcyBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGF2YWlsYWJsZSBpbiB0aGlzIGZvbGRlcgogICAgIiIiCiAgICB4dGVzdCA9IHBkLnJlYWRfcGFycXVldChzdHIodGVzdF9zZXQpKQogICAgeXRlc3QgPSB4dGVzdC5wb3AobGFiZWxfY29sdW1uKQogICAgCiAgICBtb2RlbHNfcGF0aCA9IHN0cihtb2RlbHNfcGF0aCkKICAgIAogICAgZm9yIG1vZGVsIGluIG9zLmxpc3RkaXIobW9kZWxzX3BhdGgpOgogICAgICAgIGlmIG1vZGVsLmVuZHN3aXRoKCcucGtsJyk6CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgbW9kZWxfZXZhbHVhdG9yOgogICAgICAgICAgICAgICAgeV9oYXQgPSBfZXZhbF9tb2RlbChjb250ZXh0LCB4dGVzdCwgeXRlc3QsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5wYXRoLmpvaW4obW9kZWxzX3BhdGgsIG1vZGVsKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlX21ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MucGF0aC5qb2luKG1vZGVsc19wYXRoLCBtb2RlbCwgInBsb3RzIikpCiAgICAgICAgICAgIGVsaWYgbW9kZWxfZXZhbHVhdG9yIGlzICJtdXRsaWNsYXNzIjoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgZWxpZiBtb2RlbF9ldmFsdWF0b3IgaXMgInJlZ3Jlc3Npb24iOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgeV9oYXQubmRpbSA9PSAxIG9yIHlfaGF0LnNoYXBlWzFdID09IDE6CiAgICAgICAgICAgICAgICBzY29yZV9uYW1lcyA9IFsieXNjb3JlIl0KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNjb3JlX25hbWVzID0gWyJ5c2NvcmVfIiArIHN0cih4KSBmb3IgeCBpbiByYW5nZSh5X2hhdC5zaGFwZVsxXSldCiAgICAgICAgICAgIAogICAgICAgICAgICBkZiA9IHBkLmNvbmNhdChbeHRlc3QsIHl0ZXN0LCBwZC5EYXRhRnJhbWUoeV9oYXQsIGNvbHVtbnM9c2NvcmVfbmFtZXMpXSwgYXhpcz0xKQogICAgICAgICAgICBjb250ZXh0LmxvZ19kYXRhc2V0KGYidGVzdF9zZXRfcHJlZHMte21vZGVsLnNwbGl0KCcuJylbLTJdfSIsIGRmPWRmLCBmb3JtYXQ9InBhcnF1ZXQiLCBpbmRleD1GYWxzZSkKCg==
    commands: []
    code_origin: https://github.com/yjb-ds/functions.git#2decd6b1782d68d3a0e01ae6243b6beb811730fd:test_classifier.ipynb
