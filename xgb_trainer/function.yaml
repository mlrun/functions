kind: job
metadata:
  name: xgb-trainer
  tag: ''
  hash: 86bddc1f0491ae616a35527d3e6fc8131cd3edac
  project: ''
  labels:
    author: yjb
    framework: xgboost
  categories:
  - training
  - ml
  - experimental
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.8
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: 'train an xgboost model.


        Note on imabalanced data:  the `imbal_vec` parameter represents the measured

        class representations in the sample and can be used as a first step in tuning

        an XGBoost model.  This isn''t a hyperparamter, merely an estimate that should

        be set as ''constant'' throughout tuning process.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: model_type
        type: str
        doc: the model type to train, "classifier", "regressor"...
      - name: dataset
        type: DataItem
        doc: ("data") name of raw data file
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: labels
      - name: encode_cols
        type: dict
        doc: dictionary of names and prefixes for columns that are to hot be encoded.
      - name: enc_drop_first
        type: bool
        doc: (True) whether to drop the first column of hot encoded  variables (avoid
          column exact dependencies)
        default: true
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7f92b1afd978>
      - name: imbal_vec
        doc: ([]) vector of class weights seen in sample
      - name: test_size
        type: float
        doc: (0.05) test set size
        default: 0.25
      - name: valid_size
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: random_state
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: models_dest
        type: str
        doc: destination subfolder for model artifacts
        default: models
      - name: plots_dest
        type: str
        doc: destination subfolder for plot artifacts
        default: plots
      - name: eval_metrics
        type: list
        doc: (["error", "auc"]) learning curve metrics
        default:
        - error
        - auc
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: parquet
      - name: model_pkg_file
        type: str
      outputs: []
      lineno: 60
  description: train multiple model types using xgboost
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/yjb-ds/functions.git#bbaf91c5a14454dea6ba72cafa3f035608315b67:xgb_trainer.ipynb
