kind: job
metadata:
  name: test-classifier
  tag: ''
  hash: d8c128dd832f67bda48db98eab54bf52b81b6bf7
  project: ''
  labels:
    author: yjb
    framework: sklearn
  categories:
  - ml
  - test
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: test_classifier
  entry_points:
    test_classifier:
      name: test_classifier
      doc: "Test one or more classifier models against held-out dataset\n\nUsing held-out\
        \ test features, evaluates the peformance of the estimated model\n\nCan be\
        \ part of a kubeflow pipeline as a test step that is run post EDA and \ntraining/validation\
        \ cycles"
      parameters:
      - name: context
        doc: the function context
      - name: models_path
        type: DataItem
        doc: artifact models representing a file or a folder
      - name: test_set
        type: DataItem
        doc: test features and labels
      - name: label_column
        type: str
        doc: column name for ground truth labels
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: plots_dest
        type: str
        doc: dir for test plots
        default: plots
      - name: model_evaluator
        doc: 'NOT IMPLEMENTED: specific method to generate eval, passed in as string
          or available in this folder'
      outputs: []
      lineno: 70
  description: test a classifier using held-out or new data
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IHdhcm5pbmdzCndhcm5pbmdzLnNpbXBsZWZpbHRlcihhY3Rpb249Imlnbm9yZSIsIGNhdGVnb3J5PUZ1dHVyZVdhcm5pbmcpCgppbXBvcnQgb3MKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIG1scnVuLmRhdGFzdG9yZSBpbXBvcnQgRGF0YUl0ZW0KZnJvbSBtbHJ1bi5hcnRpZmFjdHMgaW1wb3J0IGdldF9tb2RlbAoKZGVmIF9ldmFsX21vZGVsKGNvbnRleHQsIHh0ZXN0LCB5dGVzdCwgbW9kZWwsIHNjb3JlX21ldGhvZD0ibWljcm8iLCBwbG90c19kZXN0PSJwbG90cyIpOgogICAgIiIiaW50ZXJuYWwgZXZhbHVhdGUgb25lIG1vZGVsCiAgICAiIiIKICAgIGZyb20gc2tsZWFybiBpbXBvcnQgbWV0cmljcwogICAgZnJvbSBjbG91ZHBpY2tsZSBpbXBvcnQgbG9hZAogICAgaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAogICAgZnJvbSBza2xlYXJuLnByZXByb2Nlc3NpbmcgaW1wb3J0IGxhYmVsX2JpbmFyaXplCiAgICBmcm9tIHNrbGVhcm4udXRpbHMubXVsdGljbGFzcyBpbXBvcnQgdW5pcXVlX2xhYmVscwogICAgZnJvbSBtbHJ1bi5hcnRpZmFjdHMgaW1wb3J0IFBsb3RBcnRpZmFjdAogICAgZnJvbSBtbHJ1bi5tbHV0aWxzIGltcG9ydCBwbG90X3JvYywgZmVhdHVyZV9pbXBvcnRhbmNlcywgZ2NmX2NsZWFyCgogICAgeXRlc3RiID0gbGFiZWxfYmluYXJpemUoeXRlc3QsIGNsYXNzZXM9eXRlc3QudW5pcXVlKCkpCiAgICAKICAgIGNvbnRleHQuaGVhZGVyID0geHRlc3QuY29sdW1ucy5uYW1lcwogICAgCiAgICBjbGYgPSBsb2FkKG9wZW4obW9kZWwsICJyYiIpKQogICAgaWYgY2FsbGFibGUoZ2V0YXR0cihjbGYsICJwcmVkaWN0X3Byb2JhIikpOgogICAgICAgIHlfc2NvcmUgPSBjbGYucHJlZGljdF9wcm9iYSh4dGVzdC52YWx1ZXMsIHZhbGlkYXRlX2ZlYXR1cmVzPUZhbHNlKQogICAgICAgIHlwcmVkID0gY2xmLnByZWRpY3QoeHRlc3QudmFsdWVzLCB2YWxpZGF0ZV9mZWF0dXJlcz1GYWxzZSkKICAgICAgICBwbG90X3JvYyhjb250ZXh0LCB5dGVzdGIsIHlfc2NvcmUsIGtleT0ncm9jJywgcGxvdHNfZGlyPSJwbG90cyIpCiAgICBlbHNlOgogICAgICAgIHlwcmVkID0gY2xmLnByZWRpY3QoeHRlc3QudmFsdWVzLCB2YWxpZGF0ZV9mZWF0dXJlcz1GYWxzZSkgIyByZWZhY3RvcgogICAgICAgIHlfc2NvcmUgPSBOb25lCgogICAgZ2NmX2NsZWFyKHBsdCkKICAgIG1ldHJpY3MucGxvdF9jb25mdXNpb25fbWF0cml4KGNsZiwgeHRlc3QsIHl0ZXN0LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVscz15dGVzdC51bmlxdWUoKSwgbm9ybWFsaXplPSd0cnVlJykgCiAgICAKICAgIGNvbnRleHQubG9nX2FydGlmYWN0KFBsb3RBcnRpZmFjdCgiY29uZnVzaW9uIiwgYm9keT1wbHQuZ2NmKCkpLCAKICAgICAgICAgICAgICAgICAgICAgICAgIGFydGlmYWN0X3BhdGhfcGF0aD1mInttb2RlbC5zcGxpdCgnLicpWy0yXX0tY29uZnVzaW9uLmh0bWwiKSAKICAgIAogICAgaWYgaGFzYXR0cihjbGYsICJmZWF0dXJlX2ltcG9ydGFuY2VzXyIpOgogICAgICAgIHBsb3QsIHRibCA9IGZlYXR1cmVfaW1wb3J0YW5jZXMoY2xmLCBsaXN0KHh0ZXN0LmNvbHVtbnMpKQogICAgICAgIGNvbnRleHQubG9nX2FydGlmYWN0KHBsb3QsIGxvY2FsX3BhdGg9InBsb3RzL2ZlYXR1cmUtaW1wb3J0YW5jZXMuaHRtbCIpCiAgICAgICAgY29udGV4dC5sb2dfYXJ0aWZhY3QodGJsLCBsb2NhbF9wYXRoPSJwbG90cy9mZWF0dXJlLWltcG9ydGFuY2VzLXRhYmxlLmNzYyIpCgogICAgeXRlc3RiID0gbGFiZWxfYmluYXJpemUoeXRlc3QsIGNsYXNzZXM9eXRlc3QudW5pcXVlKCkpCgogICAgaWYgeXRlc3RiLnNoYXBlWzFdID4gMToKICAgICAgICBhdmVyYWdlX3ByZWNpc2lvbiA9IG1ldHJpY3MuYXZlcmFnZV9wcmVjaXNpb25fc2NvcmUoeXRlc3RiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5X3Njb3JlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmVyYWdlPXNjb3JlX21ldGhvZCkKICAgICAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJyb2NhdWMiLCBtZXRyaWNzLnJvY19hdWNfc2NvcmUoeXRlc3RiLCB5X3Njb3JlKSkKICAgIGVsc2U6CiAgICAgICAgYXZlcmFnZV9wcmVjaXNpb24gPSBtZXRyaWNzLmF2ZXJhZ2VfcHJlY2lzaW9uX3Njb3JlKHl0ZXN0YiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeV9zY29yZVs6LCAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpCiAgICAgICAgY29udGV4dC5sb2dfcmVzdWx0KGYicm9jYXVjIiwgbWV0cmljcy5yb2NfYXVjX3Njb3JlKHl0ZXN0YiwgeV9zY29yZVs6LCAxXSkpCgogICAgY29udGV4dC5sb2dfcmVzdWx0KGYiYXZnX3ByZWNzY29yZSIsIGF2ZXJhZ2VfcHJlY2lzaW9uKQogICAgY29udGV4dC5sb2dfcmVzdWx0KGYiYWNjdXJhY3kiLCBmbG9hdChjbGYuc2NvcmUoeHRlc3QsIHl0ZXN0KSkpCiAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJmMV9zY29yZSIsIG1ldHJpY3MuZjFfc2NvcmUoeXRlc3QsIHlwcmVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKSkKICAgIGlmIHlfc2NvcmUgaXMgTm9uZToKICAgICAgICByZXR1cm4geV9zY29yZQogICAgZWxzZToKICAgICAgICByZXR1cm4geXByZWQKCgpkZWYgdGVzdF9jbGFzc2lmaWVyKAogICAgY29udGV4dCwKICAgIG1vZGVsc19wYXRoOiBEYXRhSXRlbSwgCiAgICB0ZXN0X3NldDogRGF0YUl0ZW0sCiAgICBsYWJlbF9jb2x1bW46IHN0ciwKICAgIHNjb3JlX21ldGhvZDogc3RyID0gJ21pY3JvJywKICAgIHBsb3RzX2Rlc3Q6IHN0ciA9ICJwbG90cyIsCiAgICBtb2RlbF9ldmFsdWF0b3IgPSBOb25lCikgLT4gTm9uZToKICAgICIiIlRlc3Qgb25lIG9yIG1vcmUgY2xhc3NpZmllciBtb2RlbHMgYWdhaW5zdCBoZWxkLW91dCBkYXRhc2V0CiAgICAKICAgIFVzaW5nIGhlbGQtb3V0IHRlc3QgZmVhdHVyZXMsIGV2YWx1YXRlcyB0aGUgcGVmb3JtYW5jZSBvZiB0aGUgZXN0aW1hdGVkIG1vZGVsCiAgICAKICAgIENhbiBiZSBwYXJ0IG9mIGEga3ViZWZsb3cgcGlwZWxpbmUgYXMgYSB0ZXN0IHN0ZXAgdGhhdCBpcyBydW4gcG9zdCBFREEgYW5kIAogICAgdHJhaW5pbmcvdmFsaWRhdGlvbiBjeWNsZXMKICAgIAogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgdGhlIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBtb2RlbHNfcGF0aDogICAgIGFydGlmYWN0IG1vZGVscyByZXByZXNlbnRpbmcgYSBmaWxlIG9yIGEgZm9sZGVyCiAgICA6cGFyYW0gdGVzdF9zZXQ6ICAgICAgICB0ZXN0IGZlYXR1cmVzIGFuZCBsYWJlbHMKICAgIDpwYXJhbSBsYWJlbF9jb2x1bW46ICAgIGNvbHVtbiBuYW1lIGZvciBncm91bmQgdHJ1dGggbGFiZWxzCiAgICA6cGFyYW0gc2NvcmVfbWV0aG9kOiAgICBmb3IgbXVsdGljbGFzcyBjbGFzc2lmaWNhdGlvbgogICAgOnBhcmFtIHBsb3RzX2Rlc3Q6ICAgICAgZGlyIGZvciB0ZXN0IHBsb3RzCiAgICA6cGFyYW0gbW9kZWxfZXZhbHVhdG9yOiBOT1QgSU1QTEVNRU5URUQ6IHNwZWNpZmljIG1ldGhvZCB0byBnZW5lcmF0ZSBldmFsLCBwYXNzZWQgaW4gYXMgc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhdmFpbGFibGUgaW4gdGhpcyBmb2xkZXIKICAgICIiIgogICAgeHRlc3QgPSB0ZXN0X3NldC5hc19kZigpCiAgICB5dGVzdCA9IHh0ZXN0LnBvcChsYWJlbF9jb2x1bW4pCiAgICAKICAgIG1vZGVsX2ZpbGUsIG1vZGVsX29iaiwgXyA9IGdldF9tb2RlbChtb2RlbHNfcGF0aCwgc3VmZml4PScucGtsJykKICAgIAogICAgaWYgbm90IG1vZGVsX2V2YWx1YXRvcjoKICAgICAgICB5X2hhdCA9IF9ldmFsX21vZGVsKGNvbnRleHQsIHh0ZXN0LCB5dGVzdCwgbW9kZWxfZmlsZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZV9tZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbG90c19kZXN0IG9yICdwbG90cycpCgogICAgaWYgeV9oYXQubmRpbSA9PSAxIG9yIHlfaGF0LnNoYXBlWzFdID09IDE6CiAgICAgICAgc2NvcmVfbmFtZXMgPSBbInlzY29yZSJdCiAgICBlbHNlOgogICAgICAgIHNjb3JlX25hbWVzID0gWyJ5c2NvcmVfIiArIHN0cih4KSBmb3IgeCBpbiByYW5nZSh5X2hhdC5zaGFwZVsxXSldCgogICAgZGYgPSBwZC5jb25jYXQoW3h0ZXN0LCB5dGVzdCwgcGQuRGF0YUZyYW1lKHlfaGF0LCBjb2x1bW5zPXNjb3JlX25hbWVzKV0sIGF4aXM9MSkKICAgIGNvbnRleHQubG9nX2RhdGFzZXQoInRlc3Rfc2V0X3ByZWRzIiwgZGY9ZGYsIGZvcm1hdD0icGFycXVldCIsIGluZGV4PUZhbHNlKQoK
    commands: []
    code_origin: https://github.com/yjb-ds/functions.git#bbaf91c5a14454dea6ba72cafa3f035608315b67:test_classifier.ipynb
