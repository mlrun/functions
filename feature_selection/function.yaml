kind: job
metadata:
  name: feature-selection
  tag: ''
  hash: 34c5ca3643c308f2e034fc883d3b53b9fa42d07d
  project: ''
  labels:
    author: orz
  categories:
  - data-prep
  - ml
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: feature_selection
  entry_points:
    show_values_on_bars:
      name: show_values_on_bars
      doc: ''
      parameters:
      - name: axs
      - name: h_v
        default: v
      - name: space
        default: 0.4
      outputs: []
      lineno: 24
    plot_stat:
      name: plot_stat
      doc: ''
      parameters:
      - name: context
      - name: stat_name
      - name: stat_df
      outputs: []
      lineno: 45
    feature_selection:
      name: feature_selection
      doc: "Applies selected feature selection statistical functions \nor models on\
        \ our 'df_artifact'.\n\nEach statistical function or model will vote for it's\
        \ best K selected features.\nIf a feature has >= 'min_votes' votes, it will\
        \ be selected."
      parameters:
      - name: context
        doc: the function context
      - name: df_artifact
      - name: k
        doc: number of top features to select from each statistical function or model
        default: 2
      - name: min_votes
        doc: minimal number of votes (from a model or by statistical function) needed
          for a feature to be selected. Can be specified by percentage of votes or
          absolute  number of votes
        default: 0.5
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: Y
      - name: stat_filters
        doc: statistical functions to apply to the features (from sklearn.feature_selection)
        default:
        - f_classif
        - mutual_info_classif
        - chi2
        - f_regression
      - name: model_filters
        doc: models to use for feature evaluation, can be specified by model name
          (ex. LinearSVC), formalized json (contains 'CLASS',  'FIT', 'META') or a
          path to such json file.
        default:
          LinearSVC: LinearSVC
          LogisticRegression: LogisticRegression
          ExtraTreesClassifier: ExtraTreesClassifier
      - name: max_scaled_scores
        doc: produce feature scores table scaled with max_scaler
        default: true
      outputs: []
      lineno: 67
  description: Select features through multiple Statistical and Model filters
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions#1d1e4a97478e1194b73c78c4d9b0b6fe5d1dc162:feature_selection.ipynb
