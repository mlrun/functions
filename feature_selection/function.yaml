kind: job
metadata:
  name: feature-selection
  tag: ''
  hash: 2edce38d8b7359dc3bdab530dc1abb197335d33c
  project: ''
  labels:
    author: orz
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: feature_selection/feature_selection
  entry_points:
    show_values_on_bars:
      name: show_values_on_bars
      doc: ''
      parameters:
      - name: axs
        default: ''
      - name: h_v
        default: v
      - name: space
        default: 0.4
      outputs:
      - default: ''
      lineno: 28
    plot_stat:
      name: plot_stat
      doc: ''
      parameters:
      - name: context
        default: ''
      - name: stat_name
        default: ''
      - name: stat_df
        default: ''
      outputs:
      - default: ''
      lineno: 50
    feature_selection:
      name: feature_selection
      doc: 'Applies selected feature selection statistical functions

        or models on our ''df_artifact''.


        Each statistical function or model will vote for it''s best K selected features.

        If a feature has >= ''min_votes'' votes, it will be selected.'
      parameters:
      - name: context
        doc: the function context.
        default: ''
      - name: df_artifact
        default: ''
      - name: k
        type: int
        doc: 'number of top features to select from each statistical function or model. '
        default: 5
      - name: min_votes
        type: float
        doc: 'minimal number of votes (from a model or by statistical function) needed
          for a feature to be selected. Can be specified by percentage of votes or
          absolute number of votes. '
        default: 0.5
      - name: label_column
        type: str
        doc: ground-truth (y) labels.
        default: null
      - name: stat_filters
        type: list
        doc: 'statistical functions to apply to the features (from sklearn.feature_selection). '
        default:
        - f_classif
        - mutual_info_classif
        - chi2
        - f_regression
      - name: model_filters
        type: dict
        doc: 'models to use for feature evaluation, can be specified by model name
          (ex. LinearSVC), formalized json (contains ''CLASS'', ''FIT'', ''META'')
          or a path to such json file. '
        default:
          LinearSVC: LinearSVC
          LogisticRegression: LogisticRegression
          ExtraTreesClassifier: ExtraTreesClassifier
      - name: max_scaled_scores
        type: bool
        doc: produce feature scores table scaled with max_scaler.
        default: true
      - name: sample_ratio
        type: float
        doc: percentage of the dataset the user whishes to compute the feature selection
          process on.
        default: null
      - name: output_vector_name
        type: float
        doc: creates a new feature vector containing only the identifies features.
        default: null
      - name: ignore_type_errors
        type: bool
        doc: skips datatypes that are neither float or int within the feature vector.
        default: false
      - name: is_feature_vector
        type: bool
        doc: bool stating if the data is passed as a feature vector.
        default: false
      outputs:
      - default: ''
      lineno: 74
  description: Select features through multiple Statistical and Model filters
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/aviaIguazio/functions.git#a362fc7df970c9e91b046a9b4932567f91a2712b:/Users/aviasulin/PycharmProjects/mlrun/functions/feature_selection/feature_selection.py
    origin_filename: /Users/aviasulin/PycharmProjects/mlrun/functions/feature_selection/feature_selection.py
  disable_auto_mount: false
  priority_class_name: ''
  affinity: null
verbose: false
