kind: job
metadata:
  name: sklearn-classifier-dask
  tag: ''
  hash: e542038fbb84f790b7144b529665f36d70d80906
  project: ''
  labels:
    author: yjb
    framework: sklearn
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/guy1992l/functions.git#75359393bff0aaf27fb04c00d5d0037a1d1e32db:/Users/guyl/Projects/functions/sklearn_classifier_dask/sklearn_classifier_dask.py
    origin_filename: /Users/guyl/Projects/functions/sklearn_classifier_dask/sklearn_classifier_dask.py
  entry_points:
    train_model:
      name: train_model
      doc: Train a sklearn classifier with Dask
      parameters:
      - name: context
        type: MLClientCtx
        doc: Function context.
        default: ''
      - name: dataset
        type: DataItem
        doc: Raw data file.
        default: ''
      - name: model_pkg_class
        type: str
        doc: Model to train, e.g, "sklearn.ensemble.RandomForestClassifier", or json
          model config.
        default: ''
      - name: label_column
        type: str
        doc: (label) Ground-truth y labels.
        default: label
      - name: train_validation_size
        type: float
        doc: (0.75) Train validation set proportion out of the full dataset.
        default: 0.75
      - name: sample
        type: float
        doc: (1.0) Select sample from dataset (n-rows/% of total), randomzie rows
          as default.
        default: 1.0
      - name: models_dest
        type: str
        doc: (models) Models subfolder on artifact path.
        default: models
      - name: test_set_key
        type: str
        doc: (test_set) Mlrun db key of held out data in artifact store.
        default: test_set
      - name: plots_dest
        type: str
        doc: (plots) Plot subfolder on artifact path.
        default: plots
      - name: dask_function
        type: str
        doc: dask function url (db://..)
        default: null
      - name: dask_client
        doc: dask client object
        default: null
      - name: file_ext
        type: str
        doc: (parquet) format for test_set_key hold out data
        default: parquet
      - name: random_state
        type: int
        doc: (42) sklearn seed
        default: 42
      outputs:
      - default: ''
      lineno: 42
  description: train any classifier using scikit-learn's API over Dask
  default_handler: train_model
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
