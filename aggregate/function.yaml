kind: job
metadata:
  name: aggregate
  tag: ''
  hash: 2dd0a59d5478a102c32e2f3474c501308062fe5f
  project: ''
  labels:
    author: avia
  categories:
  - data-preparation
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: aggregate
  entry_points:
    aggregate:
      name: aggregate
      doc: 'Time-series aggregation function


        Will perform a rolling aggregation on {df_artifact}, over {window} by the
        selected {keys}

        applying {metric_aggregations} on {metrics} and {label_aggregations} on {labels}.
        adding {suffix} to the

        feature names.


        if not {inplace}, will return the original {df_artifact}, joined by the aggregated
        result.'
      parameters:
      - name: context
        default: ''
      - name: df_artifact
        type: Union[DataItem, DataFrame]
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path) or a  directory
          containing parquet files. * When given a directory the latest {files_to_select}
          will be selected
        default: ''
      - name: save_to
        type: str
        doc: Where to save the result dataframe. * If relative will add to the {artifact_path}
        default: aggregated-df.pq
      - name: keys
        type: list
        doc: Subset of indexes from the source dataframe to aggregate by (default=all)
        default: null
      - name: metrics
        type: list
        doc: 'Array containing a list of metrics to run the aggregations on. (default=None) '
        default: null
      - name: labels
        type: list
        doc: 'Array containing a list of labels to run the aggregations on. (default=None) '
        default: null
      - name: metric_aggregations
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''mean'', ''std'') (default=''mean'')'
        default:
        - mean
      - name: label_aggregations
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''max'', ''min'') (default=''max'') '
        default:
        - max
      - name: suffix
        type: str
        doc: 'Suffix to add to the feature name, E.g: <Feature_Name>_<Agg_Function>_<Suffix>
          (Ex: ''last_60_minutes'') (default='''')'
        default: ''
      - name: window
        type: int
        doc: Window size to perform the rolling aggregate on. (default=3)
        default: 3
      - name: center
        type: bool
        doc: If True, Sets the value for the central sample in the window, If False,
          will set the value to the last sample. (default=False)
        default: false
      - name: inplace
        type: bool
        doc: If True, will return only the aggregated results. If False, will join
          the aggregated results with the original dataframe
        default: false
      - name: drop_na
        type: bool
        doc: Will drop na lines due to the Rolling.
        default: true
      - name: files_to_select
        type: int
        doc: Specifies the number of *latest* files to select (and concat) for aggregation.
        default: 1
      outputs:
      - default: ''
      lineno: 10
  description: Rolling aggregation over Metrics and Lables according to specifications
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IG9zCmltcG9ydCBwYW5kYXMgYXMgcGQKZnJvbSBtbHJ1bi5kYXRhc3RvcmUgaW1wb3J0IERhdGFJdGVtCgpmcm9tIHR5cGluZyBpbXBvcnQgVW5pb24KCgpkZWYgYWdncmVnYXRlKGNvbnRleHQsCiAgICAgICAgICAgICAgZGZfYXJ0aWZhY3Q6IFVuaW9uW0RhdGFJdGVtLCBwZC5jb3JlLmZyYW1lLkRhdGFGcmFtZV0sCiAgICAgICAgICAgICAgc2F2ZV90bzogc3RyID0gJ2FnZ3JlZ2F0ZWQtZGYucHEnLAogICAgICAgICAgICAgIGtleXM6IGxpc3QgPSBOb25lLAogICAgICAgICAgICAgIG1ldHJpY3M6IGxpc3QgPSBOb25lLAogICAgICAgICAgICAgIGxhYmVsczogbGlzdCA9IE5vbmUsCiAgICAgICAgICAgICAgbWV0cmljX2FnZ3JlZ2F0aW9uczogbGlzdCA9IFsnbWVhbiddLAogICAgICAgICAgICAgIGxhYmVsX2FnZ3JlZ2F0aW9uczogbGlzdCA9IFsnbWF4J10sCiAgICAgICAgICAgICAgc3VmZml4OiBzdHIgPSAnJywKICAgICAgICAgICAgICB3aW5kb3c6IGludCA9IDMsCiAgICAgICAgICAgICAgY2VudGVyOiBib29sID0gRmFsc2UsCiAgICAgICAgICAgICAgaW5wbGFjZTogYm9vbCA9IEZhbHNlLAogICAgICAgICAgICAgIGRyb3BfbmE6IGJvb2wgPSBUcnVlLAogICAgICAgICAgICAgIGZpbGVzX3RvX3NlbGVjdDogaW50ID0gMSk6CiAgICAiIiJUaW1lLXNlcmllcyBhZ2dyZWdhdGlvbiBmdW5jdGlvbgogICAgCiAgICBXaWxsIHBlcmZvcm0gYSByb2xsaW5nIGFnZ3JlZ2F0aW9uIG9uIHtkZl9hcnRpZmFjdH0sIG92ZXIge3dpbmRvd30gYnkgdGhlIHNlbGVjdGVkIHtrZXlzfQogICAgYXBwbHlpbmcge21ldHJpY19hZ2dyZWdhdGlvbnN9IG9uIHttZXRyaWNzfSBhbmQge2xhYmVsX2FnZ3JlZ2F0aW9uc30gb24ge2xhYmVsc30uIGFkZGluZyB7c3VmZml4fSB0byB0aGUKICAgIGZlYXR1cmUgbmFtZXMuCiAgICAKICAgIGlmIG5vdCB7aW5wbGFjZX0sIHdpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCB7ZGZfYXJ0aWZhY3R9LCBqb2luZWQgYnkgdGhlIGFnZ3JlZ2F0ZWQgcmVzdWx0LgogICAgCiAgICA6cGFyYW0gZGZfYXJ0aWZhY3Q6IE1MUnVuIGlucHV0IHBvaW50aW5nIHRvIHBhbmRhcyBkYXRhZnJhbWUgKGNzdi9wYXJxdWV0IGZpbGUgcGF0aCkgb3IgYSAKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5IGNvbnRhaW5pbmcgcGFycXVldCBmaWxlcy4KICAgICAgICAgICAgICAgICAgICAgICAgKiBXaGVuIGdpdmVuIGEgZGlyZWN0b3J5IHRoZSBsYXRlc3Qge2ZpbGVzX3RvX3NlbGVjdH0gd2lsbCBiZSBzZWxlY3RlZAogICAgOnBhcmFtIHNhdmVfdG86ICAgICBXaGVyZSB0byBzYXZlIHRoZSByZXN1bHQgZGF0YWZyYW1lLgogICAgICAgICAgICAgICAgICAgICAgICAqIElmIHJlbGF0aXZlIHdpbGwgYWRkIHRvIHRoZSB7YXJ0aWZhY3RfcGF0aH0KICAgIDpwYXJhbSBrZXlzOiAgICAgICAgU3Vic2V0IG9mIGluZGV4ZXMgZnJvbSB0aGUgc291cmNlIGRhdGFmcmFtZSB0byBhZ2dyZWdhdGUgYnkgKGRlZmF1bHQ9YWxsKQogICAgOnBhcmFtIG1ldHJpY3M6ICAgICBBcnJheSBjb250YWluaW5nIGEgbGlzdCBvZiBtZXRyaWNzIHRvIHJ1biB0aGUgYWdncmVnYXRpb25zIG9uLiAoZGVmYXVsdD1Ob25lKSAKICAgIDpwYXJhbSBsYWJlbHM6ICAgICAgQXJyYXkgY29udGFpbmluZyBhIGxpc3Qgb2YgbGFiZWxzIHRvIHJ1biB0aGUgYWdncmVnYXRpb25zIG9uLiAoZGVmYXVsdD1Ob25lKSAKICAgIDpwYXJhbSBtZXRyaWNfYWdncmVnYXRpb25zOiBBcnJheSBjb250YWluaW5nIGEgbGlzdCBvZiBhZ2dyZWdhdGlvbiBmdW5jdGlvbiBuYW1lcyB0byBydW4gb24ge21ldHJpY3N9LgogICAgICAgICAgICAgICAgICAgICAgICAoRXg6ICdtZWFuJywgJ3N0ZCcpIChkZWZhdWx0PSdtZWFuJykKICAgIDpwYXJhbSBsYWJlbF9hZ2dyZWdhdGlvbnM6ICBBcnJheSBjb250YWluaW5nIGEgbGlzdCBvZiBhZ2dyZWdhdGlvbiBmdW5jdGlvbiBuYW1lcyB0byBydW4gb24ge21ldHJpY3N9LgogICAgICAgICAgICAgICAgICAgICAgICAoRXg6ICdtYXgnLCAnbWluJykgKGRlZmF1bHQ9J21heCcpIAogICAgOnBhcmFtIHN1ZmZpeDogICAgICBTdWZmaXggdG8gYWRkIHRvIHRoZSBmZWF0dXJlIG5hbWUsIEUuZzogPEZlYXR1cmVfTmFtZT5fPEFnZ19GdW5jdGlvbj5fPFN1ZmZpeD4KICAgICAgICAgICAgICAgICAgICAgICAgKEV4OiAnbGFzdF82MF9taW51dGVzJykgKGRlZmF1bHQ9JycpCiAgICA6cGFyYW0gd2luZG93OiAgICAgIFdpbmRvdyBzaXplIHRvIHBlcmZvcm0gdGhlIHJvbGxpbmcgYWdncmVnYXRlIG9uLiAoZGVmYXVsdD0zKQogICAgOnBhcmFtIGNlbnRlcjogICAgICBJZiBUcnVlLCBTZXRzIHRoZSB2YWx1ZSBmb3IgdGhlIGNlbnRyYWwgc2FtcGxlIGluIHRoZSB3aW5kb3csCiAgICAgICAgICAgICAgICAgICAgICAgIElmIEZhbHNlLCB3aWxsIHNldCB0aGUgdmFsdWUgdG8gdGhlIGxhc3Qgc2FtcGxlLiAoZGVmYXVsdD1GYWxzZSkKICAgIDpwYXJhbSBpbnBsYWNlOiAgICAgSWYgVHJ1ZSwgd2lsbCByZXR1cm4gb25seSB0aGUgYWdncmVnYXRlZCByZXN1bHRzLgogICAgICAgICAgICAgICAgICAgICAgICBJZiBGYWxzZSwgd2lsbCBqb2luIHRoZSBhZ2dyZWdhdGVkIHJlc3VsdHMgd2l0aCB0aGUgb3JpZ2luYWwgZGF0YWZyYW1lCiAgICA6cGFyYW0gZHJvcF9uYTogICAgIFdpbGwgZHJvcCBuYSBsaW5lcyBkdWUgdG8gdGhlIFJvbGxpbmcuCiAgICA6cGFyYW0gZmlsZXNfdG9fc2VsZWN0OiBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiAqbGF0ZXN0KiBmaWxlcyB0byBzZWxlY3QgKGFuZCBjb25jYXQpIGZvciBhZ2dyZWdhdGlvbi4KICAgICIiIgogICAgCiAgICBmcm9tX21vZGVsID0gdHlwZShkZl9hcnRpZmFjdCkgPT0gcGQuRGF0YUZyYW1lCiAgICBpZiBmcm9tX21vZGVsOgogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0FnZ3JlZ2F0aW5nIGZyb20gQnVmZmVyJykKICAgICAgICBpbnB1dF9kZiA9IGRmX2FydGlmYWN0CiAgICBlbHNlOgogICAgICAgIGlmIGRmX2FydGlmYWN0LnVybC5lbmRzd2l0aCgnLycpOiAgICMgaXMgYSBkaXJlY3Rvcnk/CiAgICAgICAgICAgIG1wYXRoID0gW29zLnBhdGguam9pbihkZl9hcnRpZmFjdC51cmwsIGZpbGUpIGZvciBmaWxlIGluIGRmX2FydGlmYWN0Lmxpc3RkaXIoKSBpZiBmaWxlLmVuZHN3aXRoKCgncGFycXVldCcsICdwcScpKV0KICAgICAgICAgICAgZmlsZXNfYnlfdXBkYXRlZCA9IHNvcnRlZChtcGF0aCwga2V5PW9zLnBhdGguZ2V0bXRpbWUsIHJldmVyc2U9VHJ1ZSkKICAgICAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbyhmaWxlc19ieV91cGRhdGVkKQogICAgICAgICAgICBsYXRlc3QgPSBmaWxlc19ieV91cGRhdGVkWzpmaWxlc190b19zZWxlY3RdCiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZidBZ2dyZWdhdGluZyB7bGF0ZXN0fScpCiAgICAgICAgICAgIGlucHV0X2RmID0gcGQuY29uY2F0KFtjb250ZXh0LmdldF9kYXRhaXRlbShkZikuYXNfZGYoKSBmb3IgZGYgaW4gbGF0ZXN0XSkKICAgICAgICBlbHNlOiAgIyBBIHJlZ3VsYXIgYXJ0aWZhY3QKICAgICAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbyhmJ0FnZ3JlZ2F0aW5nIHtkZl9hcnRpZmFjdC51cmx9JykKICAgICAgICAgICAgaW5wdXRfZGYgPSBkZl9hcnRpZmFjdC5hc19kZigpCiAgICAKICAgIGlmIG5vdCAobWV0cmljcyBvciBsYWJlbHMpOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3BsZWFzZSBzcGVjaWZ5IG1ldHJpY3Mgb3IgbGFiZWxzIHBhcmFtJykKICAgIAogICAgaWYga2V5czoKICAgICAgICBjdXJyZW50X2luZGV4ID0gaW5wdXRfZGYuaW5kZXgubmFtZXMKICAgICAgICBpbmRleGVzX3RvX2Ryb3AgPSBbY29sIGZvciBjb2wgaW4gaW5wdXRfZGYuaW5kZXgubmFtZXMgaWYgY29sIG5vdCBpbiBrZXlzXQogICAgICAgIGRmID0gaW5wdXRfZGYucmVzZXRfaW5kZXgobGV2ZWw9aW5kZXhlc190b19kcm9wKQogICAgZWxzZToKICAgICAgICBkZiA9IGlucHV0X2RmCiAgICAgICAgCiAgICBpZiBtZXRyaWNzOgogICAgICAgIG1ldHJpY3NfZGYgPSBkZi5sb2NbOiwgbWV0cmljc10ucm9sbGluZyh3aW5kb3c9d2luZG93LCBjZW50ZXI9Y2VudGVyKS5hZ2dyZWdhdGUobWV0cmljX2FnZ3JlZ2F0aW9ucykKICAgICAgICBtZXRyaWNzX2RmLmNvbHVtbnMgPSBbJ18nLmpvaW4oY29sKS5zdHJpcCgpIGZvciBjb2wgaW4gbWV0cmljc19kZi5jb2x1bW5zLnZhbHVlc10KICAgICAgICAKICAgICAgICBpZiBzdWZmaXg6CiAgICAgICAgICAgIG1ldHJpY3NfZGYuY29sdW1ucyA9IFtmJ3ttZXRyaWN9X3tzdWZmaXh9JyBmb3IgbWV0cmljIGluIG1ldHJpY3NfZGYuY29sdW1uc10KICAgICAgICAgICAgCiAgICAgICAgaWYgbm90IGlucGxhY2U6CiAgICAgICAgICAgIGZpbmFsX2RmID0gcGQubWVyZ2UoaW5wdXRfZGYsIG1ldHJpY3NfZGYsIHN1ZmZpeGVzPSgnJywgc3VmZml4KSwgbGVmdF9pbmRleD1UcnVlLCByaWdodF9pbmRleD1UcnVlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGZpbmFsX2RmID0gbWV0cmljc19kZgoKICAgIGlmIGxhYmVsczoKICAgICAgICBsYWJlbHNfZGYgPSBkZi5sb2NbOiwgbGFiZWxzXS5yb2xsaW5nKHdpbmRvdz13aW5kb3csCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI9Y2VudGVyKS5hZ2dyZWdhdGUobGFiZWxfYWdncmVnYXRpb25zKQogICAgICAgIGxhYmVsc19kZi5jb2x1bW5zID0gWydfJy5qb2luKGNvbCkuc3RyaXAoKSBmb3IgY29sIGluIGxhYmVsc19kZi5jb2x1bW5zLnZhbHVlc10KICAgICAgICAKICAgICAgICBpZiBzdWZmaXg6CiAgICAgICAgICAgIGxhYmVsc19kZi5jb2x1bW5zID0gW2Yne2xhYmVsfV97c3VmZml4fScgZm9yIGxhYmVsIGluIGxhYmVsc19kZi5jb2x1bW5zXQogICAgICAgICAgICAKICAgICAgICBpZiBtZXRyaWNzOgogICAgICAgICAgICBmaW5hbF9kZiA9IHBkLm1lcmdlKGZpbmFsX2RmLCBsYWJlbHNfZGYsIHN1ZmZpeGVzPSgnJywgc3VmZml4KSwgbGVmdF9pbmRleD1UcnVlLCByaWdodF9pbmRleD1UcnVlKSAgIAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIG5vdCBpbnBsYWNlOgogICAgICAgICAgICAgICAgZmluYWxfZGYgPSBwZC5tZXJnZShpbnB1dF9kZiwgbGFiZWxzX2RmLCBzdWZmaXhlcz0oJycsIHN1ZmZpeCksIGxlZnRfaW5kZXg9VHJ1ZSwgcmlnaHRfaW5kZXg9VHJ1ZSkgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZpbmFsX2RmID0gbGFiZWxzX2RmCiAgICAgICAgICAgICAgICAKICAgIGlmIGRyb3BfbmE6CiAgICAgICAgZmluYWxfZGYgPSBmaW5hbF9kZi5kcm9wbmEoKQogICAgICAgIAogICAgY29udGV4dC5sb2dnZXIuaW5mbygnTG9nZ2luZyBhcnRpZmFjdCcpCiAgICBpZiBub3QgZnJvbV9tb2RlbDoKICAgICAgICBjb250ZXh0LmxvZ19kYXRhc2V0KGtleT0nYWdncmVnYXRlJywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZj1maW5hbF9kZiwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ9J3BhcnF1ZXQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxfcGF0aD1zYXZlX3RvKQogICAgZWxzZToKICAgICAgICByZXR1cm4gZmluYWxfZGYKCg==
    commands: []
    code_origin: https://github.com/mlrun/functions.git#f5b8cee2e6e04a060001f2a9f0d416fba1420247:C:\Users\yonatans\projects\functions\aggregate\aggregate.py
    origin_filename: C:\Users\yonatans\projects\functions\aggregate\aggregate.py
  disable_auto_mount: false
  priority_class_name: ''
  affinity: null
verbose: false
