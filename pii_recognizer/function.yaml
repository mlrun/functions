kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: 84a4076c150813cbfbc3993f6f2f8fede4634dd9
  project: default
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: git@github.com-personal:pengwei715/functions.git#260a134fcfbfa28def1b6fd974a77e7699ac08af:pii_recognizer.py
    origin_filename: pii_recognizer.py
    requirements:
    - mlrun==1.4.0-rc19
    - pandas
    - presidio-anonymizer
    - presidio-analyzer
    - torch
    - flair@git+https://github.com/flairNLP/flair.git@d4ed67bf663e4066517f00397412510d90043653
    - st-annotated-text
    - https://huggingface.co/beki/en_spacy_pii_distilbert/resolve/main/en_spacy_pii_distilbert-any-py3-none-any.whl
  entry_points:
    recognize_pii:
      name: recognize_pii
      doc: Walk through the input path, recognize PII in text and store the anonymized
        text in the output path. Generate the html with different colors for each
        entity, json report of the explaination.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun context. this is needed for log the artifacts.
        default: ''
      - name: input_path
        type: str
        doc: The input path of the text files needs to be analyzied.
        default: ''
      - name: output_path
        type: str
        doc: The output path to store the anonymized text.
        default: ''
      - name: output_suffix
        type: str
        doc: The surfix of output key for the anonymized text. for example if the
          input file is pii.txt, the output key is anoymized, the output file name
          will be pii_anonymized.txt.
        default: ''
      - name: html_key
        type: str
        doc: The html key for the artifact.
        default: ''
      - name: score_threshold
        type: float
        doc: The score threshold to mark the recognition as trusted.
        default: ''
      - name: entities
        type: List[str]
        doc: The list of entities to recognize.
        default: null
      - name: entity_operator_map
        type: dict
        doc: The map of entity to operator (mask, redact, replace, keep, hash, and
          its params)
        default: null
      - name: model
        type: str
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: whole
      - name: generate_json
        type: bool
        default: true
      - name: generate_html
        type: bool
        default: true
      - name: is_full_text
        type: bool
        doc: Whether to return the full text or only the masked text.
        default: true
      - name: is_full_html
        type: bool
        doc: Whether to return the full html or just the annotated text
        default: true
      - name: is_full_report
        type: bool
        doc: Whether to return the full report or just the score and start, end index
        default: true
      outputs:
      - default: ''
        doc: 'A tuple of:'
      lineno: 782
  description: This function is used to recognize PII in a given text
  default_handler: recognize_pii
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
