kind: job
metadata:
  name: test-classifier
  tag: ''
  hash: 4a390d131973304731c44f39306cba340c14bc81
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - test
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: test_classifier
  description: ''
  build:
    functionSourceCode: aW1wb3J0IG9zCmltcG9ydCBqc29uCmltcG9ydCBpbXBvcnRsaWIKZnJvbSBjbG91ZHBpY2tsZSBpbXBvcnQgbG9hZAoKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCBwYW5kYXMgYXMgcGQKCmZyb20gc2tsZWFybi5wcmVwcm9jZXNzaW5nIGltcG9ydCBsYWJlbF9iaW5hcml6ZQoKZnJvbSBza2xlYXJuLm1ldHJpY3MgaW1wb3J0IChyb2NfYXVjX3Njb3JlLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZjFfc2NvcmUsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2VfcHJlY2lzaW9uX3Njb3JlLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2NfY3VydmUsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZ1c2lvbl9tYXRyaXgpCgpmcm9tIHNrbGVhcm4udXRpbHMubXVsdGljbGFzcyBpbXBvcnQgdW5pcXVlX2xhYmVscwoKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdApmcm9tIG1hdHBsb3RsaWIuZmlndXJlIGltcG9ydCBGaWd1cmUKaW1wb3J0IHNlYWJvcm4gYXMgc25zCgpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIFVuaW9uLCBMaXN0LCBUdXBsZQoKZnJvbSBtbHJ1bi5leGVjdXRpb24gaW1wb3J0IE1MQ2xpZW50Q3R4CmZyb20gbWxydW4uZGF0YXN0b3JlIGltcG9ydCBEYXRhSXRlbQpmcm9tIG1scnVuLmFydGlmYWN0cyBpbXBvcnQgVGFibGVBcnRpZmFjdCwgUGxvdEFydGlmYWN0CgppbXBvcnQgd2FybmluZ3MKd2FybmluZ3Muc2ltcGxlZmlsdGVyKGFjdGlvbj0iaWdub3JlIiwgY2F0ZWdvcnk9RnV0dXJlV2FybmluZykKCmRlZiBfZ2NmX2NsZWFyKHBsdCk6CiAgICBwbHQuY2xhKCkKICAgIHBsdC5jbGYoKQogICAgcGx0LmNsb3NlKCkgICAgICAgIAoKZGVmIHRlc3RfY2xhc3NpZmllcigKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgbW9kZWxzX2RpcjogVW5pb25bRGF0YUl0ZW0sIHN0cl0sIAogICAgdGVzdF9zZXQ6IERhdGFJdGVtLAogICAgbGFiZWxfY29sdW1uOiBzdHIsCiAgICBzY29yZV9tZXRob2Q6IHN0ciA9ICdtaWNybycsCiAgICBrZXk6IHN0ciA9ICIiCikgLT4gTm9uZToKICAgICIiIlRlc3Qgb25lIG9yIG1vcmUgY2xhc3NpZmllciBtb2RlbHMgYWdhaW5zdCBoZWxkLW91dCBkYXRhc2V0CiAgICAKICAgIFVzaW5nIGhlbGQtb3V0IHRlc3QgZmVhdHVyZXMsIGV2YWx1YXRlcyB0aGUgcGVmb3JtYW5jZSBvZiB0aGUgZXN0aW1hdGVkIG1vZGVsCiAgICAKICAgIENhbiBiZSBwYXJ0IG9mIGEga3ViZWZsb3cgcGlwZWxpbmUgYXMgYSB0ZXN0IHN0ZXAgdGhhdCBpcyBydW4gcG9zdCBFREEgYW5kIAogICAgdHJhaW5pbmcvdmFsaWRhdGlvbiBjeWNsZXMKICAgIAogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgdGhlIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBtb2RlbHNfZGlyOiAgICAgIGFydGlmYWN0IG1vZGVscyByZXByZXNlbnRpbmcgYSBmb2xkZXIgb3IgYSBmb2xkZXIKICAgIDpwYXJhbSB0ZXN0X3NldDogICAgICAgIHRlc3QgZmVhdHVyZXMgYW5kIGxhYmVscwogICAgOnBhcmFtIGxhYmVsX2NvbHVtbjogICAgY29sdW1uIG5hbWUgZm9yIGdyb3VuZCB0cnV0aCBsYWJlbHMKICAgIDpwYXJhbSBzY29yZV9tZXRob2Q6ICAgICBmb3IgbXVsdGljbGFzcyBjbGFzc2lmaWNhdGlvbgogICAgOnBhcmFtIGtleTogICAgICAgICAgICAga2V5IGZvciByZXN1bHRzIGFydGlmYWN0CiAgICAiIiIKICAgIG9zLm1ha2VkaXJzKG9zLnBhdGguam9pbihjb250ZXh0LmFydGlmYWN0X3BhdGgsICJwbG90cyIpLCBleGlzdF9vaz1UcnVlKQoKICAgIHh0ZXN0ID0gcGQucmVhZF9jc3Yoc3RyKHRlc3Rfc2V0KSkKICAgIHl0ZXN0ID0geHRlc3QucG9wKGxhYmVsX2NvbHVtbikKCiAgICBjb250ZXh0LmhlYWRlciA9IGxpc3QoeHRlc3QuY29sdW1ucy52YWx1ZXMpCiAgICAKICAgIGRlZiBfZXZhbF9tb2RlbChtb2RlbCk6CiAgICAgICAgIyBlbmNsb3NlIGFsbCBleGNlcHQgbW9kZWwKICAgICAgICB5dGVzdGIgPSBsYWJlbF9iaW5hcml6ZSh5dGVzdCwgY2xhc3Nlcz1bMCwgMSwgMl0pCiAgICAgICAgY2xmID0gbG9hZChvcGVuKG9zLnBhdGguam9pbihzdHIobW9kZWxzX2RpciksIG1vZGVsKSwgInJiIikpCiAgICAgICAgaWYgY2FsbGFibGUoZ2V0YXR0cihjbGYsICJwcmVkaWN0X3Byb2JhIikpOgogICAgICAgICAgICB5X3Njb3JlID0gY2xmLnByZWRpY3RfcHJvYmEoeHRlc3QudmFsdWVzKQogICAgICAgICAgICB5cHJlZCA9IGNsZi5wcmVkaWN0KHh0ZXN0LnZhbHVlcykKICAgICAgICAgICAgcGxvdF9yb2MoY29udGV4dCwgeXRlc3RiLCB5X3Njb3JlLCBrZXk9ZiJyb2MiKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHlwcmVkID0gY2xmLnByZWRpY3QoeHRlc3QudmFsdWVzKSAjIHJlZmFjdG9yCiAgICAgICAgICAgIHlfc2NvcmUgPSBOb25lCiAgICAgICAgcGxvdF9jb25mdXNpb25fbWF0cml4KGNvbnRleHQsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl0ZXN0LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5cHJlZCwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcz1jb250ZXh0LmhlYWRlcls6LTFdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT1mImNvbmZ1c2lvbiIpCiAgICAgICAgaWYgaGFzYXR0cihjbGYsICJmZWF0dXJlX2ltcG9ydGFuY2VzXyIpOgogICAgICAgICAgICBwcmludChjbGYpCiAgICAgICAgICAgIHBsb3RfaW1wb3J0YW5jZShjb250ZXh0LCBjbGYsIGtleT1mImZlYXRpbXAiKQogICAgICAgIGF2ZXJhZ2VfcHJlY2lzaW9uID0gYXZlcmFnZV9wcmVjaXNpb25fc2NvcmUoeXRlc3RiLCB5X3Njb3JlLCBhdmVyYWdlPXNjb3JlX21ldGhvZCkKICAgICAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJhY2N1cmFjeSIsIGZsb2F0KGNsZi5zY29yZSh4dGVzdC52YWx1ZXMsIHl0ZXN0LnZhbHVlcykpKQogICAgICAgIGNvbnRleHQubG9nX3Jlc3VsdChmInJvY2F1YyIsIHJvY19hdWNfc2NvcmUoeXRlc3RiLCB5X3Njb3JlKSkKICAgICAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJmMV9zY29yZSIsIGYxX3Njb3JlKHl0ZXN0LnZhbHVlcywgeXByZWQsIGF2ZXJhZ2U9c2NvcmVfbWV0aG9kKSkKICAgICAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJhdmdfcHJlY3Njb3JlIiwgYXZlcmFnZV9wcmVjaXNpb24pCgogICAgCiAgICBiZXN0X21vZGVsID0gTm9uZQogICAgZm9yIG1vZGVsIGluIG9zLmxpc3RkaXIoc3RyKG1vZGVsc19kaXIpKToKICAgICAgICBpZiBtb2RlbC5lbmRzd2l0aCgnLnBrbCcpOgogICAgICAgICAgICBfZXZhbF9tb2RlbChtb2RlbCkKICAgICAgICAgICAgIyBIQUNLOiB0aGVyZSBpcyBvbmx5IG9uZSBtb2RlbCBoZXJlCiAgICAgICAgICAgIGJlc3RfbW9kZWwgPSBtb2RlbAoKICAgICMgbG9nICdiZXN0IG1vZGVsJyBhcyBhcnRpZmFjdAogICAgY29udGV4dC5sb2dfYXJ0aWZhY3QoJ1RPREFZUy1NT0RFTFMtVEVTVC1SRVBPUlQnLCBsb2NhbF9wYXRoPWJlc3RfbW9kZWwpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdCgnREVQTE9ZJywgYm9keT1iJ3RydWUnLCBsb2NhbF9wYXRoPSdERVBMT1knKQogICAgCmRlZiBwbG90X3JvYygKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LCAKICAgIHlfbGFiZWxzLAogICAgeV9wcm9icywKICAgIGtleT0icm9jIiwKICAgIGZtdD0icG5nIgopOgogICAgIiIiUGxvdCBhbiBST0MgY3VydmUgZnJvbSB0ZXN0IGRhdGEgc2F2ZWQgaW4gYW4gYXJ0aWZhY3Qgc3RvcmUuCiAgICAKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSB5X2xhYmVsczogICAgICAgIHRlc3QgZGF0YSBsYWJlbHMKICAgIDpwYXJhbSB5X3Byb2JzOiAgICAgICAgIHRlc3QgZGF0YSAKICAgICIiIgogICAgX2djZl9jbGVhcihwbHQpCiAgICAKICAgIGZwciA9IGRpY3QoKQogICAgdHByID0gZGljdCgpCiAgICByb2NfYXVjID0gZGljdCgpCiAgICBwbHQucGxvdChbMCwgMV0sIFswLCAxXSwgImstLSIpCiAgICBwbHQueGxhYmVsKCJmYWxzZSBwb3NpdGl2ZSByYXRlIikKICAgIHBsdC55bGFiZWwoInRydWUgcG9zaXRpdmUgcmF0ZSIpCiAgICBwbHQudGl0bGUoInJvYyBjdXJ2ZSIpCiAgICBwbHQubGVnZW5kKGxvYz0iYmVzdCIpCiAgICBmb3IgaSBpbiByYW5nZSh5X2xhYmVscy5zaGFwZVsxXSk6CiAgICAgICAgZnByW2ldLCB0cHJbaV0sIF8gPSByb2NfY3VydmUoeV9sYWJlbHNbOiwgaV0sIHlfcHJvYnNbOiwgaV0pCiAgICAgICAgcm9jX2F1Y1tpXSA9IGF1YyhmcHJbaV0sIHRwcltpXSkKICAgICAgICBwbHQucGxvdChmcHJbaV0sIHRwcltpXSwgbGFiZWw9ZiJjbGFzcyB7aX0iKQoKICAgIGZpZyA9IHBsdC5nY2YoKQogICAgb3MubWFrZWRpcnMob3MucGF0aC5qb2luKGNvbnRleHQuYXJ0aWZhY3RfcGF0aCwgInBsb3RzIiksIGV4aXN0X29rPVRydWUpCiAgICBmaWcuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oY29udGV4dC5hcnRpZmFjdF9wYXRoLCBmInBsb3RzL3trZXl9LntmbXR9IikpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChQbG90QXJ0aWZhY3Qoa2V5LCAgYm9keT1maWcpLCBsb2NhbF9wYXRoPWYicGxvdHMve2tleX0ue2ZtdH0iKQoKZGVmIHBsb3RfY29uZnVzaW9uX21hdHJpeCgKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LCAKICAgIGxhYmVscywgCiAgICBwcmVkaWN0aW9ucywKICAgIGNsYXNzZXMsCiAgICBrZXk6IHN0ciA9ImNvbmZ1c2lvbiIsCiAgICBmbXQ6IHN0ciA9ICJwbmciCik6CiAgICAiIiJDcmVhdGUgYSBjb25mdXNpb24gbWF0cml4LgogICAgUGxvdCBhbmQgc2F2ZSBhIGNvbmZ1c2lvbiBtYXRyaXggdXNpbmcgdGVzdCBkYXRhIGZyb20gYQogICAgcGlwZWxpbmUgc3RlcC4KICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBsYWJlbHM6ICAgICAgICAgIHRlc3QgZGF0YSBsYWJlbHMKICAgIDpwYXJhbSBwcmVkaWN0aW9uczogICAgIHRlc3QgZGF0YSBwcmVkaWN0aW9ucwogICAgIiIiCiAgICBfZ2NmX2NsZWFyKHBsdCkKCiAgICBjbSA9IF9wbG90X2NvbmZ1c2lvbl9tYXRyaXgobGFiZWxzLCBwcmVkaWN0aW9ucywgY2xhc3Nlcz1jbGFzc2VzLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1rZXksIG5vcm1hbGl6ZT1UcnVlKQoKICAgIGZpZyA9IHBsdC5nY2YoKQogICAgb3MubWFrZWRpcnMob3MucGF0aC5qb2luKGNvbnRleHQuYXJ0aWZhY3RfcGF0aCwgInBsb3RzIiksIGV4aXN0X29rPVRydWUpCiAgICBmaWcuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oY29udGV4dC5hcnRpZmFjdF9wYXRoLCBmInBsb3RzL3trZXl9LntmbXR9IikpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChQbG90QXJ0aWZhY3Qoa2V5LCAgYm9keT1maWcpLCBsb2NhbF9wYXRoPWYicGxvdHMve2tleX0ue2ZtdH0iKQoKICAgIF9nY2ZfY2xlYXIocGx0KQoKZGVmIHBsb3RfaW1wb3J0YW5jZSgKICAgIGNvbnRleHQsCiAgICBtb2RlbCwKICAgIGtleTogc3RyID0gImZlYXR1cmUtaW1wb3J0YW5jZXMiLAogICAgZm10ID0gInBuZyIKKToKICAgICIiIkRpc3BsYXkgZXN0aW1hdGVkIGZlYXR1cmUgaW1wb3J0YW5jZXMuCiAgICA6cGFyYW0gY29udGV4dDogICAgIGZ1bmN0aW9uIGNvbnRleHQKICAgIDpwYXJhbSBtb2RlbDogICAgICAgZml0dGVkIGxpZ2h0Z2JtIG1vZGVsCiAgICAiIiIKICAgIF9nY2ZfY2xlYXIocGx0KQogICAgCiAgICAjIGNyZWF0ZSBhIGZlYXR1cmUgaW1wb3J0YW5jZSB0YWJsZSB3aXRoIGRlc2lyZWQgbGFiZWxzCiAgICB6aXBwZWQgPSB6aXAobW9kZWwuZmVhdHVyZV9pbXBvcnRhbmNlc18sIGNvbnRleHQuaGVhZGVyKQoKICAgIGZlYXR1cmVfaW1wID0gcGQuRGF0YUZyYW1lKHNvcnRlZCh6aXBwZWQpLCBjb2x1bW5zPVsiZnJlcSIsImZlYXR1cmUiXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuc29ydF92YWx1ZXMoYnk9ImZyZXEiLCBhc2NlbmRpbmc9RmFsc2UpCgogICAgcGx0LmZpZ3VyZShmaWdzaXplPSgyMCwgMTApKQogICAgc25zLmJhcnBsb3QoeD0iZnJlcSIsIHk9ImZlYXR1cmUiLCBkYXRhPWZlYXR1cmVfaW1wKQogICAgcGx0LnRpdGxlKCJmZWF0dXJlcyIpCiAgICBwbHQudGlnaHRfbGF5b3V0KCkKCiAgICBmaWcgPSBwbHQuZ2NmKCkKICAgIG9zLm1ha2VkaXJzKG9zLnBhdGguam9pbihjb250ZXh0LmFydGlmYWN0X3BhdGgsICJwbG90cyIpLCBleGlzdF9vaz1UcnVlKQogICAgZmlnLnNhdmVmaWcob3MucGF0aC5qb2luKGNvbnRleHQuYXJ0aWZhY3RfcGF0aCwgZiJwbG90cy97a2V5fS57Zm10fSIpKQogICAgY29udGV4dC5sb2dfYXJ0aWZhY3QoUGxvdEFydGlmYWN0KGYie2tleX0ue2ZtdH0iLCBib2R5PWZpZyksIGxvY2FsX3BhdGg9ZiJwbG90cy97a2V5fS57Zm10fSIpCgogICAgIyBmZWF0dXJlIGltcG9ydGFuY2VzIGFyZSBhbHNvIHNhdmVkIGFzIGEgdGFibGU6CiAgICBmZWF0dXJlX2ltcC50b19jc3Yob3MucGF0aC5qb2luKGNvbnRleHQuYXJ0aWZhY3RfcGF0aCwga2V5KyIuY3N2IikpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdChrZXkrIi5jc3YiLCBsb2NhbF9wYXRoPWtleSsiLmNzdiIpCgogICAgX2djZl9jbGVhcihwbHQpCgpkZWYgX3Bsb3RfY29uZnVzaW9uX21hdHJpeCh5X3RydWUsIHlfcHJlZCwgY2xhc3Nlcz1bIm5lZyIsICJwb3MiXSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplPVRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9Tm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBjbWFwPXBsdC5jbS5CbHVlcyk6CiAgICAiIiJUaGlzIGNhbiBiZSBkZXByZWNhdGVkIG9uY2UgaW50ZWwgcHl0aG9uIHVwZ3JhZGVzIHNjaWtpdC1sZWFybiB0byA+MC4yMgogICAgCiAgICBUaGlzIGZ1bmN0aW9uIHByaW50cyBhbmQgcGxvdHMgdGhlIGNvbmZ1c2lvbiBtYXRyaXguCiAgICBOb3JtYWxpemF0aW9uIGNhbiBiZSBhcHBsaWVkIGJ5IHNldHRpbmcgYG5vcm1hbGl6ZT1UcnVlYC4KICAgIAogICAgaHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnLzAuMjEvYXV0b19leGFtcGxlcy9tb2RlbF9zZWxlY3Rpb24vcGxvdF9jb25mdXNpb25fbWF0cml4Lmh0bWwjc3BoeC1nbHItYXV0by1leGFtcGxlcy1tb2RlbC1zZWxlY3Rpb24tcGxvdC1jb25mdXNpb24tbWF0cml4LXB5CiAgICAiIiIKICAgIGlmIG5vdCB0aXRsZToKICAgICAgICBpZiBub3JtYWxpemU6CiAgICAgICAgICAgIHRpdGxlID0gIk5vcm1hbGl6ZWQgY29uZnVzaW9uIG1hdHJpeCIKICAgICAgICBlbHNlOgogICAgICAgICAgICB0aXRsZSA9ICJDb25mdXNpb24gbWF0cml4LCB3aXRob3V0IG5vcm1hbGl6YXRpb24iCgogICAgIyBDb21wdXRlIGNvbmZ1c2lvbiBtYXRyaXgKICAgIGNtID0gY29uZnVzaW9uX21hdHJpeCh5X3RydWUsIHlfcHJlZCkKICAgICMgT25seSB1c2UgdGhlIGxhYmVscyB0aGF0IGFwcGVhciBpbiB0aGUgZGF0YQogICAgI2NsYXNzZXMgPSBjbGFzc2VzW3VuaXF1ZV9sYWJlbHMoeV90cnVlLCB5X3ByZWQpXQogICAgaWYgbm9ybWFsaXplOgogICAgICAgIGNtID0gY20uYXN0eXBlKCJmbG9hdCIpIC8gY20uc3VtKGF4aXM9MSlbOiwgbnAubmV3YXhpc10KCiAgICBmaWcsIGF4ID0gcGx0LnN1YnBsb3RzKCkKICAgIGltID0gYXguaW1zaG93KGNtLCBpbnRlcnBvbGF0aW9uPSJuZWFyZXN0IiwgY21hcD1jbWFwKQogICAgYXguZmlndXJlLmNvbG9yYmFyKGltLCBheD1heCkKICAgICMgV2Ugd2FudCB0byBzaG93IGFsbCB0aWNrcy4uLgogICAgYXguc2V0KHh0aWNrcz1ucC5hcmFuZ2UoY20uc2hhcGVbMV0pLAogICAgICAgICAgIHl0aWNrcz1ucC5hcmFuZ2UoY20uc2hhcGVbMF0pLAogICAgICAgICAgICMgLi4uIGFuZCBsYWJlbCB0aGVtIHdpdGggdGhlIHJlc3BlY3RpdmUgbGlzdCBlbnRyaWVzCiAgICAgICAgICAgeHRpY2tsYWJlbHM9Y2xhc3NlcywgeXRpY2tsYWJlbHM9Y2xhc3NlcywKICAgICAgICAgICB0aXRsZT10aXRsZSwKICAgICAgICAgICB5bGFiZWw9IlRydWUgbGFiZWwiLAogICAgICAgICAgIHhsYWJlbD0iUHJlZGljdGVkIGxhYmVsIikKCiAgICAjIFJvdGF0ZSB0aGUgdGljayBsYWJlbHMgYW5kIHNldCB0aGVpciBhbGlnbm1lbnQuCiAgICBwbHQuc2V0cChheC5nZXRfeHRpY2tsYWJlbHMoKSwgcm90YXRpb249NDUsIGhhPSJyaWdodCIsCiAgICAgICAgICAgICByb3RhdGlvbl9tb2RlPSJhbmNob3IiKQoKICAgICMgTG9vcCBvdmVyIGRhdGEgZGltZW5zaW9ucyBhbmQgY3JlYXRlIHRleHQgYW5ub3RhdGlvbnMuCiAgICBmbXQgPSAiLjJmIiBpZiBub3JtYWxpemUgZWxzZSAiZCIKICAgIHRocmVzaCA9IGNtLm1heCgpIC8gMi4KICAgIGZvciBpIGluIHJhbmdlKGNtLnNoYXBlWzBdKToKICAgICAgICBmb3IgaiBpbiByYW5nZShjbS5zaGFwZVsxXSk6CiAgICAgICAgICAgIGF4LnRleHQoaiwgaSwgZm9ybWF0KGNtW2ksIGpdLCBmbXQpLAogICAgICAgICAgICAgICAgICAgIGhvcml6b250YWxhbGlnbm1lbnQ9ImNlbnRlciIsCiAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIiBpZiBjbVtpLCBqXSA+IHRocmVzaCBlbHNlICJibGFjayIpCiAgICBmaWcudGlnaHRfbGF5b3V0KCkKICAgIHJldHVybiBheCAgICA=
    commands: []
    code_origin: https://github.com/mlrun/functions.git#b0ba922e10fa0af2fcf2e04cce51eb7d9243bf25:test_classifier/test_classifier.py
