kind: dask
metadata:
  name: sklearn-classifier-dask
  tag: ''
  hash: 2350f2f67ea733ff838f497135d5d0e0a515e9dd
  project: default
spec:
  command: ''
  image: mlrun/ml-models
  env:
  - name: V3IO_API
    value: ''
  - name: V3IO_USERNAME
    value: ''
  - name: V3IO_ACCESS_KEY
    value: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#dc150ab093629994eb24f5d81f104859bb959a1c:sklearn-classifier-dask.ipynb
  default_handler: ''
  entry_points:
    train_model:
      name: train_model
      doc: Train a sklearn classifier with Dask
      parameters:
      - name: context
        type: MLClientCtx
        doc: Function context.
        default: ''
      - name: dataset
        type: DataItem
        doc: Raw data file.
        default: ''
      - name: model_pkg_class
        type: str
        doc: Model to train, e.g, "sklearn.ensemble.RandomForestClassifier",  or json
          model config.
        default: ''
      - name: label_column
        type: str
        doc: (label) Ground-truth y labels.
        default: label
      - name: train_validation_size
        type: float
        doc: (0.75) Train validation set proportion out of the full dataset.
        default: 0.75
      - name: sample
        type: float
        doc: (1.0) Select sample from dataset (n-rows/% of total), randomzie rows
          as default.
        default: 1.0
      - name: models_dest
        type: str
        doc: (models) Models subfolder on artifact path.
        default: models
      - name: test_set_key
        type: str
        doc: (test_set) Mlrun db key of held out data in artifact store.
        default: test_set
      - name: plots_dest
        type: str
        doc: (plots) Plot subfolder on artifact path.
        default: plots
      - name: dask_key
        type: str
        doc: (dask key) Key of dataframe in dask client "datasets" attribute.
        default: dask_key
      - name: dask_persist
        type: bool
        doc: (False) Should the data be persisted (through the `client.persist`)
        default: false
      - name: scheduler_key
        type: str
        doc: (scheduler) Dask scheduler configuration, json also logged as an artifact.
        default: null
      - name: file_ext
        type: str
        doc: (parquet) format for test_set_key hold out data
        default: parquet
      - name: random_state
        type: int
        doc: (42) sklearn seed
        default: 42
      outputs:
      - default: ''
      lineno: 32
  description: ''
  replicas: 1
  remote: true
  service_type: NodePort
  nthreads: 1
  min_replicas: 0
  max_replicas: 16
  scheduler_timeout: 60 minutes
