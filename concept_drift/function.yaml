kind: job
metadata:
  name: concept-drift
  tag: ''
  hash: 87192574c8dc75e953f3620ef1ff003f3431bf80
  project: default
  labels:
    author: orz
    framework: sklearn
  categories:
  - ml
  - serve
spec:
  command: ''
  args: []
  image: ''
  env: []
  default_handler: concept_drift_deployer
  entry_points:
    concept_drift_deployer:
      name: concept_drift_deployer
      doc: "Deploy a streaming Concept Drift detector on a labeled stream\n   This\
        \ function is the Deployment step for the Streaming Concept Drift Detector.\n\
        \   It will load the selected drift detectors and initialize them with the\
        \ \n   base_dataset's statistics.  Then it will deploy the concept_drift_streaming\
        \ \n   function and pass the models to it for streaming concept-drift detection\
        \ on top\n   of a labeled stream."
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
        default: ''
      - name: base_dataset
        type: DataItem
        doc: Dataset containing label_col and prediction_col to initialize the detectors
        default: ''
      - name: input_stream
        type: str
        doc: labeled stream to track. Should contain label_col and prediction_col
        default: ''
      - name: output_stream
        type: str
        doc: Output stream to push the detector's alerts
        default: ''
      - name: output_tsdb
        type: str
        doc: Output TSDB table to allow analysis and display
        default: ''
      - name: tsdb_batch_size
        type: int
        doc: Batch size of alerts to buffer before pushing to the TSDB
        default: ''
      - name: callbacks
        type: list
        doc: Additional rest endpoints to send the alert data to
        default: ''
      - name: models
        type: list
        doc: List of the detectors to deploy Defaults to ['ddm', 'eddm', 'pagehinkley'].
        default:
        - ddm
        - eddm
        - pagehinkley
      - name: models_dest
        doc: Location for saving the detectors Defaults to 'models' (in relation to
          artifact_path).
        default: models
      - name: pagehinkley_threshold
        type: float
        doc: Drift level threshold for PH detector Defaults to 10.
        default: 10
      - name: ddm_warning_level
        type: float
        doc: Warning level alert for DDM detector Defaults to 2.
        default: 2
      - name: ddm_out_control_level
        type: float
        doc: Drift level alert for DDM detector Defaults to 3.
        default: 3
      - name: label_col
        doc: Label column to be used on base_dataset and input_stream Defaults to
          'label'.
        default: label
      - name: prediction_col
        doc: Prediction column to be used on base_dataset and input_stream Defaults
          to 'prediction'.
        default: prediction
      - name: hub_url
        type: str
        doc: hub_url in case the default is not used, concept_drift_streaming will
          be loaded by this url Defaults to mlconf.hub_url.
        default: <_ast.Name object at 0x7f215b1a4d90>
      - name: fn_tag
        type: str
        doc: hub tag to use Defaults to 'master'
        default: master
      outputs:
      - default: ''
      lineno: 14
  description: Deploy a streaming Concept Drift detector on a labeled stream
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IHNrbXVsdGlmbG93LmRyaWZ0X2RldGVjdGlvbiAjIFdlIHdpbGwgZ3JhYiBvdXIgUEgsIERETSwgRURETSBhbGdvcml0aG1zIGZyb20gaGVyZQppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgb3MKZnJvbSBjbG91ZHBpY2tsZSBpbXBvcnQgZHVtcHMsIGxvYWQsIGR1bXAKCmZyb20gbnVjbGlvLnRyaWdnZXJzIGltcG9ydCBWM0lPU3RyZWFtVHJpZ2dlciAKZnJvbSBtbHJ1biBpbXBvcnQgRGF0YUl0ZW0sIGltcG9ydF9mdW5jdGlvbiwgbWxjb25mLCBNTENsaWVudEN0eCwgbW91bnRfdjNpbwoKaW1wb3J0IHJhbmRvbQoKZGVmIGNvbmNlcHRfZHJpZnRfZGVwbG95ZXIoY29udGV4dDogTUxDbGllbnRDdHgsIGJhc2VfZGF0YXNldDpEYXRhSXRlbSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X3N0cmVhbTpzdHIsIG91dHB1dF9zdHJlYW06c3RyLCBvdXRwdXRfdHNkYjpzdHIsIHRzZGJfYmF0Y2hfc2l6ZTppbnQsIGNhbGxiYWNrczpsaXN0LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxzOmxpc3Q9WydkZG0nLCAnZWRkbScsICdwYWdlaGlua2xleSddLCBtb2RlbHNfZGVzdD0nbW9kZWxzJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZWhpbmtsZXlfdGhyZXNob2xkOmZsb2F0PTEwLCBkZG1fd2FybmluZ19sZXZlbDpmbG9hdD0yLCBkZG1fb3V0X2NvbnRyb2xfbGV2ZWw6ZmxvYXQ9MywKICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxfY29sPSdsYWJlbCcsIHByZWRpY3Rpb25fY29sPSdwcmVkaWN0aW9uJywgaHViX3VybDpzdHI9bWxjb25mLmh1Yl91cmwsIGZuX3RhZzpzdHI9J21hc3RlcicpOgogICAgIiIiRGVwbG95IGEgc3RyZWFtaW5nIENvbmNlcHQgRHJpZnQgZGV0ZWN0b3Igb24gYSBsYWJlbGVkIHN0cmVhbQogICAgICAgVGhpcyBmdW5jdGlvbiBpcyB0aGUgRGVwbG95bWVudCBzdGVwIGZvciB0aGUgU3RyZWFtaW5nIENvbmNlcHQgRHJpZnQgRGV0ZWN0b3IuCiAgICAgICBJdCB3aWxsIGxvYWQgdGhlIHNlbGVjdGVkIGRyaWZ0IGRldGVjdG9ycyBhbmQgaW5pdGlhbGl6ZSB0aGVtIHdpdGggdGhlIAogICAgICAgYmFzZV9kYXRhc2V0J3Mgc3RhdGlzdGljcy4gIFRoZW4gaXQgd2lsbCBkZXBsb3kgdGhlIGNvbmNlcHRfZHJpZnRfc3RyZWFtaW5nIAogICAgICAgZnVuY3Rpb24gYW5kIHBhc3MgdGhlIG1vZGVscyB0byBpdCBmb3Igc3RyZWFtaW5nIGNvbmNlcHQtZHJpZnQgZGV0ZWN0aW9uIG9uIHRvcAogICAgICAgb2YgYSBsYWJlbGVkIHN0cmVhbS4gCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgTUxSdW4gY29udGV4dAogICAgOnBhcmFtIGJhc2VfZGF0YXNldDogICAgRGF0YXNldCBjb250YWluaW5nIGxhYmVsX2NvbCBhbmQgcHJlZGljdGlvbl9jb2wgdG8gaW5pdGlhbGl6ZSB0aGUgZGV0ZWN0b3JzCiAgICA6cGFyYW0gaW5wdXRfc3RyZWFtOiAgICBsYWJlbGVkIHN0cmVhbSB0byB0cmFjay4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3VsZCBjb250YWluIGxhYmVsX2NvbCBhbmQgcHJlZGljdGlvbl9jb2wKICAgIDpwYXJhbSBvdXRwdXRfc3RyZWFtOiAgIE91dHB1dCBzdHJlYW0gdG8gcHVzaCB0aGUgZGV0ZWN0b3IncyBhbGVydHMKICAgIDpwYXJhbSBvdXRwdXRfdHNkYjogICAgIE91dHB1dCBUU0RCIHRhYmxlIHRvIGFsbG93IGFuYWx5c2lzIGFuZCBkaXNwbGF5CiAgICA6cGFyYW0gdHNkYl9iYXRjaF9zaXplOiBCYXRjaCBzaXplIG9mIGFsZXJ0cyB0byBidWZmZXIgYmVmb3JlIHB1c2hpbmcgdG8gdGhlIFRTREIKICAgIDpwYXJhbSBjYWxsYmFja3M6ICAgICAgIEFkZGl0aW9uYWwgcmVzdCBlbmRwb2ludHMgdG8gc2VuZCB0aGUgYWxlcnQgZGF0YSB0bwogICAgOnBhcmFtIG1vZGVsczogICAgICAgICAgTGlzdCBvZiB0aGUgZGV0ZWN0b3JzIHRvIGRlcGxveQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gWydkZG0nLCAnZWRkbScsICdwYWdlaGlua2xleSddLgogICAgOnBhcmFtIG1vZGVsc19kZXN0OiAgICAgTG9jYXRpb24gZm9yIHNhdmluZyB0aGUgZGV0ZWN0b3JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byAnbW9kZWxzJyAoaW4gcmVsYXRpb24gdG8gYXJ0aWZhY3RfcGF0aCkuCiAgICA6cGFyYW0gcGFnZWhpbmtsZXlfdGhyZXNob2xkOiAgRHJpZnQgbGV2ZWwgdGhyZXNob2xkIGZvciBQSCBkZXRlY3RvciBEZWZhdWx0cyB0byAxMC4KICAgIDpwYXJhbSBkZG1fd2FybmluZ19sZXZlbDogICAgICBXYXJuaW5nIGxldmVsIGFsZXJ0IGZvciBERE0gZGV0ZWN0b3IgRGVmYXVsdHMgdG8gMi4KICAgIDpwYXJhbSBkZG1fb3V0X2NvbnRyb2xfbGV2ZWw6ICBEcmlmdCBsZXZlbCBhbGVydCBmb3IgRERNIGRldGVjdG9yIERlZmF1bHRzIHRvIDMuCiAgICA6cGFyYW0gbGFiZWxfY29sOiAgICAgICBMYWJlbCBjb2x1bW4gdG8gYmUgdXNlZCBvbiBiYXNlX2RhdGFzZXQgYW5kIGlucHV0X3N0cmVhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gJ2xhYmVsJy4KICAgIDpwYXJhbSBwcmVkaWN0aW9uX2NvbDogIFByZWRpY3Rpb24gY29sdW1uIHRvIGJlIHVzZWQgb24gYmFzZV9kYXRhc2V0IGFuZCBpbnB1dF9zdHJlYW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvICdwcmVkaWN0aW9uJy4KICAgIDpwYXJhbSBodWJfdXJsOiAgICAgICAgIGh1Yl91cmwgaW4gY2FzZSB0aGUgZGVmYXVsdCBpcyBub3QgdXNlZCwgY29uY2VwdF9kcmlmdF9zdHJlYW1pbmcgd2lsbCBiZSBsb2FkZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoaXMgdXJsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byBtbGNvbmYuaHViX3VybC4KICAgIDpwYXJhbSBmbl90YWc6ICAgICAgICAgIGh1YiB0YWcgdG8gdXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byAnbWFzdGVyJwogICAgIiIiCgogICAgbWxjb25mLmRicGF0aCA9IG1sY29uZi5kYnBhdGggb3IgJ2h0dHA6Ly9tbHJ1bi1hcGk6ODA4MCcKICAgIG1sY29uZi5odWJfdXJsID0gaHViX3VybAogICAgZm4gPSBpbXBvcnRfZnVuY3Rpb24odXJsPSdodWI6Ly9jb25jZXB0X2RyaWZ0X3N0cmVhbWluZycpCiAgICAKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0xvYWRpbmcgYmFzZSBkYXRhc2V0JykKICAgIGJhc2VfZGYgPSBiYXNlX2RhdGFzZXQuYXNfZGYoKQogICAgZXJyb3Jfc3RyZWFtID0gbnAud2hlcmUoYmFzZV9kZltwcmVkaWN0aW9uX2NvbF0udmFsdWVzPT1iYXNlX2RmW2xhYmVsX2NvbF0udmFsdWVzLCAwLCAxKQogICAgCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDcmVhdGluZyBtb2RlbHMnKQogICAgbW9kZWxzID0gW21vZGVsLnN0cmlwKCkgZm9yIG1vZGVsIGluIG9zLmdldGVudignbW9kZWxzJywgJ3BhZ2VoaW5rbGV5LCBkZG0sIGVkZG0nKS5zcGxpdCgnLCcpXQogICAgbW9kZWxzID0geydlZGRtJzogc2ttdWx0aWZsb3cuZHJpZnRfZGV0ZWN0aW9uLkVERE0oKSwKICAgICAgICAgICAgICAncGFnZWhpbmtsZXknOiBza211bHRpZmxvdy5kcmlmdF9kZXRlY3Rpb24uUGFnZUhpbmtsZXkobWluX2luc3RhbmNlcz1sZW4oZXJyb3Jfc3RyZWFtKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkPXBhZ2VoaW5rbGV5X3RocmVzaG9sZCksCiAgICAgICAgICAgICAgJ2RkbSc6IHNrbXVsdGlmbG93LmRyaWZ0X2RldGVjdGlvbi5ERE0obWluX251bV9pbnN0YW5jZXM9bGVuKGVycm9yX3N0cmVhbSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ19sZXZlbD1kZG1fd2FybmluZ19sZXZlbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRfY29udHJvbF9sZXZlbD1kZG1fb3V0X2NvbnRyb2xfbGV2ZWwpfQogICAgCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdTdHJlYW1pbmcgZGF0YSB0byBtb2RlbHMnKQogICAgZm9yIGkgaW4gcmFuZ2UobGVuKGVycm9yX3N0cmVhbSkpOgogICAgICAgIGZvciBtb2RlbF9uYW1lLCBtb2RlbCBpbiBtb2RlbHMuaXRlbXMoKToKICAgICAgICAgICAgbW9kZWwuYWRkX2VsZW1lbnQoZXJyb3Jfc3RyZWFtW2ldKQogICAgICAgICAgICAKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0xvZ2dpbmcgcmVhZHkgbW9kZWxzJykKICAgIGZvciBuYW1lLCBtb2RlbCBpbiBtb2RlbHMuaXRlbXMoKToKICAgICAgICBkYXRhID0gZHVtcHMobW9kZWwpCiAgICAgICAgbW9kZWxfZmlsZSA9IGYne25hbWV9LnBrbCcKICAgICAgICBjb250ZXh0LmxvZ19tb2RlbChmJ3tuYW1lfV9jb25jZXB0X2RyaWZ0JywgYm9keT1kYXRhLCBsYWJlbHM9eydmcmFtZXdvcmsnOiAnc2ttdWx0aWZsb3cnLCAnd29ya2Zsb3cnOiAnY29uY2VwdC1kcmlmdCd9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX2ZpbGU9bW9kZWxfZmlsZSwgbW9kZWxfZGlyPW1vZGVsc19kZXN0LCB0YWc9J2xhdGVzdCcpCiAgICAgICAgZm4uc2V0X2VudnMoe2Yne25hbWV9X21vZGVsX3BhdGgnOiBvcy5wYXRoLmpvaW4oY29udGV4dC5hcnRpZmFjdF9wYXRoLCBtb2RlbHNfZGVzdCwgbW9kZWxfZmlsZSl9KQogICAgICAgICAgICAKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0RlcGxveWluZyBDb25jZXB0IERyaWZ0IFN0cmVhbWluZyBmdW5jdGlvbicpCiAgICBmbi5zZXRfZW52cyh7J2xhYmVsX2NvbCc6IGxhYmVsX2NvbCwKICAgICAgICAgICAgICAgICAncHJlZGljdGlvbl9jb2wnOiBwcmVkaWN0aW9uX2NvbCwgCiAgICAgICAgICAgICAgICAgJ2RyaWZ0X3N0cmVhbSc6IG91dHB1dF9zdHJlYW0sCiAgICAgICAgICAgICAgICAgJ3RzZGJfdGFibGUnOiBvdXRwdXRfdHNkYiwKICAgICAgICAgICAgICAgICAncGFnZWhpbmtsZXlfdGhyZXNob2xkJzogcGFnZWhpbmtsZXlfdGhyZXNob2xkLAogICAgICAgICAgICAgICAgICdkZG1fd2FybmluZ19sZXZlbCc6IGRkbV93YXJuaW5nX2xldmVsLAogICAgICAgICAgICAgICAgICdkZG1fb3V0X2NvbnRyb2wnOiBkZG1fb3V0X2NvbnRyb2xfbGV2ZWx9KSAgICAKICAgIGZuLmFkZF90cmlnZ2VyKCdsYWJlbGVkX3N0cmVhbScsIFYzSU9TdHJlYW1UcmlnZ2VyKHVybD1pbnB1dF9zdHJlYW0sIG5hbWU9J2xhYmVsZWRfc3RyZWFtJykpCiAgICBmbi5hcHBseShtb3VudF92M2lvKCkpCiAgICBmbi5kZXBsb3kocHJvamVjdD1jb250ZXh0LnByb2plY3QpCgo=
    base_image: mlrun/ml-models
    commands:
    - python -m pip install scikit-multiflow==0.4.1
    - python -m pip install v3io_frames
    - python -m pip uninstall nuclio-jupyter -y
    - python -m pip install nuclio-jupyter
    code_origin: https://github.com/mlrun/functions#a29d6090ec775a6d6600c80156f442143a129f5f:concept_drift.ipynb
verbose: false
