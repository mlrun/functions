kind: job
metadata:
  name: hugging-face-classifier-trainer
  tag: ''
  hash: f9d8aa4a2c66e24fa418bb163829adc3e2ada06c
  project: ''
  labels:
    author: davids
  categories:
  - deep-learning
  - huggingface
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - onnx~=1.14.1
    - onnxruntime~=1.16.1
    - optimum~=1.6.4
    - transformers~=4.26.1
    - datasets~=2.10.1
    - scikit-learn~=1.0.2
  entry_points:
    add_interface:
      name: add_interface
      doc: 'Enrich the object with this interface properties, methods and functions,
        so it will have this TensorFlow.Keras

        MLRuns features.'
      parameters:
      - name: cls
      - name: obj
        type: Trainer
        doc: The object to enrich his interface.
      - name: restoration
        type: MLRunInterfaceRestorationType
        doc: Restoration information tuple as returned from 'remove_interface' in
          order to add the interface in a certain state.
        default: null
      outputs: []
      lineno: 146
      has_varargs: false
      has_kwargs: false
    mlrun_optimize:
      name: mlrun_optimize
      doc: 'MLRun''s tf.keras.Model.fit wrapper. It will setup the optimizer when
        using horovod. The optimizer must be

        passed in a keyword argument and when using horovod, it must be passed as
        an Optimizer instance, not a string.


        raise MLRunInvalidArgumentError: In case the optimizer provided did not follow
        the instructions above.'
      parameters:
      - name: cls
      outputs: []
      lineno: 79
      has_varargs: false
      has_kwargs: false
    wrapper:
      name: wrapper
      doc: ''
      parameters:
      - name: self
        type: Trainer
      outputs: []
      lineno: 173
      has_varargs: true
      has_kwargs: true
    enable_auto_logging:
      name: enable_auto_logging
      doc: ''
      parameters:
      - name: self
      - name: context
        type: MLClientCtx
      - name: model_name
        type: str
        default: model
      - name: tag
        type: str
        default: ''
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs: []
      lineno: 114
      has_varargs: false
      has_kwargs: false
    mlrun_train:
      name: mlrun_train
      doc: 'MLRuns tf.keras.Model.fit wrapper. It will setup the optimizer when using
        horovod. The optimizer must be

        passed in a keyword argument and when using horovod, it must be passed as
        an Optimizer instance, not a string.


        raise MLRunInvalidArgumentError: In case the optimizer provided did not follow
        the instructions above.'
      parameters:
      - name: cls
      outputs: []
      lineno: 164
      has_varargs: false
      has_kwargs: false
    on_epoch_begin:
      name: on_epoch_begin
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      outputs: []
      lineno: 220
      has_varargs: false
      has_kwargs: true
    on_epoch_end:
      name: on_epoch_end
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      outputs: []
      lineno: 229
      has_varargs: false
      has_kwargs: true
    on_log:
      name: on_log
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      - name: logs
        type: Dict[str, float]
        default: null
      outputs: []
      lineno: 238
      has_varargs: false
      has_kwargs: true
    on_train_begin:
      name: on_train_begin
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      outputs: []
      lineno: 262
      has_varargs: false
      has_kwargs: true
    on_train_end:
      name: on_train_end
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      - name: model
        type: PreTrainedModel
        default: null
      - name: tokenizer
        type: PreTrainedTokenizer
        default: null
      outputs: []
      lineno: 271
      has_varargs: false
      has_kwargs: true
    on_evaluate:
      name: on_evaluate
      doc: ''
      parameters:
      - name: self
      - name: args
        type: TrainingArguments
      - name: state
        type: TrainerState
      - name: control
        type: TrainerControl
      outputs: []
      lineno: 322
      has_varargs: false
      has_kwargs: true
    apply_mlrun:
      name: apply_mlrun
      doc: Wrap the given model with MLRun's interface providing it with mlrun's additional
        features.
      parameters:
      - name: huggingface_object
        doc: The model to wrap. Can be loaded from the model path given as well.
      - name: model_name
        type: str
        doc: 'The model name to use for storing the model artifact. Default: "model".'
        default: null
      - name: tag
        type: str
        doc: The model's tag to log with.
        default: ''
      - name: context
        type: MLClientCtx
        doc: MLRun context to work with. If no context is given it will be retrieved
          via 'mlrun.get_or_create_ctx(None)'
        default: null
      - name: auto_log
        type: bool
        doc: 'Whether to enable MLRun''s auto logging. Default: True.'
        default: true
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs: []
      lineno: 421
      has_varargs: false
      has_kwargs: true
    train:
      name: train
      doc: 'Training and evaluating a pretrained model with a pretrained tokenizer
        over a dataset.

        The dataset can be either be the name of the dataset that contains in the
        HuggingFace hub,

        or a URI or a FeatureVector'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
      - name: hf_dataset
        type: str
        doc: The name of the dataset to get from the HuggingFace hub
        default: null
      - name: dataset
        type: DataItem
        doc: The dataset to train the model on. Can be either a URI or a FeatureVector
        default: null
      - name: test_set
        type: DataItem
        doc: The test set to train the model with.
        default: null
      - name: drop_columns
        type: Optional[List[str]]
        doc: The columns to drop from the dataset.
        default: null
      - name: pretrained_tokenizer
        type: str
        doc: The name of the pretrained tokenizer from the HuggingFace hub.
        default: null
      - name: pretrained_model
        type: str
        doc: The name of the pretrained model from the HuggingFace hub.
        default: null
      - name: model_class
        type: str
        doc: The class of the model, e.g. `transformers.AutoModelForSequenceClassification`
        default: null
      - name: model_name
        type: str
        doc: The model's name to use for storing the model artifact, default to 'model'
        default: huggingface-model
      - name: label_name
        type: str
        doc: The target label of the column in the dataset.
        default: labels
      - name: text_col
        type: str
        doc: The input text column un the dataset.
        default: text
      - name: num_of_train_samples
        type: int
        doc: Max number of training samples, for debugging.
        default: null
      - name: train_test_split_size
        type: float
        doc: Should be between 0.0 and 1.0 and represent the proportion of the dataset
          to include in the test split.
        default: null
      - name: metrics
        type: List[str]
        doc: List of different metrics for evaluate the model such as f1, accuracy
          etc.
        default: null
      - name: random_state
        type: int
        doc: Random state for train_test_split
        default: null
      outputs: []
      lineno: 647
      has_varargs: false
      has_kwargs: false
    preprocess_function:
      name: preprocess_function
      doc: ''
      parameters:
      - name: examples
      outputs: []
      lineno: 696
      has_varargs: false
      has_kwargs: false
    optimize:
      name: optimize
      doc: Optimizing the transformer model using ONNX optimization.
      parameters:
      - name: model_path
        type: str
        doc: The path of the model to optimize.
      - name: model_name
        type: str
        doc: Name of the optimized model.
        default: optimized_model
      - name: target_dir
        type: str
        doc: The directory to save the ONNX model.
        default: ./optimized
      - name: optimization_level
        type: int
        doc: Optimization level performed by ONNX Runtime of the loaded graph. (default
          is 1)
        default: 1
      outputs: []
      lineno: 799
      has_varargs: false
      has_kwargs: false
  description: Automatic train and optimize functions for HuggingFace framework
  default_handler: train
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
