kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: 88e5e4bfeefbf3357eb91d9e389194219adf73e9
  project: default
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: git@github.com-personal:pengwei715/functions.git#b32223f4c3a8b5c1b4950555d054de2b8d88d464:pii_recognizer.py
    origin_filename: pii_recognizer.py
    requirements:
    - mlrun==1.4.0-rc19
    - pandas
    - presidio-anonymizer
    - presidio-analyzer
    - torch
    - flair@git+https://github.com/flairNLP/flair.git@d4ed67bf663e4066517f00397412510d90043653
    - st-annotated-text
    - https://huggingface.co/beki/en_spacy_pii_distilbert/resolve/main/en_spacy_pii_distilbert-any-py3-none-any.whl
  entry_points:
    analyze:
      name: analyze
      doc: Analyze text and return the results.
      parameters:
      - name: self
        default: ''
      - name: text
        type: str
        doc: The text for analysis.
        default: ''
      - name: entities
        type: List[str]
        doc: The list of entities to recognize.
        default: ''
      - name: nlp_artifacts
        type: pa.nlp_engine.NlpArtifacts
        doc: Not used by this recognizer but needed for the interface.
        default: null
      outputs:
      - default: ''
        doc: The list of Presidio RecognizerResult constructed from the recognized
          Flair detections.
      lineno: 343
    recognize_pii:
      name: recognize_pii
      doc: Walk through the input path, recognize PII in text and store the anonymized
        text in the output path. Generate the html with different colors for each
        entity, json report of the explaination.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun context. this is needed for log the artifacts.
        default: ''
      - name: input_path
        type: str
        doc: The input path of the text files needs to be analyzied.
        default: ''
      - name: output_path
        type: str
        doc: The output path to store the anonymized text.
        default: ''
      - name: output_suffix
        type: str
        doc: The surfix of output key for the anonymized text. for example if the
          input file is pii.txt, the output key is anoymized, the output file name
          will be pii_anonymized.txt.
        default: ''
      - name: html_key
        type: str
        doc: The html key for the artifact.
        default: ''
      - name: model
        type: str
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: whole
      - name: is_full_html
        type: bool
        doc: Whether to return the full html or just the annotated text
        default: true
      - name: is_full_report
        type: bool
        doc: Whether to return the full report or just the score and start, end index
        default: true
      outputs:
      - default: ''
        doc: 'A tuple of:'
      lineno: 633
  description: This function is used to recognize PII in a given text
  default_handler: recognize_pii
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
